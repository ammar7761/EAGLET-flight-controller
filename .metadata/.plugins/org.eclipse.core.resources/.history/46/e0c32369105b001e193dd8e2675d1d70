#include "adxl345.h"

uint8_t rec[6];
uint8_t chipid=0;
char x_char[3], y_char[3], z_char[3];

void adxl_write (uint8_t reg, uint8_t value)
{
	uint8_t data[2];
	data[0] = reg;
	data[1] = value;
	HAL_I2C_Master_Transmit (&hi2c1, adxl_address, data, 2, 100);
}

void adxl_read_values (uint8_t reg)
{
	HAL_I2C_Mem_Read (&hi2c1, adxl_address, reg, 1,(uint8_t*)buf[index], 1, 100);
}

void adxl_read_address (uint8_t reg)
{
	HAL_I2C_Mem_Read (&hi2c1, adxl_address, reg, 1, &chipid, 1, 100);
}

void adxl_init (void)
{
	adxl_read_address (0x00); // read the DEVID

	adxl_write (0x31, 0x01);  // data_format range= +- 4g
	adxl_write (0x2d, 0x00);  // reset all bits
	adxl_write (0x2d, 0x08);  // power_cntl measure and wake up 8hz

}

int16_t adxl_readx(void)
{
	int16_t x;
	adxl_read_values (0x32 ,x_rec, 0);
	adxl_read_values (0x33 ,x_rec, 1);
	x = ((x_rec[1]<<8)|x_rec[0]);
	return x;
}

int16_t adxl_ready(void)
{
	int16_t y;
	adxl_read_values (0x34 ,y_rec, 0);
	adxl_read_values (0x35 ,y_rec, 1);
	y = ((y_rec[1]<<8)|y_rec[0]);
	return y;
}

int16_t adxl_readz(void)
{
	int16_t z;
	adxl_read_values (0x36 ,z_rec, 0);
	adxl_read_values (0x37 ,z_rec, 1);
	z = ((z_rec[1]<<8)|z_rec[0]);
	return z;
}
