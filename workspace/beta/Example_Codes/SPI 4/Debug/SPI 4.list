
SPI 4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006cd0  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003f4  08006e70  08006e70  00016e70  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007264  08007264  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  08007264  08007264  00017264  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800726c  0800726c  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800726c  0800726c  0001726c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007270  08007270  00017270  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08007274  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000e8  200001dc  08007450  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002c4  08007450  000202c4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b004  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001aa0  00000000  00000000  0002b210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000970  00000000  00000000  0002ccb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000008c8  00000000  00000000  0002d620  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016620  00000000  00000000  0002dee8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b149  00000000  00000000  00044508  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00087f5d  00000000  00000000  0004f651  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d75ae  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003678  00000000  00000000  000d7600  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001dc 	.word	0x200001dc
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08006e58 	.word	0x08006e58

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001e0 	.word	0x200001e0
 80001dc:	08006e58 	.word	0x08006e58

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <__aeabi_uldivmod>:
 8000c58:	b953      	cbnz	r3, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5a:	b94a      	cbnz	r2, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5c:	2900      	cmp	r1, #0
 8000c5e:	bf08      	it	eq
 8000c60:	2800      	cmpeq	r0, #0
 8000c62:	bf1c      	itt	ne
 8000c64:	f04f 31ff 	movne.w	r1, #4294967295
 8000c68:	f04f 30ff 	movne.w	r0, #4294967295
 8000c6c:	f000 b974 	b.w	8000f58 <__aeabi_idiv0>
 8000c70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c78:	f000 f806 	bl	8000c88 <__udivmoddi4>
 8000c7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c84:	b004      	add	sp, #16
 8000c86:	4770      	bx	lr

08000c88 <__udivmoddi4>:
 8000c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c8c:	9d08      	ldr	r5, [sp, #32]
 8000c8e:	4604      	mov	r4, r0
 8000c90:	468e      	mov	lr, r1
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d14d      	bne.n	8000d32 <__udivmoddi4+0xaa>
 8000c96:	428a      	cmp	r2, r1
 8000c98:	4694      	mov	ip, r2
 8000c9a:	d969      	bls.n	8000d70 <__udivmoddi4+0xe8>
 8000c9c:	fab2 f282 	clz	r2, r2
 8000ca0:	b152      	cbz	r2, 8000cb8 <__udivmoddi4+0x30>
 8000ca2:	fa01 f302 	lsl.w	r3, r1, r2
 8000ca6:	f1c2 0120 	rsb	r1, r2, #32
 8000caa:	fa20 f101 	lsr.w	r1, r0, r1
 8000cae:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cb2:	ea41 0e03 	orr.w	lr, r1, r3
 8000cb6:	4094      	lsls	r4, r2
 8000cb8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cbc:	0c21      	lsrs	r1, r4, #16
 8000cbe:	fbbe f6f8 	udiv	r6, lr, r8
 8000cc2:	fa1f f78c 	uxth.w	r7, ip
 8000cc6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cca:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cce:	fb06 f107 	mul.w	r1, r6, r7
 8000cd2:	4299      	cmp	r1, r3
 8000cd4:	d90a      	bls.n	8000cec <__udivmoddi4+0x64>
 8000cd6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cda:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cde:	f080 811f 	bcs.w	8000f20 <__udivmoddi4+0x298>
 8000ce2:	4299      	cmp	r1, r3
 8000ce4:	f240 811c 	bls.w	8000f20 <__udivmoddi4+0x298>
 8000ce8:	3e02      	subs	r6, #2
 8000cea:	4463      	add	r3, ip
 8000cec:	1a5b      	subs	r3, r3, r1
 8000cee:	b2a4      	uxth	r4, r4
 8000cf0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cf4:	fb08 3310 	mls	r3, r8, r0, r3
 8000cf8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cfc:	fb00 f707 	mul.w	r7, r0, r7
 8000d00:	42a7      	cmp	r7, r4
 8000d02:	d90a      	bls.n	8000d1a <__udivmoddi4+0x92>
 8000d04:	eb1c 0404 	adds.w	r4, ip, r4
 8000d08:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d0c:	f080 810a 	bcs.w	8000f24 <__udivmoddi4+0x29c>
 8000d10:	42a7      	cmp	r7, r4
 8000d12:	f240 8107 	bls.w	8000f24 <__udivmoddi4+0x29c>
 8000d16:	4464      	add	r4, ip
 8000d18:	3802      	subs	r0, #2
 8000d1a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d1e:	1be4      	subs	r4, r4, r7
 8000d20:	2600      	movs	r6, #0
 8000d22:	b11d      	cbz	r5, 8000d2c <__udivmoddi4+0xa4>
 8000d24:	40d4      	lsrs	r4, r2
 8000d26:	2300      	movs	r3, #0
 8000d28:	e9c5 4300 	strd	r4, r3, [r5]
 8000d2c:	4631      	mov	r1, r6
 8000d2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d32:	428b      	cmp	r3, r1
 8000d34:	d909      	bls.n	8000d4a <__udivmoddi4+0xc2>
 8000d36:	2d00      	cmp	r5, #0
 8000d38:	f000 80ef 	beq.w	8000f1a <__udivmoddi4+0x292>
 8000d3c:	2600      	movs	r6, #0
 8000d3e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d42:	4630      	mov	r0, r6
 8000d44:	4631      	mov	r1, r6
 8000d46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d4a:	fab3 f683 	clz	r6, r3
 8000d4e:	2e00      	cmp	r6, #0
 8000d50:	d14a      	bne.n	8000de8 <__udivmoddi4+0x160>
 8000d52:	428b      	cmp	r3, r1
 8000d54:	d302      	bcc.n	8000d5c <__udivmoddi4+0xd4>
 8000d56:	4282      	cmp	r2, r0
 8000d58:	f200 80f9 	bhi.w	8000f4e <__udivmoddi4+0x2c6>
 8000d5c:	1a84      	subs	r4, r0, r2
 8000d5e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d62:	2001      	movs	r0, #1
 8000d64:	469e      	mov	lr, r3
 8000d66:	2d00      	cmp	r5, #0
 8000d68:	d0e0      	beq.n	8000d2c <__udivmoddi4+0xa4>
 8000d6a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d6e:	e7dd      	b.n	8000d2c <__udivmoddi4+0xa4>
 8000d70:	b902      	cbnz	r2, 8000d74 <__udivmoddi4+0xec>
 8000d72:	deff      	udf	#255	; 0xff
 8000d74:	fab2 f282 	clz	r2, r2
 8000d78:	2a00      	cmp	r2, #0
 8000d7a:	f040 8092 	bne.w	8000ea2 <__udivmoddi4+0x21a>
 8000d7e:	eba1 010c 	sub.w	r1, r1, ip
 8000d82:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d86:	fa1f fe8c 	uxth.w	lr, ip
 8000d8a:	2601      	movs	r6, #1
 8000d8c:	0c20      	lsrs	r0, r4, #16
 8000d8e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d92:	fb07 1113 	mls	r1, r7, r3, r1
 8000d96:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d9a:	fb0e f003 	mul.w	r0, lr, r3
 8000d9e:	4288      	cmp	r0, r1
 8000da0:	d908      	bls.n	8000db4 <__udivmoddi4+0x12c>
 8000da2:	eb1c 0101 	adds.w	r1, ip, r1
 8000da6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000daa:	d202      	bcs.n	8000db2 <__udivmoddi4+0x12a>
 8000dac:	4288      	cmp	r0, r1
 8000dae:	f200 80cb 	bhi.w	8000f48 <__udivmoddi4+0x2c0>
 8000db2:	4643      	mov	r3, r8
 8000db4:	1a09      	subs	r1, r1, r0
 8000db6:	b2a4      	uxth	r4, r4
 8000db8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dbc:	fb07 1110 	mls	r1, r7, r0, r1
 8000dc0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000dc4:	fb0e fe00 	mul.w	lr, lr, r0
 8000dc8:	45a6      	cmp	lr, r4
 8000dca:	d908      	bls.n	8000dde <__udivmoddi4+0x156>
 8000dcc:	eb1c 0404 	adds.w	r4, ip, r4
 8000dd0:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dd4:	d202      	bcs.n	8000ddc <__udivmoddi4+0x154>
 8000dd6:	45a6      	cmp	lr, r4
 8000dd8:	f200 80bb 	bhi.w	8000f52 <__udivmoddi4+0x2ca>
 8000ddc:	4608      	mov	r0, r1
 8000dde:	eba4 040e 	sub.w	r4, r4, lr
 8000de2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000de6:	e79c      	b.n	8000d22 <__udivmoddi4+0x9a>
 8000de8:	f1c6 0720 	rsb	r7, r6, #32
 8000dec:	40b3      	lsls	r3, r6
 8000dee:	fa22 fc07 	lsr.w	ip, r2, r7
 8000df2:	ea4c 0c03 	orr.w	ip, ip, r3
 8000df6:	fa20 f407 	lsr.w	r4, r0, r7
 8000dfa:	fa01 f306 	lsl.w	r3, r1, r6
 8000dfe:	431c      	orrs	r4, r3
 8000e00:	40f9      	lsrs	r1, r7
 8000e02:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e06:	fa00 f306 	lsl.w	r3, r0, r6
 8000e0a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e0e:	0c20      	lsrs	r0, r4, #16
 8000e10:	fa1f fe8c 	uxth.w	lr, ip
 8000e14:	fb09 1118 	mls	r1, r9, r8, r1
 8000e18:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e1c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e20:	4288      	cmp	r0, r1
 8000e22:	fa02 f206 	lsl.w	r2, r2, r6
 8000e26:	d90b      	bls.n	8000e40 <__udivmoddi4+0x1b8>
 8000e28:	eb1c 0101 	adds.w	r1, ip, r1
 8000e2c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e30:	f080 8088 	bcs.w	8000f44 <__udivmoddi4+0x2bc>
 8000e34:	4288      	cmp	r0, r1
 8000e36:	f240 8085 	bls.w	8000f44 <__udivmoddi4+0x2bc>
 8000e3a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e3e:	4461      	add	r1, ip
 8000e40:	1a09      	subs	r1, r1, r0
 8000e42:	b2a4      	uxth	r4, r4
 8000e44:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e48:	fb09 1110 	mls	r1, r9, r0, r1
 8000e4c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e50:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e54:	458e      	cmp	lr, r1
 8000e56:	d908      	bls.n	8000e6a <__udivmoddi4+0x1e2>
 8000e58:	eb1c 0101 	adds.w	r1, ip, r1
 8000e5c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e60:	d26c      	bcs.n	8000f3c <__udivmoddi4+0x2b4>
 8000e62:	458e      	cmp	lr, r1
 8000e64:	d96a      	bls.n	8000f3c <__udivmoddi4+0x2b4>
 8000e66:	3802      	subs	r0, #2
 8000e68:	4461      	add	r1, ip
 8000e6a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e6e:	fba0 9402 	umull	r9, r4, r0, r2
 8000e72:	eba1 010e 	sub.w	r1, r1, lr
 8000e76:	42a1      	cmp	r1, r4
 8000e78:	46c8      	mov	r8, r9
 8000e7a:	46a6      	mov	lr, r4
 8000e7c:	d356      	bcc.n	8000f2c <__udivmoddi4+0x2a4>
 8000e7e:	d053      	beq.n	8000f28 <__udivmoddi4+0x2a0>
 8000e80:	b15d      	cbz	r5, 8000e9a <__udivmoddi4+0x212>
 8000e82:	ebb3 0208 	subs.w	r2, r3, r8
 8000e86:	eb61 010e 	sbc.w	r1, r1, lr
 8000e8a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e8e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e92:	40f1      	lsrs	r1, r6
 8000e94:	431f      	orrs	r7, r3
 8000e96:	e9c5 7100 	strd	r7, r1, [r5]
 8000e9a:	2600      	movs	r6, #0
 8000e9c:	4631      	mov	r1, r6
 8000e9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ea2:	f1c2 0320 	rsb	r3, r2, #32
 8000ea6:	40d8      	lsrs	r0, r3
 8000ea8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000eac:	fa21 f303 	lsr.w	r3, r1, r3
 8000eb0:	4091      	lsls	r1, r2
 8000eb2:	4301      	orrs	r1, r0
 8000eb4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000eb8:	fa1f fe8c 	uxth.w	lr, ip
 8000ebc:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ec0:	fb07 3610 	mls	r6, r7, r0, r3
 8000ec4:	0c0b      	lsrs	r3, r1, #16
 8000ec6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000eca:	fb00 f60e 	mul.w	r6, r0, lr
 8000ece:	429e      	cmp	r6, r3
 8000ed0:	fa04 f402 	lsl.w	r4, r4, r2
 8000ed4:	d908      	bls.n	8000ee8 <__udivmoddi4+0x260>
 8000ed6:	eb1c 0303 	adds.w	r3, ip, r3
 8000eda:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ede:	d22f      	bcs.n	8000f40 <__udivmoddi4+0x2b8>
 8000ee0:	429e      	cmp	r6, r3
 8000ee2:	d92d      	bls.n	8000f40 <__udivmoddi4+0x2b8>
 8000ee4:	3802      	subs	r0, #2
 8000ee6:	4463      	add	r3, ip
 8000ee8:	1b9b      	subs	r3, r3, r6
 8000eea:	b289      	uxth	r1, r1
 8000eec:	fbb3 f6f7 	udiv	r6, r3, r7
 8000ef0:	fb07 3316 	mls	r3, r7, r6, r3
 8000ef4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ef8:	fb06 f30e 	mul.w	r3, r6, lr
 8000efc:	428b      	cmp	r3, r1
 8000efe:	d908      	bls.n	8000f12 <__udivmoddi4+0x28a>
 8000f00:	eb1c 0101 	adds.w	r1, ip, r1
 8000f04:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f08:	d216      	bcs.n	8000f38 <__udivmoddi4+0x2b0>
 8000f0a:	428b      	cmp	r3, r1
 8000f0c:	d914      	bls.n	8000f38 <__udivmoddi4+0x2b0>
 8000f0e:	3e02      	subs	r6, #2
 8000f10:	4461      	add	r1, ip
 8000f12:	1ac9      	subs	r1, r1, r3
 8000f14:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f18:	e738      	b.n	8000d8c <__udivmoddi4+0x104>
 8000f1a:	462e      	mov	r6, r5
 8000f1c:	4628      	mov	r0, r5
 8000f1e:	e705      	b.n	8000d2c <__udivmoddi4+0xa4>
 8000f20:	4606      	mov	r6, r0
 8000f22:	e6e3      	b.n	8000cec <__udivmoddi4+0x64>
 8000f24:	4618      	mov	r0, r3
 8000f26:	e6f8      	b.n	8000d1a <__udivmoddi4+0x92>
 8000f28:	454b      	cmp	r3, r9
 8000f2a:	d2a9      	bcs.n	8000e80 <__udivmoddi4+0x1f8>
 8000f2c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f30:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f34:	3801      	subs	r0, #1
 8000f36:	e7a3      	b.n	8000e80 <__udivmoddi4+0x1f8>
 8000f38:	4646      	mov	r6, r8
 8000f3a:	e7ea      	b.n	8000f12 <__udivmoddi4+0x28a>
 8000f3c:	4620      	mov	r0, r4
 8000f3e:	e794      	b.n	8000e6a <__udivmoddi4+0x1e2>
 8000f40:	4640      	mov	r0, r8
 8000f42:	e7d1      	b.n	8000ee8 <__udivmoddi4+0x260>
 8000f44:	46d0      	mov	r8, sl
 8000f46:	e77b      	b.n	8000e40 <__udivmoddi4+0x1b8>
 8000f48:	3b02      	subs	r3, #2
 8000f4a:	4461      	add	r1, ip
 8000f4c:	e732      	b.n	8000db4 <__udivmoddi4+0x12c>
 8000f4e:	4630      	mov	r0, r6
 8000f50:	e709      	b.n	8000d66 <__udivmoddi4+0xde>
 8000f52:	4464      	add	r4, ip
 8000f54:	3802      	subs	r0, #2
 8000f56:	e742      	b.n	8000dde <__udivmoddi4+0x156>

08000f58 <__aeabi_idiv0>:
 8000f58:	4770      	bx	lr
 8000f5a:	bf00      	nop

08000f5c <adxl_write>:
/* USER CODE BEGIN 0 */
uint8_t data[6];
uint16_t x,y,z;
float xg,yg,zg;

void adxl_write(uint8_t adress, uint8_t value){
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b084      	sub	sp, #16
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	4603      	mov	r3, r0
 8000f64:	460a      	mov	r2, r1
 8000f66:	71fb      	strb	r3, [r7, #7]
 8000f68:	4613      	mov	r3, r2
 8000f6a:	71bb      	strb	r3, [r7, #6]
	uint8_t data[2];
	data[0]=adress|0x40;
 8000f6c:	79fb      	ldrb	r3, [r7, #7]
 8000f6e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000f72:	b2db      	uxtb	r3, r3
 8000f74:	733b      	strb	r3, [r7, #12]
	data[1]=value;
 8000f76:	79bb      	ldrb	r3, [r7, #6]
 8000f78:	737b      	strb	r3, [r7, #13]
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f80:	4809      	ldr	r0, [pc, #36]	; (8000fa8 <adxl_write+0x4c>)
 8000f82:	f000 ffd5 	bl	8001f30 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, data, 2, 100);
 8000f86:	f107 010c 	add.w	r1, r7, #12
 8000f8a:	2364      	movs	r3, #100	; 0x64
 8000f8c:	2202      	movs	r2, #2
 8000f8e:	4807      	ldr	r0, [pc, #28]	; (8000fac <adxl_write+0x50>)
 8000f90:	f001 fcc9 	bl	8002926 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET);
 8000f94:	2201      	movs	r2, #1
 8000f96:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f9a:	4803      	ldr	r0, [pc, #12]	; (8000fa8 <adxl_write+0x4c>)
 8000f9c:	f000 ffc8 	bl	8001f30 <HAL_GPIO_WritePin>
}
 8000fa0:	bf00      	nop
 8000fa2:	3710      	adds	r7, #16
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	bd80      	pop	{r7, pc}
 8000fa8:	40020400 	.word	0x40020400
 8000fac:	200001f8 	.word	0x200001f8

08000fb0 <adxl_read>:

void adxl_read(uint8_t adress){
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b082      	sub	sp, #8
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	71fb      	strb	r3, [r7, #7]
	adress|=0x40;
 8000fba:	79fb      	ldrb	r3, [r7, #7]
 8000fbc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000fc0:	b2db      	uxtb	r3, r3
 8000fc2:	71fb      	strb	r3, [r7, #7]
	adress|=0x80;
 8000fc4:	79fb      	ldrb	r3, [r7, #7]
 8000fc6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000fca:	b2db      	uxtb	r3, r3
 8000fcc:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 8000fce:	2200      	movs	r2, #0
 8000fd0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000fd4:	480c      	ldr	r0, [pc, #48]	; (8001008 <adxl_read+0x58>)
 8000fd6:	f000 ffab 	bl	8001f30 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, &adress, 1, 100);
 8000fda:	1df9      	adds	r1, r7, #7
 8000fdc:	2364      	movs	r3, #100	; 0x64
 8000fde:	2201      	movs	r2, #1
 8000fe0:	480a      	ldr	r0, [pc, #40]	; (800100c <adxl_read+0x5c>)
 8000fe2:	f001 fca0 	bl	8002926 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi2, data, 6, 100);
 8000fe6:	2364      	movs	r3, #100	; 0x64
 8000fe8:	2206      	movs	r2, #6
 8000fea:	4909      	ldr	r1, [pc, #36]	; (8001010 <adxl_read+0x60>)
 8000fec:	4807      	ldr	r0, [pc, #28]	; (800100c <adxl_read+0x5c>)
 8000fee:	f001 fdd6 	bl	8002b9e <HAL_SPI_Receive>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET);
 8000ff2:	2201      	movs	r2, #1
 8000ff4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ff8:	4803      	ldr	r0, [pc, #12]	; (8001008 <adxl_read+0x58>)
 8000ffa:	f000 ff99 	bl	8001f30 <HAL_GPIO_WritePin>
}
 8000ffe:	bf00      	nop
 8001000:	3708      	adds	r7, #8
 8001002:	46bd      	mov	sp, r7
 8001004:	bd80      	pop	{r7, pc}
 8001006:	bf00      	nop
 8001008:	40020400 	.word	0x40020400
 800100c:	200001f8 	.word	0x200001f8
 8001010:	20000294 	.word	0x20000294

08001014 <adxl_init>:


void adxl_init(void){
 8001014:	b580      	push	{r7, lr}
 8001016:	af00      	add	r7, sp, #0
	adxl_write(0x31, 0x01);
 8001018:	2101      	movs	r1, #1
 800101a:	2031      	movs	r0, #49	; 0x31
 800101c:	f7ff ff9e 	bl	8000f5c <adxl_write>
	adxl_write(0x2d, 0x00);
 8001020:	2100      	movs	r1, #0
 8001022:	202d      	movs	r0, #45	; 0x2d
 8001024:	f7ff ff9a 	bl	8000f5c <adxl_write>
	adxl_write(0x2d, 0x08);
 8001028:	2108      	movs	r1, #8
 800102a:	202d      	movs	r0, #45	; 0x2d
 800102c:	f7ff ff96 	bl	8000f5c <adxl_write>

}
 8001030:	bf00      	nop
 8001032:	bd80      	pop	{r7, pc}
 8001034:	0000      	movs	r0, r0
	...

08001038 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800103c:	f000 fbde 	bl	80017fc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001040:	f000 f88c 	bl	800115c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001044:	f000 f954 	bl	80012f0 <MX_GPIO_Init>
  MX_SPI2_Init();
 8001048:	f000 f8f2 	bl	8001230 <MX_SPI2_Init>
  MX_USART2_UART_Init();
 800104c:	f000 f926 	bl	800129c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  adxl_init();
 8001050:	f7ff ffe0 	bl	8001014 <adxl_init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  adxl_read(0x32);
 8001054:	2032      	movs	r0, #50	; 0x32
 8001056:	f7ff ffab 	bl	8000fb0 <adxl_read>
	  x=(data[1]<<8)|(data[0]);
 800105a:	4b39      	ldr	r3, [pc, #228]	; (8001140 <main+0x108>)
 800105c:	785b      	ldrb	r3, [r3, #1]
 800105e:	021b      	lsls	r3, r3, #8
 8001060:	b21a      	sxth	r2, r3
 8001062:	4b37      	ldr	r3, [pc, #220]	; (8001140 <main+0x108>)
 8001064:	781b      	ldrb	r3, [r3, #0]
 8001066:	b21b      	sxth	r3, r3
 8001068:	4313      	orrs	r3, r2
 800106a:	b21b      	sxth	r3, r3
 800106c:	b29a      	uxth	r2, r3
 800106e:	4b35      	ldr	r3, [pc, #212]	; (8001144 <main+0x10c>)
 8001070:	801a      	strh	r2, [r3, #0]
	  y=(data[3]<<8)|(data[2]);
 8001072:	4b33      	ldr	r3, [pc, #204]	; (8001140 <main+0x108>)
 8001074:	78db      	ldrb	r3, [r3, #3]
 8001076:	021b      	lsls	r3, r3, #8
 8001078:	b21a      	sxth	r2, r3
 800107a:	4b31      	ldr	r3, [pc, #196]	; (8001140 <main+0x108>)
 800107c:	789b      	ldrb	r3, [r3, #2]
 800107e:	b21b      	sxth	r3, r3
 8001080:	4313      	orrs	r3, r2
 8001082:	b21b      	sxth	r3, r3
 8001084:	b29a      	uxth	r2, r3
 8001086:	4b30      	ldr	r3, [pc, #192]	; (8001148 <main+0x110>)
 8001088:	801a      	strh	r2, [r3, #0]
	  z=(data[5]<<8)|(data[4]);
 800108a:	4b2d      	ldr	r3, [pc, #180]	; (8001140 <main+0x108>)
 800108c:	795b      	ldrb	r3, [r3, #5]
 800108e:	021b      	lsls	r3, r3, #8
 8001090:	b21a      	sxth	r2, r3
 8001092:	4b2b      	ldr	r3, [pc, #172]	; (8001140 <main+0x108>)
 8001094:	791b      	ldrb	r3, [r3, #4]
 8001096:	b21b      	sxth	r3, r3
 8001098:	4313      	orrs	r3, r2
 800109a:	b21b      	sxth	r3, r3
 800109c:	b29a      	uxth	r2, r3
 800109e:	4b2b      	ldr	r3, [pc, #172]	; (800114c <main+0x114>)
 80010a0:	801a      	strh	r2, [r3, #0]


	  xg=(float)x*0.0078;
 80010a2:	4b28      	ldr	r3, [pc, #160]	; (8001144 <main+0x10c>)
 80010a4:	881b      	ldrh	r3, [r3, #0]
 80010a6:	ee07 3a90 	vmov	s15, r3
 80010aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80010ae:	ee17 0a90 	vmov	r0, s15
 80010b2:	f7ff fa51 	bl	8000558 <__aeabi_f2d>
 80010b6:	a320      	add	r3, pc, #128	; (adr r3, 8001138 <main+0x100>)
 80010b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010bc:	f7ff faa4 	bl	8000608 <__aeabi_dmul>
 80010c0:	4602      	mov	r2, r0
 80010c2:	460b      	mov	r3, r1
 80010c4:	4610      	mov	r0, r2
 80010c6:	4619      	mov	r1, r3
 80010c8:	f7ff fd76 	bl	8000bb8 <__aeabi_d2f>
 80010cc:	4603      	mov	r3, r0
 80010ce:	4a20      	ldr	r2, [pc, #128]	; (8001150 <main+0x118>)
 80010d0:	6013      	str	r3, [r2, #0]
	  yg=(float)y*0.0078;
 80010d2:	4b1d      	ldr	r3, [pc, #116]	; (8001148 <main+0x110>)
 80010d4:	881b      	ldrh	r3, [r3, #0]
 80010d6:	ee07 3a90 	vmov	s15, r3
 80010da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80010de:	ee17 0a90 	vmov	r0, s15
 80010e2:	f7ff fa39 	bl	8000558 <__aeabi_f2d>
 80010e6:	a314      	add	r3, pc, #80	; (adr r3, 8001138 <main+0x100>)
 80010e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010ec:	f7ff fa8c 	bl	8000608 <__aeabi_dmul>
 80010f0:	4602      	mov	r2, r0
 80010f2:	460b      	mov	r3, r1
 80010f4:	4610      	mov	r0, r2
 80010f6:	4619      	mov	r1, r3
 80010f8:	f7ff fd5e 	bl	8000bb8 <__aeabi_d2f>
 80010fc:	4603      	mov	r3, r0
 80010fe:	4a15      	ldr	r2, [pc, #84]	; (8001154 <main+0x11c>)
 8001100:	6013      	str	r3, [r2, #0]
	  zg=(float)z*0.0078;
 8001102:	4b12      	ldr	r3, [pc, #72]	; (800114c <main+0x114>)
 8001104:	881b      	ldrh	r3, [r3, #0]
 8001106:	ee07 3a90 	vmov	s15, r3
 800110a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800110e:	ee17 0a90 	vmov	r0, s15
 8001112:	f7ff fa21 	bl	8000558 <__aeabi_f2d>
 8001116:	a308      	add	r3, pc, #32	; (adr r3, 8001138 <main+0x100>)
 8001118:	e9d3 2300 	ldrd	r2, r3, [r3]
 800111c:	f7ff fa74 	bl	8000608 <__aeabi_dmul>
 8001120:	4602      	mov	r2, r0
 8001122:	460b      	mov	r3, r1
 8001124:	4610      	mov	r0, r2
 8001126:	4619      	mov	r1, r3
 8001128:	f7ff fd46 	bl	8000bb8 <__aeabi_d2f>
 800112c:	4603      	mov	r3, r0
 800112e:	4a0a      	ldr	r2, [pc, #40]	; (8001158 <main+0x120>)
 8001130:	6013      	str	r3, [r2, #0]
	  adxl_read(0x32);
 8001132:	e78f      	b.n	8001054 <main+0x1c>
 8001134:	f3af 8000 	nop.w
 8001138:	8e8a71de 	.word	0x8e8a71de
 800113c:	3f7ff2e4 	.word	0x3f7ff2e4
 8001140:	20000294 	.word	0x20000294
 8001144:	2000029a 	.word	0x2000029a
 8001148:	2000029c 	.word	0x2000029c
 800114c:	2000029e 	.word	0x2000029e
 8001150:	200002a0 	.word	0x200002a0
 8001154:	200002a4 	.word	0x200002a4
 8001158:	200002a8 	.word	0x200002a8

0800115c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b094      	sub	sp, #80	; 0x50
 8001160:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001162:	f107 0320 	add.w	r3, r7, #32
 8001166:	2230      	movs	r2, #48	; 0x30
 8001168:	2100      	movs	r1, #0
 800116a:	4618      	mov	r0, r3
 800116c:	f003 f956 	bl	800441c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001170:	f107 030c 	add.w	r3, r7, #12
 8001174:	2200      	movs	r2, #0
 8001176:	601a      	str	r2, [r3, #0]
 8001178:	605a      	str	r2, [r3, #4]
 800117a:	609a      	str	r2, [r3, #8]
 800117c:	60da      	str	r2, [r3, #12]
 800117e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001180:	2300      	movs	r3, #0
 8001182:	60bb      	str	r3, [r7, #8]
 8001184:	4b28      	ldr	r3, [pc, #160]	; (8001228 <SystemClock_Config+0xcc>)
 8001186:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001188:	4a27      	ldr	r2, [pc, #156]	; (8001228 <SystemClock_Config+0xcc>)
 800118a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800118e:	6413      	str	r3, [r2, #64]	; 0x40
 8001190:	4b25      	ldr	r3, [pc, #148]	; (8001228 <SystemClock_Config+0xcc>)
 8001192:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001194:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001198:	60bb      	str	r3, [r7, #8]
 800119a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800119c:	2300      	movs	r3, #0
 800119e:	607b      	str	r3, [r7, #4]
 80011a0:	4b22      	ldr	r3, [pc, #136]	; (800122c <SystemClock_Config+0xd0>)
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80011a8:	4a20      	ldr	r2, [pc, #128]	; (800122c <SystemClock_Config+0xd0>)
 80011aa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80011ae:	6013      	str	r3, [r2, #0]
 80011b0:	4b1e      	ldr	r3, [pc, #120]	; (800122c <SystemClock_Config+0xd0>)
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80011b8:	607b      	str	r3, [r7, #4]
 80011ba:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80011bc:	2302      	movs	r3, #2
 80011be:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80011c0:	2301      	movs	r3, #1
 80011c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80011c4:	2310      	movs	r3, #16
 80011c6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011c8:	2302      	movs	r3, #2
 80011ca:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80011cc:	2300      	movs	r3, #0
 80011ce:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80011d0:	2308      	movs	r3, #8
 80011d2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 80011d4:	2348      	movs	r3, #72	; 0x48
 80011d6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80011d8:	2302      	movs	r3, #2
 80011da:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80011dc:	2304      	movs	r3, #4
 80011de:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011e0:	f107 0320 	add.w	r3, r7, #32
 80011e4:	4618      	mov	r0, r3
 80011e6:	f000 febd 	bl	8001f64 <HAL_RCC_OscConfig>
 80011ea:	4603      	mov	r3, r0
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d001      	beq.n	80011f4 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80011f0:	f000 f8f6 	bl	80013e0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011f4:	230f      	movs	r3, #15
 80011f6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011f8:	2302      	movs	r3, #2
 80011fa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011fc:	2300      	movs	r3, #0
 80011fe:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001200:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001204:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001206:	2300      	movs	r3, #0
 8001208:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800120a:	f107 030c 	add.w	r3, r7, #12
 800120e:	2102      	movs	r1, #2
 8001210:	4618      	mov	r0, r3
 8001212:	f001 f91f 	bl	8002454 <HAL_RCC_ClockConfig>
 8001216:	4603      	mov	r3, r0
 8001218:	2b00      	cmp	r3, #0
 800121a:	d001      	beq.n	8001220 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 800121c:	f000 f8e0 	bl	80013e0 <Error_Handler>
  }
}
 8001220:	bf00      	nop
 8001222:	3750      	adds	r7, #80	; 0x50
 8001224:	46bd      	mov	sp, r7
 8001226:	bd80      	pop	{r7, pc}
 8001228:	40023800 	.word	0x40023800
 800122c:	40007000 	.word	0x40007000

08001230 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001234:	4b17      	ldr	r3, [pc, #92]	; (8001294 <MX_SPI2_Init+0x64>)
 8001236:	4a18      	ldr	r2, [pc, #96]	; (8001298 <MX_SPI2_Init+0x68>)
 8001238:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800123a:	4b16      	ldr	r3, [pc, #88]	; (8001294 <MX_SPI2_Init+0x64>)
 800123c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001240:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001242:	4b14      	ldr	r3, [pc, #80]	; (8001294 <MX_SPI2_Init+0x64>)
 8001244:	2200      	movs	r2, #0
 8001246:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001248:	4b12      	ldr	r3, [pc, #72]	; (8001294 <MX_SPI2_Init+0x64>)
 800124a:	2200      	movs	r2, #0
 800124c:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 800124e:	4b11      	ldr	r3, [pc, #68]	; (8001294 <MX_SPI2_Init+0x64>)
 8001250:	2202      	movs	r2, #2
 8001252:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8001254:	4b0f      	ldr	r3, [pc, #60]	; (8001294 <MX_SPI2_Init+0x64>)
 8001256:	2201      	movs	r2, #1
 8001258:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800125a:	4b0e      	ldr	r3, [pc, #56]	; (8001294 <MX_SPI2_Init+0x64>)
 800125c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001260:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001262:	4b0c      	ldr	r3, [pc, #48]	; (8001294 <MX_SPI2_Init+0x64>)
 8001264:	2210      	movs	r2, #16
 8001266:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001268:	4b0a      	ldr	r3, [pc, #40]	; (8001294 <MX_SPI2_Init+0x64>)
 800126a:	2200      	movs	r2, #0
 800126c:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800126e:	4b09      	ldr	r3, [pc, #36]	; (8001294 <MX_SPI2_Init+0x64>)
 8001270:	2200      	movs	r2, #0
 8001272:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001274:	4b07      	ldr	r3, [pc, #28]	; (8001294 <MX_SPI2_Init+0x64>)
 8001276:	2200      	movs	r2, #0
 8001278:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 800127a:	4b06      	ldr	r3, [pc, #24]	; (8001294 <MX_SPI2_Init+0x64>)
 800127c:	220a      	movs	r2, #10
 800127e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001280:	4804      	ldr	r0, [pc, #16]	; (8001294 <MX_SPI2_Init+0x64>)
 8001282:	f001 fac7 	bl	8002814 <HAL_SPI_Init>
 8001286:	4603      	mov	r3, r0
 8001288:	2b00      	cmp	r3, #0
 800128a:	d001      	beq.n	8001290 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 800128c:	f000 f8a8 	bl	80013e0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001290:	bf00      	nop
 8001292:	bd80      	pop	{r7, pc}
 8001294:	200001f8 	.word	0x200001f8
 8001298:	40003800 	.word	0x40003800

0800129c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80012a0:	4b11      	ldr	r3, [pc, #68]	; (80012e8 <MX_USART2_UART_Init+0x4c>)
 80012a2:	4a12      	ldr	r2, [pc, #72]	; (80012ec <MX_USART2_UART_Init+0x50>)
 80012a4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80012a6:	4b10      	ldr	r3, [pc, #64]	; (80012e8 <MX_USART2_UART_Init+0x4c>)
 80012a8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80012ac:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80012ae:	4b0e      	ldr	r3, [pc, #56]	; (80012e8 <MX_USART2_UART_Init+0x4c>)
 80012b0:	2200      	movs	r2, #0
 80012b2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80012b4:	4b0c      	ldr	r3, [pc, #48]	; (80012e8 <MX_USART2_UART_Init+0x4c>)
 80012b6:	2200      	movs	r2, #0
 80012b8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80012ba:	4b0b      	ldr	r3, [pc, #44]	; (80012e8 <MX_USART2_UART_Init+0x4c>)
 80012bc:	2200      	movs	r2, #0
 80012be:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80012c0:	4b09      	ldr	r3, [pc, #36]	; (80012e8 <MX_USART2_UART_Init+0x4c>)
 80012c2:	220c      	movs	r2, #12
 80012c4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012c6:	4b08      	ldr	r3, [pc, #32]	; (80012e8 <MX_USART2_UART_Init+0x4c>)
 80012c8:	2200      	movs	r2, #0
 80012ca:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80012cc:	4b06      	ldr	r3, [pc, #24]	; (80012e8 <MX_USART2_UART_Init+0x4c>)
 80012ce:	2200      	movs	r2, #0
 80012d0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80012d2:	4805      	ldr	r0, [pc, #20]	; (80012e8 <MX_USART2_UART_Init+0x4c>)
 80012d4:	f002 f964 	bl	80035a0 <HAL_UART_Init>
 80012d8:	4603      	mov	r3, r0
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d001      	beq.n	80012e2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80012de:	f000 f87f 	bl	80013e0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80012e2:	bf00      	nop
 80012e4:	bd80      	pop	{r7, pc}
 80012e6:	bf00      	nop
 80012e8:	20000250 	.word	0x20000250
 80012ec:	40004400 	.word	0x40004400

080012f0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b08a      	sub	sp, #40	; 0x28
 80012f4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012f6:	f107 0314 	add.w	r3, r7, #20
 80012fa:	2200      	movs	r2, #0
 80012fc:	601a      	str	r2, [r3, #0]
 80012fe:	605a      	str	r2, [r3, #4]
 8001300:	609a      	str	r2, [r3, #8]
 8001302:	60da      	str	r2, [r3, #12]
 8001304:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001306:	2300      	movs	r3, #0
 8001308:	613b      	str	r3, [r7, #16]
 800130a:	4b32      	ldr	r3, [pc, #200]	; (80013d4 <MX_GPIO_Init+0xe4>)
 800130c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800130e:	4a31      	ldr	r2, [pc, #196]	; (80013d4 <MX_GPIO_Init+0xe4>)
 8001310:	f043 0304 	orr.w	r3, r3, #4
 8001314:	6313      	str	r3, [r2, #48]	; 0x30
 8001316:	4b2f      	ldr	r3, [pc, #188]	; (80013d4 <MX_GPIO_Init+0xe4>)
 8001318:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800131a:	f003 0304 	and.w	r3, r3, #4
 800131e:	613b      	str	r3, [r7, #16]
 8001320:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001322:	2300      	movs	r3, #0
 8001324:	60fb      	str	r3, [r7, #12]
 8001326:	4b2b      	ldr	r3, [pc, #172]	; (80013d4 <MX_GPIO_Init+0xe4>)
 8001328:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800132a:	4a2a      	ldr	r2, [pc, #168]	; (80013d4 <MX_GPIO_Init+0xe4>)
 800132c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001330:	6313      	str	r3, [r2, #48]	; 0x30
 8001332:	4b28      	ldr	r3, [pc, #160]	; (80013d4 <MX_GPIO_Init+0xe4>)
 8001334:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001336:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800133a:	60fb      	str	r3, [r7, #12]
 800133c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800133e:	2300      	movs	r3, #0
 8001340:	60bb      	str	r3, [r7, #8]
 8001342:	4b24      	ldr	r3, [pc, #144]	; (80013d4 <MX_GPIO_Init+0xe4>)
 8001344:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001346:	4a23      	ldr	r2, [pc, #140]	; (80013d4 <MX_GPIO_Init+0xe4>)
 8001348:	f043 0301 	orr.w	r3, r3, #1
 800134c:	6313      	str	r3, [r2, #48]	; 0x30
 800134e:	4b21      	ldr	r3, [pc, #132]	; (80013d4 <MX_GPIO_Init+0xe4>)
 8001350:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001352:	f003 0301 	and.w	r3, r3, #1
 8001356:	60bb      	str	r3, [r7, #8]
 8001358:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800135a:	2300      	movs	r3, #0
 800135c:	607b      	str	r3, [r7, #4]
 800135e:	4b1d      	ldr	r3, [pc, #116]	; (80013d4 <MX_GPIO_Init+0xe4>)
 8001360:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001362:	4a1c      	ldr	r2, [pc, #112]	; (80013d4 <MX_GPIO_Init+0xe4>)
 8001364:	f043 0302 	orr.w	r3, r3, #2
 8001368:	6313      	str	r3, [r2, #48]	; 0x30
 800136a:	4b1a      	ldr	r3, [pc, #104]	; (80013d4 <MX_GPIO_Init+0xe4>)
 800136c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800136e:	f003 0302 	and.w	r3, r3, #2
 8001372:	607b      	str	r3, [r7, #4]
 8001374:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001376:	2200      	movs	r2, #0
 8001378:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800137c:	4816      	ldr	r0, [pc, #88]	; (80013d8 <MX_GPIO_Init+0xe8>)
 800137e:	f000 fdd7 	bl	8001f30 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 8001382:	2200      	movs	r2, #0
 8001384:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001388:	4814      	ldr	r0, [pc, #80]	; (80013dc <MX_GPIO_Init+0xec>)
 800138a:	f000 fdd1 	bl	8001f30 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800138e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001392:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001394:	2301      	movs	r3, #1
 8001396:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001398:	2300      	movs	r3, #0
 800139a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800139c:	2300      	movs	r3, #0
 800139e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013a0:	f107 0314 	add.w	r3, r7, #20
 80013a4:	4619      	mov	r1, r3
 80013a6:	480c      	ldr	r0, [pc, #48]	; (80013d8 <MX_GPIO_Init+0xe8>)
 80013a8:	f000 fc3e 	bl	8001c28 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 80013ac:	f44f 7300 	mov.w	r3, #512	; 0x200
 80013b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013b2:	2301      	movs	r3, #1
 80013b4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b6:	2300      	movs	r3, #0
 80013b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013ba:	2300      	movs	r3, #0
 80013bc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013be:	f107 0314 	add.w	r3, r7, #20
 80013c2:	4619      	mov	r1, r3
 80013c4:	4805      	ldr	r0, [pc, #20]	; (80013dc <MX_GPIO_Init+0xec>)
 80013c6:	f000 fc2f 	bl	8001c28 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80013ca:	bf00      	nop
 80013cc:	3728      	adds	r7, #40	; 0x28
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bd80      	pop	{r7, pc}
 80013d2:	bf00      	nop
 80013d4:	40023800 	.word	0x40023800
 80013d8:	40020800 	.word	0x40020800
 80013dc:	40020400 	.word	0x40020400

080013e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013e0:	b480      	push	{r7}
 80013e2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013e4:	b672      	cpsid	i
}
 80013e6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80013e8:	e7fe      	b.n	80013e8 <Error_Handler+0x8>
	...

080013ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013ec:	b480      	push	{r7}
 80013ee:	b083      	sub	sp, #12
 80013f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013f2:	2300      	movs	r3, #0
 80013f4:	607b      	str	r3, [r7, #4]
 80013f6:	4b10      	ldr	r3, [pc, #64]	; (8001438 <HAL_MspInit+0x4c>)
 80013f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013fa:	4a0f      	ldr	r2, [pc, #60]	; (8001438 <HAL_MspInit+0x4c>)
 80013fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001400:	6453      	str	r3, [r2, #68]	; 0x44
 8001402:	4b0d      	ldr	r3, [pc, #52]	; (8001438 <HAL_MspInit+0x4c>)
 8001404:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001406:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800140a:	607b      	str	r3, [r7, #4]
 800140c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800140e:	2300      	movs	r3, #0
 8001410:	603b      	str	r3, [r7, #0]
 8001412:	4b09      	ldr	r3, [pc, #36]	; (8001438 <HAL_MspInit+0x4c>)
 8001414:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001416:	4a08      	ldr	r2, [pc, #32]	; (8001438 <HAL_MspInit+0x4c>)
 8001418:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800141c:	6413      	str	r3, [r2, #64]	; 0x40
 800141e:	4b06      	ldr	r3, [pc, #24]	; (8001438 <HAL_MspInit+0x4c>)
 8001420:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001422:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001426:	603b      	str	r3, [r7, #0]
 8001428:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800142a:	bf00      	nop
 800142c:	370c      	adds	r7, #12
 800142e:	46bd      	mov	sp, r7
 8001430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001434:	4770      	bx	lr
 8001436:	bf00      	nop
 8001438:	40023800 	.word	0x40023800

0800143c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b08a      	sub	sp, #40	; 0x28
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001444:	f107 0314 	add.w	r3, r7, #20
 8001448:	2200      	movs	r2, #0
 800144a:	601a      	str	r2, [r3, #0]
 800144c:	605a      	str	r2, [r3, #4]
 800144e:	609a      	str	r2, [r3, #8]
 8001450:	60da      	str	r2, [r3, #12]
 8001452:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	4a1d      	ldr	r2, [pc, #116]	; (80014d0 <HAL_SPI_MspInit+0x94>)
 800145a:	4293      	cmp	r3, r2
 800145c:	d134      	bne.n	80014c8 <HAL_SPI_MspInit+0x8c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800145e:	2300      	movs	r3, #0
 8001460:	613b      	str	r3, [r7, #16]
 8001462:	4b1c      	ldr	r3, [pc, #112]	; (80014d4 <HAL_SPI_MspInit+0x98>)
 8001464:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001466:	4a1b      	ldr	r2, [pc, #108]	; (80014d4 <HAL_SPI_MspInit+0x98>)
 8001468:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800146c:	6413      	str	r3, [r2, #64]	; 0x40
 800146e:	4b19      	ldr	r3, [pc, #100]	; (80014d4 <HAL_SPI_MspInit+0x98>)
 8001470:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001472:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001476:	613b      	str	r3, [r7, #16]
 8001478:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800147a:	2300      	movs	r3, #0
 800147c:	60fb      	str	r3, [r7, #12]
 800147e:	4b15      	ldr	r3, [pc, #84]	; (80014d4 <HAL_SPI_MspInit+0x98>)
 8001480:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001482:	4a14      	ldr	r2, [pc, #80]	; (80014d4 <HAL_SPI_MspInit+0x98>)
 8001484:	f043 0302 	orr.w	r3, r3, #2
 8001488:	6313      	str	r3, [r2, #48]	; 0x30
 800148a:	4b12      	ldr	r3, [pc, #72]	; (80014d4 <HAL_SPI_MspInit+0x98>)
 800148c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800148e:	f003 0302 	and.w	r3, r3, #2
 8001492:	60fb      	str	r3, [r7, #12]
 8001494:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB10     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_14|GPIO_PIN_15;
 8001496:	f44f 4344 	mov.w	r3, #50176	; 0xc400
 800149a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800149c:	2302      	movs	r3, #2
 800149e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014a0:	2300      	movs	r3, #0
 80014a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014a4:	2303      	movs	r3, #3
 80014a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80014a8:	2305      	movs	r3, #5
 80014aa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014ac:	f107 0314 	add.w	r3, r7, #20
 80014b0:	4619      	mov	r1, r3
 80014b2:	4809      	ldr	r0, [pc, #36]	; (80014d8 <HAL_SPI_MspInit+0x9c>)
 80014b4:	f000 fbb8 	bl	8001c28 <HAL_GPIO_Init>

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 80014b8:	2200      	movs	r2, #0
 80014ba:	2100      	movs	r1, #0
 80014bc:	2024      	movs	r0, #36	; 0x24
 80014be:	f000 faea 	bl	8001a96 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 80014c2:	2024      	movs	r0, #36	; 0x24
 80014c4:	f000 fb03 	bl	8001ace <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80014c8:	bf00      	nop
 80014ca:	3728      	adds	r7, #40	; 0x28
 80014cc:	46bd      	mov	sp, r7
 80014ce:	bd80      	pop	{r7, pc}
 80014d0:	40003800 	.word	0x40003800
 80014d4:	40023800 	.word	0x40023800
 80014d8:	40020400 	.word	0x40020400

080014dc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b08a      	sub	sp, #40	; 0x28
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014e4:	f107 0314 	add.w	r3, r7, #20
 80014e8:	2200      	movs	r2, #0
 80014ea:	601a      	str	r2, [r3, #0]
 80014ec:	605a      	str	r2, [r3, #4]
 80014ee:	609a      	str	r2, [r3, #8]
 80014f0:	60da      	str	r2, [r3, #12]
 80014f2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	4a1d      	ldr	r2, [pc, #116]	; (8001570 <HAL_UART_MspInit+0x94>)
 80014fa:	4293      	cmp	r3, r2
 80014fc:	d133      	bne.n	8001566 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80014fe:	2300      	movs	r3, #0
 8001500:	613b      	str	r3, [r7, #16]
 8001502:	4b1c      	ldr	r3, [pc, #112]	; (8001574 <HAL_UART_MspInit+0x98>)
 8001504:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001506:	4a1b      	ldr	r2, [pc, #108]	; (8001574 <HAL_UART_MspInit+0x98>)
 8001508:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800150c:	6413      	str	r3, [r2, #64]	; 0x40
 800150e:	4b19      	ldr	r3, [pc, #100]	; (8001574 <HAL_UART_MspInit+0x98>)
 8001510:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001512:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001516:	613b      	str	r3, [r7, #16]
 8001518:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800151a:	2300      	movs	r3, #0
 800151c:	60fb      	str	r3, [r7, #12]
 800151e:	4b15      	ldr	r3, [pc, #84]	; (8001574 <HAL_UART_MspInit+0x98>)
 8001520:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001522:	4a14      	ldr	r2, [pc, #80]	; (8001574 <HAL_UART_MspInit+0x98>)
 8001524:	f043 0301 	orr.w	r3, r3, #1
 8001528:	6313      	str	r3, [r2, #48]	; 0x30
 800152a:	4b12      	ldr	r3, [pc, #72]	; (8001574 <HAL_UART_MspInit+0x98>)
 800152c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800152e:	f003 0301 	and.w	r3, r3, #1
 8001532:	60fb      	str	r3, [r7, #12]
 8001534:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001536:	230c      	movs	r3, #12
 8001538:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800153a:	2302      	movs	r3, #2
 800153c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800153e:	2300      	movs	r3, #0
 8001540:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001542:	2303      	movs	r3, #3
 8001544:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001546:	2307      	movs	r3, #7
 8001548:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800154a:	f107 0314 	add.w	r3, r7, #20
 800154e:	4619      	mov	r1, r3
 8001550:	4809      	ldr	r0, [pc, #36]	; (8001578 <HAL_UART_MspInit+0x9c>)
 8001552:	f000 fb69 	bl	8001c28 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001556:	2200      	movs	r2, #0
 8001558:	2100      	movs	r1, #0
 800155a:	2026      	movs	r0, #38	; 0x26
 800155c:	f000 fa9b 	bl	8001a96 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001560:	2026      	movs	r0, #38	; 0x26
 8001562:	f000 fab4 	bl	8001ace <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001566:	bf00      	nop
 8001568:	3728      	adds	r7, #40	; 0x28
 800156a:	46bd      	mov	sp, r7
 800156c:	bd80      	pop	{r7, pc}
 800156e:	bf00      	nop
 8001570:	40004400 	.word	0x40004400
 8001574:	40023800 	.word	0x40023800
 8001578:	40020000 	.word	0x40020000

0800157c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800157c:	b480      	push	{r7}
 800157e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001580:	e7fe      	b.n	8001580 <NMI_Handler+0x4>

08001582 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001582:	b480      	push	{r7}
 8001584:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001586:	e7fe      	b.n	8001586 <HardFault_Handler+0x4>

08001588 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001588:	b480      	push	{r7}
 800158a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800158c:	e7fe      	b.n	800158c <MemManage_Handler+0x4>

0800158e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800158e:	b480      	push	{r7}
 8001590:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001592:	e7fe      	b.n	8001592 <BusFault_Handler+0x4>

08001594 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001594:	b480      	push	{r7}
 8001596:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001598:	e7fe      	b.n	8001598 <UsageFault_Handler+0x4>

0800159a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800159a:	b480      	push	{r7}
 800159c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800159e:	bf00      	nop
 80015a0:	46bd      	mov	sp, r7
 80015a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a6:	4770      	bx	lr

080015a8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015a8:	b480      	push	{r7}
 80015aa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015ac:	bf00      	nop
 80015ae:	46bd      	mov	sp, r7
 80015b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b4:	4770      	bx	lr

080015b6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80015b6:	b480      	push	{r7}
 80015b8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80015ba:	bf00      	nop
 80015bc:	46bd      	mov	sp, r7
 80015be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c2:	4770      	bx	lr

080015c4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80015c8:	f000 f96a 	bl	80018a0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80015cc:	bf00      	nop
 80015ce:	bd80      	pop	{r7, pc}

080015d0 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 80015d4:	4802      	ldr	r0, [pc, #8]	; (80015e0 <SPI2_IRQHandler+0x10>)
 80015d6:	f001 fd95 	bl	8003104 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 80015da:	bf00      	nop
 80015dc:	bd80      	pop	{r7, pc}
 80015de:	bf00      	nop
 80015e0:	200001f8 	.word	0x200001f8

080015e4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80015e8:	4802      	ldr	r0, [pc, #8]	; (80015f4 <USART2_IRQHandler+0x10>)
 80015ea:	f002 f827 	bl	800363c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80015ee:	bf00      	nop
 80015f0:	bd80      	pop	{r7, pc}
 80015f2:	bf00      	nop
 80015f4:	20000250 	.word	0x20000250

080015f8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80015f8:	b480      	push	{r7}
 80015fa:	af00      	add	r7, sp, #0
  return 1;
 80015fc:	2301      	movs	r3, #1
}
 80015fe:	4618      	mov	r0, r3
 8001600:	46bd      	mov	sp, r7
 8001602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001606:	4770      	bx	lr

08001608 <_kill>:

int _kill(int pid, int sig)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	b082      	sub	sp, #8
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
 8001610:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001612:	f002 fed9 	bl	80043c8 <__errno>
 8001616:	4603      	mov	r3, r0
 8001618:	2216      	movs	r2, #22
 800161a:	601a      	str	r2, [r3, #0]
  return -1;
 800161c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001620:	4618      	mov	r0, r3
 8001622:	3708      	adds	r7, #8
 8001624:	46bd      	mov	sp, r7
 8001626:	bd80      	pop	{r7, pc}

08001628 <_exit>:

void _exit (int status)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	b082      	sub	sp, #8
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001630:	f04f 31ff 	mov.w	r1, #4294967295
 8001634:	6878      	ldr	r0, [r7, #4]
 8001636:	f7ff ffe7 	bl	8001608 <_kill>
  while (1) {}    /* Make sure we hang here */
 800163a:	e7fe      	b.n	800163a <_exit+0x12>

0800163c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b086      	sub	sp, #24
 8001640:	af00      	add	r7, sp, #0
 8001642:	60f8      	str	r0, [r7, #12]
 8001644:	60b9      	str	r1, [r7, #8]
 8001646:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001648:	2300      	movs	r3, #0
 800164a:	617b      	str	r3, [r7, #20]
 800164c:	e00a      	b.n	8001664 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800164e:	f3af 8000 	nop.w
 8001652:	4601      	mov	r1, r0
 8001654:	68bb      	ldr	r3, [r7, #8]
 8001656:	1c5a      	adds	r2, r3, #1
 8001658:	60ba      	str	r2, [r7, #8]
 800165a:	b2ca      	uxtb	r2, r1
 800165c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800165e:	697b      	ldr	r3, [r7, #20]
 8001660:	3301      	adds	r3, #1
 8001662:	617b      	str	r3, [r7, #20]
 8001664:	697a      	ldr	r2, [r7, #20]
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	429a      	cmp	r2, r3
 800166a:	dbf0      	blt.n	800164e <_read+0x12>
  }

  return len;
 800166c:	687b      	ldr	r3, [r7, #4]
}
 800166e:	4618      	mov	r0, r3
 8001670:	3718      	adds	r7, #24
 8001672:	46bd      	mov	sp, r7
 8001674:	bd80      	pop	{r7, pc}

08001676 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001676:	b580      	push	{r7, lr}
 8001678:	b086      	sub	sp, #24
 800167a:	af00      	add	r7, sp, #0
 800167c:	60f8      	str	r0, [r7, #12]
 800167e:	60b9      	str	r1, [r7, #8]
 8001680:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001682:	2300      	movs	r3, #0
 8001684:	617b      	str	r3, [r7, #20]
 8001686:	e009      	b.n	800169c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001688:	68bb      	ldr	r3, [r7, #8]
 800168a:	1c5a      	adds	r2, r3, #1
 800168c:	60ba      	str	r2, [r7, #8]
 800168e:	781b      	ldrb	r3, [r3, #0]
 8001690:	4618      	mov	r0, r3
 8001692:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001696:	697b      	ldr	r3, [r7, #20]
 8001698:	3301      	adds	r3, #1
 800169a:	617b      	str	r3, [r7, #20]
 800169c:	697a      	ldr	r2, [r7, #20]
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	429a      	cmp	r2, r3
 80016a2:	dbf1      	blt.n	8001688 <_write+0x12>
  }
  return len;
 80016a4:	687b      	ldr	r3, [r7, #4]
}
 80016a6:	4618      	mov	r0, r3
 80016a8:	3718      	adds	r7, #24
 80016aa:	46bd      	mov	sp, r7
 80016ac:	bd80      	pop	{r7, pc}

080016ae <_close>:

int _close(int file)
{
 80016ae:	b480      	push	{r7}
 80016b0:	b083      	sub	sp, #12
 80016b2:	af00      	add	r7, sp, #0
 80016b4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80016b6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80016ba:	4618      	mov	r0, r3
 80016bc:	370c      	adds	r7, #12
 80016be:	46bd      	mov	sp, r7
 80016c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c4:	4770      	bx	lr

080016c6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80016c6:	b480      	push	{r7}
 80016c8:	b083      	sub	sp, #12
 80016ca:	af00      	add	r7, sp, #0
 80016cc:	6078      	str	r0, [r7, #4]
 80016ce:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80016d0:	683b      	ldr	r3, [r7, #0]
 80016d2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80016d6:	605a      	str	r2, [r3, #4]
  return 0;
 80016d8:	2300      	movs	r3, #0
}
 80016da:	4618      	mov	r0, r3
 80016dc:	370c      	adds	r7, #12
 80016de:	46bd      	mov	sp, r7
 80016e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e4:	4770      	bx	lr

080016e6 <_isatty>:

int _isatty(int file)
{
 80016e6:	b480      	push	{r7}
 80016e8:	b083      	sub	sp, #12
 80016ea:	af00      	add	r7, sp, #0
 80016ec:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80016ee:	2301      	movs	r3, #1
}
 80016f0:	4618      	mov	r0, r3
 80016f2:	370c      	adds	r7, #12
 80016f4:	46bd      	mov	sp, r7
 80016f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fa:	4770      	bx	lr

080016fc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80016fc:	b480      	push	{r7}
 80016fe:	b085      	sub	sp, #20
 8001700:	af00      	add	r7, sp, #0
 8001702:	60f8      	str	r0, [r7, #12]
 8001704:	60b9      	str	r1, [r7, #8]
 8001706:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001708:	2300      	movs	r3, #0
}
 800170a:	4618      	mov	r0, r3
 800170c:	3714      	adds	r7, #20
 800170e:	46bd      	mov	sp, r7
 8001710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001714:	4770      	bx	lr
	...

08001718 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	b086      	sub	sp, #24
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001720:	4a14      	ldr	r2, [pc, #80]	; (8001774 <_sbrk+0x5c>)
 8001722:	4b15      	ldr	r3, [pc, #84]	; (8001778 <_sbrk+0x60>)
 8001724:	1ad3      	subs	r3, r2, r3
 8001726:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001728:	697b      	ldr	r3, [r7, #20]
 800172a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800172c:	4b13      	ldr	r3, [pc, #76]	; (800177c <_sbrk+0x64>)
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	2b00      	cmp	r3, #0
 8001732:	d102      	bne.n	800173a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001734:	4b11      	ldr	r3, [pc, #68]	; (800177c <_sbrk+0x64>)
 8001736:	4a12      	ldr	r2, [pc, #72]	; (8001780 <_sbrk+0x68>)
 8001738:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800173a:	4b10      	ldr	r3, [pc, #64]	; (800177c <_sbrk+0x64>)
 800173c:	681a      	ldr	r2, [r3, #0]
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	4413      	add	r3, r2
 8001742:	693a      	ldr	r2, [r7, #16]
 8001744:	429a      	cmp	r2, r3
 8001746:	d207      	bcs.n	8001758 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001748:	f002 fe3e 	bl	80043c8 <__errno>
 800174c:	4603      	mov	r3, r0
 800174e:	220c      	movs	r2, #12
 8001750:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001752:	f04f 33ff 	mov.w	r3, #4294967295
 8001756:	e009      	b.n	800176c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001758:	4b08      	ldr	r3, [pc, #32]	; (800177c <_sbrk+0x64>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800175e:	4b07      	ldr	r3, [pc, #28]	; (800177c <_sbrk+0x64>)
 8001760:	681a      	ldr	r2, [r3, #0]
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	4413      	add	r3, r2
 8001766:	4a05      	ldr	r2, [pc, #20]	; (800177c <_sbrk+0x64>)
 8001768:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800176a:	68fb      	ldr	r3, [r7, #12]
}
 800176c:	4618      	mov	r0, r3
 800176e:	3718      	adds	r7, #24
 8001770:	46bd      	mov	sp, r7
 8001772:	bd80      	pop	{r7, pc}
 8001774:	20018000 	.word	0x20018000
 8001778:	00000400 	.word	0x00000400
 800177c:	200002ac 	.word	0x200002ac
 8001780:	200002c8 	.word	0x200002c8

08001784 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001784:	b480      	push	{r7}
 8001786:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001788:	4b06      	ldr	r3, [pc, #24]	; (80017a4 <SystemInit+0x20>)
 800178a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800178e:	4a05      	ldr	r2, [pc, #20]	; (80017a4 <SystemInit+0x20>)
 8001790:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001794:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001798:	bf00      	nop
 800179a:	46bd      	mov	sp, r7
 800179c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a0:	4770      	bx	lr
 80017a2:	bf00      	nop
 80017a4:	e000ed00 	.word	0xe000ed00

080017a8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80017a8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80017e0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80017ac:	480d      	ldr	r0, [pc, #52]	; (80017e4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80017ae:	490e      	ldr	r1, [pc, #56]	; (80017e8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80017b0:	4a0e      	ldr	r2, [pc, #56]	; (80017ec <LoopFillZerobss+0x1e>)
  movs r3, #0
 80017b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80017b4:	e002      	b.n	80017bc <LoopCopyDataInit>

080017b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80017b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80017b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80017ba:	3304      	adds	r3, #4

080017bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80017bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80017be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80017c0:	d3f9      	bcc.n	80017b6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80017c2:	4a0b      	ldr	r2, [pc, #44]	; (80017f0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80017c4:	4c0b      	ldr	r4, [pc, #44]	; (80017f4 <LoopFillZerobss+0x26>)
  movs r3, #0
 80017c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80017c8:	e001      	b.n	80017ce <LoopFillZerobss>

080017ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80017ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80017cc:	3204      	adds	r2, #4

080017ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80017ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80017d0:	d3fb      	bcc.n	80017ca <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80017d2:	f7ff ffd7 	bl	8001784 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80017d6:	f002 fdfd 	bl	80043d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80017da:	f7ff fc2d 	bl	8001038 <main>
  bx  lr    
 80017de:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80017e0:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80017e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80017e8:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 80017ec:	08007274 	.word	0x08007274
  ldr r2, =_sbss
 80017f0:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 80017f4:	200002c4 	.word	0x200002c4

080017f8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80017f8:	e7fe      	b.n	80017f8 <ADC_IRQHandler>
	...

080017fc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001800:	4b0e      	ldr	r3, [pc, #56]	; (800183c <HAL_Init+0x40>)
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	4a0d      	ldr	r2, [pc, #52]	; (800183c <HAL_Init+0x40>)
 8001806:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800180a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800180c:	4b0b      	ldr	r3, [pc, #44]	; (800183c <HAL_Init+0x40>)
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	4a0a      	ldr	r2, [pc, #40]	; (800183c <HAL_Init+0x40>)
 8001812:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001816:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001818:	4b08      	ldr	r3, [pc, #32]	; (800183c <HAL_Init+0x40>)
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	4a07      	ldr	r2, [pc, #28]	; (800183c <HAL_Init+0x40>)
 800181e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001822:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001824:	2003      	movs	r0, #3
 8001826:	f000 f92b 	bl	8001a80 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800182a:	200f      	movs	r0, #15
 800182c:	f000 f808 	bl	8001840 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001830:	f7ff fddc 	bl	80013ec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001834:	2300      	movs	r3, #0
}
 8001836:	4618      	mov	r0, r3
 8001838:	bd80      	pop	{r7, pc}
 800183a:	bf00      	nop
 800183c:	40023c00 	.word	0x40023c00

08001840 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b082      	sub	sp, #8
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001848:	4b12      	ldr	r3, [pc, #72]	; (8001894 <HAL_InitTick+0x54>)
 800184a:	681a      	ldr	r2, [r3, #0]
 800184c:	4b12      	ldr	r3, [pc, #72]	; (8001898 <HAL_InitTick+0x58>)
 800184e:	781b      	ldrb	r3, [r3, #0]
 8001850:	4619      	mov	r1, r3
 8001852:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001856:	fbb3 f3f1 	udiv	r3, r3, r1
 800185a:	fbb2 f3f3 	udiv	r3, r2, r3
 800185e:	4618      	mov	r0, r3
 8001860:	f000 f943 	bl	8001aea <HAL_SYSTICK_Config>
 8001864:	4603      	mov	r3, r0
 8001866:	2b00      	cmp	r3, #0
 8001868:	d001      	beq.n	800186e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800186a:	2301      	movs	r3, #1
 800186c:	e00e      	b.n	800188c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	2b0f      	cmp	r3, #15
 8001872:	d80a      	bhi.n	800188a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001874:	2200      	movs	r2, #0
 8001876:	6879      	ldr	r1, [r7, #4]
 8001878:	f04f 30ff 	mov.w	r0, #4294967295
 800187c:	f000 f90b 	bl	8001a96 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001880:	4a06      	ldr	r2, [pc, #24]	; (800189c <HAL_InitTick+0x5c>)
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001886:	2300      	movs	r3, #0
 8001888:	e000      	b.n	800188c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800188a:	2301      	movs	r3, #1
}
 800188c:	4618      	mov	r0, r3
 800188e:	3708      	adds	r7, #8
 8001890:	46bd      	mov	sp, r7
 8001892:	bd80      	pop	{r7, pc}
 8001894:	20000000 	.word	0x20000000
 8001898:	20000008 	.word	0x20000008
 800189c:	20000004 	.word	0x20000004

080018a0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018a0:	b480      	push	{r7}
 80018a2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80018a4:	4b06      	ldr	r3, [pc, #24]	; (80018c0 <HAL_IncTick+0x20>)
 80018a6:	781b      	ldrb	r3, [r3, #0]
 80018a8:	461a      	mov	r2, r3
 80018aa:	4b06      	ldr	r3, [pc, #24]	; (80018c4 <HAL_IncTick+0x24>)
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	4413      	add	r3, r2
 80018b0:	4a04      	ldr	r2, [pc, #16]	; (80018c4 <HAL_IncTick+0x24>)
 80018b2:	6013      	str	r3, [r2, #0]
}
 80018b4:	bf00      	nop
 80018b6:	46bd      	mov	sp, r7
 80018b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018bc:	4770      	bx	lr
 80018be:	bf00      	nop
 80018c0:	20000008 	.word	0x20000008
 80018c4:	200002b0 	.word	0x200002b0

080018c8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018c8:	b480      	push	{r7}
 80018ca:	af00      	add	r7, sp, #0
  return uwTick;
 80018cc:	4b03      	ldr	r3, [pc, #12]	; (80018dc <HAL_GetTick+0x14>)
 80018ce:	681b      	ldr	r3, [r3, #0]
}
 80018d0:	4618      	mov	r0, r3
 80018d2:	46bd      	mov	sp, r7
 80018d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d8:	4770      	bx	lr
 80018da:	bf00      	nop
 80018dc:	200002b0 	.word	0x200002b0

080018e0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018e0:	b480      	push	{r7}
 80018e2:	b085      	sub	sp, #20
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	f003 0307 	and.w	r3, r3, #7
 80018ee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80018f0:	4b0c      	ldr	r3, [pc, #48]	; (8001924 <__NVIC_SetPriorityGrouping+0x44>)
 80018f2:	68db      	ldr	r3, [r3, #12]
 80018f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80018f6:	68ba      	ldr	r2, [r7, #8]
 80018f8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80018fc:	4013      	ands	r3, r2
 80018fe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001904:	68bb      	ldr	r3, [r7, #8]
 8001906:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001908:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800190c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001910:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001912:	4a04      	ldr	r2, [pc, #16]	; (8001924 <__NVIC_SetPriorityGrouping+0x44>)
 8001914:	68bb      	ldr	r3, [r7, #8]
 8001916:	60d3      	str	r3, [r2, #12]
}
 8001918:	bf00      	nop
 800191a:	3714      	adds	r7, #20
 800191c:	46bd      	mov	sp, r7
 800191e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001922:	4770      	bx	lr
 8001924:	e000ed00 	.word	0xe000ed00

08001928 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001928:	b480      	push	{r7}
 800192a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800192c:	4b04      	ldr	r3, [pc, #16]	; (8001940 <__NVIC_GetPriorityGrouping+0x18>)
 800192e:	68db      	ldr	r3, [r3, #12]
 8001930:	0a1b      	lsrs	r3, r3, #8
 8001932:	f003 0307 	and.w	r3, r3, #7
}
 8001936:	4618      	mov	r0, r3
 8001938:	46bd      	mov	sp, r7
 800193a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193e:	4770      	bx	lr
 8001940:	e000ed00 	.word	0xe000ed00

08001944 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001944:	b480      	push	{r7}
 8001946:	b083      	sub	sp, #12
 8001948:	af00      	add	r7, sp, #0
 800194a:	4603      	mov	r3, r0
 800194c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800194e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001952:	2b00      	cmp	r3, #0
 8001954:	db0b      	blt.n	800196e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001956:	79fb      	ldrb	r3, [r7, #7]
 8001958:	f003 021f 	and.w	r2, r3, #31
 800195c:	4907      	ldr	r1, [pc, #28]	; (800197c <__NVIC_EnableIRQ+0x38>)
 800195e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001962:	095b      	lsrs	r3, r3, #5
 8001964:	2001      	movs	r0, #1
 8001966:	fa00 f202 	lsl.w	r2, r0, r2
 800196a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800196e:	bf00      	nop
 8001970:	370c      	adds	r7, #12
 8001972:	46bd      	mov	sp, r7
 8001974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001978:	4770      	bx	lr
 800197a:	bf00      	nop
 800197c:	e000e100 	.word	0xe000e100

08001980 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001980:	b480      	push	{r7}
 8001982:	b083      	sub	sp, #12
 8001984:	af00      	add	r7, sp, #0
 8001986:	4603      	mov	r3, r0
 8001988:	6039      	str	r1, [r7, #0]
 800198a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800198c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001990:	2b00      	cmp	r3, #0
 8001992:	db0a      	blt.n	80019aa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001994:	683b      	ldr	r3, [r7, #0]
 8001996:	b2da      	uxtb	r2, r3
 8001998:	490c      	ldr	r1, [pc, #48]	; (80019cc <__NVIC_SetPriority+0x4c>)
 800199a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800199e:	0112      	lsls	r2, r2, #4
 80019a0:	b2d2      	uxtb	r2, r2
 80019a2:	440b      	add	r3, r1
 80019a4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80019a8:	e00a      	b.n	80019c0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019aa:	683b      	ldr	r3, [r7, #0]
 80019ac:	b2da      	uxtb	r2, r3
 80019ae:	4908      	ldr	r1, [pc, #32]	; (80019d0 <__NVIC_SetPriority+0x50>)
 80019b0:	79fb      	ldrb	r3, [r7, #7]
 80019b2:	f003 030f 	and.w	r3, r3, #15
 80019b6:	3b04      	subs	r3, #4
 80019b8:	0112      	lsls	r2, r2, #4
 80019ba:	b2d2      	uxtb	r2, r2
 80019bc:	440b      	add	r3, r1
 80019be:	761a      	strb	r2, [r3, #24]
}
 80019c0:	bf00      	nop
 80019c2:	370c      	adds	r7, #12
 80019c4:	46bd      	mov	sp, r7
 80019c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ca:	4770      	bx	lr
 80019cc:	e000e100 	.word	0xe000e100
 80019d0:	e000ed00 	.word	0xe000ed00

080019d4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019d4:	b480      	push	{r7}
 80019d6:	b089      	sub	sp, #36	; 0x24
 80019d8:	af00      	add	r7, sp, #0
 80019da:	60f8      	str	r0, [r7, #12]
 80019dc:	60b9      	str	r1, [r7, #8]
 80019de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	f003 0307 	and.w	r3, r3, #7
 80019e6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80019e8:	69fb      	ldr	r3, [r7, #28]
 80019ea:	f1c3 0307 	rsb	r3, r3, #7
 80019ee:	2b04      	cmp	r3, #4
 80019f0:	bf28      	it	cs
 80019f2:	2304      	movcs	r3, #4
 80019f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80019f6:	69fb      	ldr	r3, [r7, #28]
 80019f8:	3304      	adds	r3, #4
 80019fa:	2b06      	cmp	r3, #6
 80019fc:	d902      	bls.n	8001a04 <NVIC_EncodePriority+0x30>
 80019fe:	69fb      	ldr	r3, [r7, #28]
 8001a00:	3b03      	subs	r3, #3
 8001a02:	e000      	b.n	8001a06 <NVIC_EncodePriority+0x32>
 8001a04:	2300      	movs	r3, #0
 8001a06:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a08:	f04f 32ff 	mov.w	r2, #4294967295
 8001a0c:	69bb      	ldr	r3, [r7, #24]
 8001a0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a12:	43da      	mvns	r2, r3
 8001a14:	68bb      	ldr	r3, [r7, #8]
 8001a16:	401a      	ands	r2, r3
 8001a18:	697b      	ldr	r3, [r7, #20]
 8001a1a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a1c:	f04f 31ff 	mov.w	r1, #4294967295
 8001a20:	697b      	ldr	r3, [r7, #20]
 8001a22:	fa01 f303 	lsl.w	r3, r1, r3
 8001a26:	43d9      	mvns	r1, r3
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a2c:	4313      	orrs	r3, r2
         );
}
 8001a2e:	4618      	mov	r0, r3
 8001a30:	3724      	adds	r7, #36	; 0x24
 8001a32:	46bd      	mov	sp, r7
 8001a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a38:	4770      	bx	lr
	...

08001a3c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b082      	sub	sp, #8
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	3b01      	subs	r3, #1
 8001a48:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001a4c:	d301      	bcc.n	8001a52 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a4e:	2301      	movs	r3, #1
 8001a50:	e00f      	b.n	8001a72 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a52:	4a0a      	ldr	r2, [pc, #40]	; (8001a7c <SysTick_Config+0x40>)
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	3b01      	subs	r3, #1
 8001a58:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a5a:	210f      	movs	r1, #15
 8001a5c:	f04f 30ff 	mov.w	r0, #4294967295
 8001a60:	f7ff ff8e 	bl	8001980 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a64:	4b05      	ldr	r3, [pc, #20]	; (8001a7c <SysTick_Config+0x40>)
 8001a66:	2200      	movs	r2, #0
 8001a68:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a6a:	4b04      	ldr	r3, [pc, #16]	; (8001a7c <SysTick_Config+0x40>)
 8001a6c:	2207      	movs	r2, #7
 8001a6e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a70:	2300      	movs	r3, #0
}
 8001a72:	4618      	mov	r0, r3
 8001a74:	3708      	adds	r7, #8
 8001a76:	46bd      	mov	sp, r7
 8001a78:	bd80      	pop	{r7, pc}
 8001a7a:	bf00      	nop
 8001a7c:	e000e010 	.word	0xe000e010

08001a80 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b082      	sub	sp, #8
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a88:	6878      	ldr	r0, [r7, #4]
 8001a8a:	f7ff ff29 	bl	80018e0 <__NVIC_SetPriorityGrouping>
}
 8001a8e:	bf00      	nop
 8001a90:	3708      	adds	r7, #8
 8001a92:	46bd      	mov	sp, r7
 8001a94:	bd80      	pop	{r7, pc}

08001a96 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a96:	b580      	push	{r7, lr}
 8001a98:	b086      	sub	sp, #24
 8001a9a:	af00      	add	r7, sp, #0
 8001a9c:	4603      	mov	r3, r0
 8001a9e:	60b9      	str	r1, [r7, #8]
 8001aa0:	607a      	str	r2, [r7, #4]
 8001aa2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001aa8:	f7ff ff3e 	bl	8001928 <__NVIC_GetPriorityGrouping>
 8001aac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001aae:	687a      	ldr	r2, [r7, #4]
 8001ab0:	68b9      	ldr	r1, [r7, #8]
 8001ab2:	6978      	ldr	r0, [r7, #20]
 8001ab4:	f7ff ff8e 	bl	80019d4 <NVIC_EncodePriority>
 8001ab8:	4602      	mov	r2, r0
 8001aba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001abe:	4611      	mov	r1, r2
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	f7ff ff5d 	bl	8001980 <__NVIC_SetPriority>
}
 8001ac6:	bf00      	nop
 8001ac8:	3718      	adds	r7, #24
 8001aca:	46bd      	mov	sp, r7
 8001acc:	bd80      	pop	{r7, pc}

08001ace <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ace:	b580      	push	{r7, lr}
 8001ad0:	b082      	sub	sp, #8
 8001ad2:	af00      	add	r7, sp, #0
 8001ad4:	4603      	mov	r3, r0
 8001ad6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ad8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001adc:	4618      	mov	r0, r3
 8001ade:	f7ff ff31 	bl	8001944 <__NVIC_EnableIRQ>
}
 8001ae2:	bf00      	nop
 8001ae4:	3708      	adds	r7, #8
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	bd80      	pop	{r7, pc}

08001aea <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001aea:	b580      	push	{r7, lr}
 8001aec:	b082      	sub	sp, #8
 8001aee:	af00      	add	r7, sp, #0
 8001af0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001af2:	6878      	ldr	r0, [r7, #4]
 8001af4:	f7ff ffa2 	bl	8001a3c <SysTick_Config>
 8001af8:	4603      	mov	r3, r0
}
 8001afa:	4618      	mov	r0, r3
 8001afc:	3708      	adds	r7, #8
 8001afe:	46bd      	mov	sp, r7
 8001b00:	bd80      	pop	{r7, pc}

08001b02 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001b02:	b580      	push	{r7, lr}
 8001b04:	b084      	sub	sp, #16
 8001b06:	af00      	add	r7, sp, #0
 8001b08:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b0e:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001b10:	f7ff feda 	bl	80018c8 <HAL_GetTick>
 8001b14:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001b1c:	b2db      	uxtb	r3, r3
 8001b1e:	2b02      	cmp	r3, #2
 8001b20:	d008      	beq.n	8001b34 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	2280      	movs	r2, #128	; 0x80
 8001b26:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001b30:	2301      	movs	r3, #1
 8001b32:	e052      	b.n	8001bda <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	681a      	ldr	r2, [r3, #0]
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f022 0216 	bic.w	r2, r2, #22
 8001b42:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	695a      	ldr	r2, [r3, #20]
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001b52:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d103      	bne.n	8001b64 <HAL_DMA_Abort+0x62>
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d007      	beq.n	8001b74 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	681a      	ldr	r2, [r3, #0]
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f022 0208 	bic.w	r2, r2, #8
 8001b72:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	681a      	ldr	r2, [r3, #0]
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f022 0201 	bic.w	r2, r2, #1
 8001b82:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001b84:	e013      	b.n	8001bae <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001b86:	f7ff fe9f 	bl	80018c8 <HAL_GetTick>
 8001b8a:	4602      	mov	r2, r0
 8001b8c:	68bb      	ldr	r3, [r7, #8]
 8001b8e:	1ad3      	subs	r3, r2, r3
 8001b90:	2b05      	cmp	r3, #5
 8001b92:	d90c      	bls.n	8001bae <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	2220      	movs	r2, #32
 8001b98:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	2203      	movs	r2, #3
 8001b9e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001baa:	2303      	movs	r3, #3
 8001bac:	e015      	b.n	8001bda <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f003 0301 	and.w	r3, r3, #1
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d1e4      	bne.n	8001b86 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bc0:	223f      	movs	r2, #63	; 0x3f
 8001bc2:	409a      	lsls	r2, r3
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	2201      	movs	r2, #1
 8001bcc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001bd8:	2300      	movs	r3, #0
}
 8001bda:	4618      	mov	r0, r3
 8001bdc:	3710      	adds	r7, #16
 8001bde:	46bd      	mov	sp, r7
 8001be0:	bd80      	pop	{r7, pc}

08001be2 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001be2:	b480      	push	{r7}
 8001be4:	b083      	sub	sp, #12
 8001be6:	af00      	add	r7, sp, #0
 8001be8:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001bf0:	b2db      	uxtb	r3, r3
 8001bf2:	2b02      	cmp	r3, #2
 8001bf4:	d004      	beq.n	8001c00 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	2280      	movs	r2, #128	; 0x80
 8001bfa:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001bfc:	2301      	movs	r3, #1
 8001bfe:	e00c      	b.n	8001c1a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	2205      	movs	r2, #5
 8001c04:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	681a      	ldr	r2, [r3, #0]
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f022 0201 	bic.w	r2, r2, #1
 8001c16:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001c18:	2300      	movs	r3, #0
}
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	370c      	adds	r7, #12
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c24:	4770      	bx	lr
	...

08001c28 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c28:	b480      	push	{r7}
 8001c2a:	b089      	sub	sp, #36	; 0x24
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
 8001c30:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001c32:	2300      	movs	r3, #0
 8001c34:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001c36:	2300      	movs	r3, #0
 8001c38:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c3e:	2300      	movs	r3, #0
 8001c40:	61fb      	str	r3, [r7, #28]
 8001c42:	e159      	b.n	8001ef8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001c44:	2201      	movs	r2, #1
 8001c46:	69fb      	ldr	r3, [r7, #28]
 8001c48:	fa02 f303 	lsl.w	r3, r2, r3
 8001c4c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001c4e:	683b      	ldr	r3, [r7, #0]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	697a      	ldr	r2, [r7, #20]
 8001c54:	4013      	ands	r3, r2
 8001c56:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001c58:	693a      	ldr	r2, [r7, #16]
 8001c5a:	697b      	ldr	r3, [r7, #20]
 8001c5c:	429a      	cmp	r2, r3
 8001c5e:	f040 8148 	bne.w	8001ef2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001c62:	683b      	ldr	r3, [r7, #0]
 8001c64:	685b      	ldr	r3, [r3, #4]
 8001c66:	f003 0303 	and.w	r3, r3, #3
 8001c6a:	2b01      	cmp	r3, #1
 8001c6c:	d005      	beq.n	8001c7a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c6e:	683b      	ldr	r3, [r7, #0]
 8001c70:	685b      	ldr	r3, [r3, #4]
 8001c72:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001c76:	2b02      	cmp	r3, #2
 8001c78:	d130      	bne.n	8001cdc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	689b      	ldr	r3, [r3, #8]
 8001c7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001c80:	69fb      	ldr	r3, [r7, #28]
 8001c82:	005b      	lsls	r3, r3, #1
 8001c84:	2203      	movs	r2, #3
 8001c86:	fa02 f303 	lsl.w	r3, r2, r3
 8001c8a:	43db      	mvns	r3, r3
 8001c8c:	69ba      	ldr	r2, [r7, #24]
 8001c8e:	4013      	ands	r3, r2
 8001c90:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001c92:	683b      	ldr	r3, [r7, #0]
 8001c94:	68da      	ldr	r2, [r3, #12]
 8001c96:	69fb      	ldr	r3, [r7, #28]
 8001c98:	005b      	lsls	r3, r3, #1
 8001c9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c9e:	69ba      	ldr	r2, [r7, #24]
 8001ca0:	4313      	orrs	r3, r2
 8001ca2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	69ba      	ldr	r2, [r7, #24]
 8001ca8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	685b      	ldr	r3, [r3, #4]
 8001cae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001cb0:	2201      	movs	r2, #1
 8001cb2:	69fb      	ldr	r3, [r7, #28]
 8001cb4:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb8:	43db      	mvns	r3, r3
 8001cba:	69ba      	ldr	r2, [r7, #24]
 8001cbc:	4013      	ands	r3, r2
 8001cbe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001cc0:	683b      	ldr	r3, [r7, #0]
 8001cc2:	685b      	ldr	r3, [r3, #4]
 8001cc4:	091b      	lsrs	r3, r3, #4
 8001cc6:	f003 0201 	and.w	r2, r3, #1
 8001cca:	69fb      	ldr	r3, [r7, #28]
 8001ccc:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd0:	69ba      	ldr	r2, [r7, #24]
 8001cd2:	4313      	orrs	r3, r2
 8001cd4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	69ba      	ldr	r2, [r7, #24]
 8001cda:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001cdc:	683b      	ldr	r3, [r7, #0]
 8001cde:	685b      	ldr	r3, [r3, #4]
 8001ce0:	f003 0303 	and.w	r3, r3, #3
 8001ce4:	2b03      	cmp	r3, #3
 8001ce6:	d017      	beq.n	8001d18 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	68db      	ldr	r3, [r3, #12]
 8001cec:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001cee:	69fb      	ldr	r3, [r7, #28]
 8001cf0:	005b      	lsls	r3, r3, #1
 8001cf2:	2203      	movs	r2, #3
 8001cf4:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf8:	43db      	mvns	r3, r3
 8001cfa:	69ba      	ldr	r2, [r7, #24]
 8001cfc:	4013      	ands	r3, r2
 8001cfe:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001d00:	683b      	ldr	r3, [r7, #0]
 8001d02:	689a      	ldr	r2, [r3, #8]
 8001d04:	69fb      	ldr	r3, [r7, #28]
 8001d06:	005b      	lsls	r3, r3, #1
 8001d08:	fa02 f303 	lsl.w	r3, r2, r3
 8001d0c:	69ba      	ldr	r2, [r7, #24]
 8001d0e:	4313      	orrs	r3, r2
 8001d10:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	69ba      	ldr	r2, [r7, #24]
 8001d16:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d18:	683b      	ldr	r3, [r7, #0]
 8001d1a:	685b      	ldr	r3, [r3, #4]
 8001d1c:	f003 0303 	and.w	r3, r3, #3
 8001d20:	2b02      	cmp	r3, #2
 8001d22:	d123      	bne.n	8001d6c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001d24:	69fb      	ldr	r3, [r7, #28]
 8001d26:	08da      	lsrs	r2, r3, #3
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	3208      	adds	r2, #8
 8001d2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d30:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001d32:	69fb      	ldr	r3, [r7, #28]
 8001d34:	f003 0307 	and.w	r3, r3, #7
 8001d38:	009b      	lsls	r3, r3, #2
 8001d3a:	220f      	movs	r2, #15
 8001d3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d40:	43db      	mvns	r3, r3
 8001d42:	69ba      	ldr	r2, [r7, #24]
 8001d44:	4013      	ands	r3, r2
 8001d46:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001d48:	683b      	ldr	r3, [r7, #0]
 8001d4a:	691a      	ldr	r2, [r3, #16]
 8001d4c:	69fb      	ldr	r3, [r7, #28]
 8001d4e:	f003 0307 	and.w	r3, r3, #7
 8001d52:	009b      	lsls	r3, r3, #2
 8001d54:	fa02 f303 	lsl.w	r3, r2, r3
 8001d58:	69ba      	ldr	r2, [r7, #24]
 8001d5a:	4313      	orrs	r3, r2
 8001d5c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001d5e:	69fb      	ldr	r3, [r7, #28]
 8001d60:	08da      	lsrs	r2, r3, #3
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	3208      	adds	r2, #8
 8001d66:	69b9      	ldr	r1, [r7, #24]
 8001d68:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001d72:	69fb      	ldr	r3, [r7, #28]
 8001d74:	005b      	lsls	r3, r3, #1
 8001d76:	2203      	movs	r2, #3
 8001d78:	fa02 f303 	lsl.w	r3, r2, r3
 8001d7c:	43db      	mvns	r3, r3
 8001d7e:	69ba      	ldr	r2, [r7, #24]
 8001d80:	4013      	ands	r3, r2
 8001d82:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001d84:	683b      	ldr	r3, [r7, #0]
 8001d86:	685b      	ldr	r3, [r3, #4]
 8001d88:	f003 0203 	and.w	r2, r3, #3
 8001d8c:	69fb      	ldr	r3, [r7, #28]
 8001d8e:	005b      	lsls	r3, r3, #1
 8001d90:	fa02 f303 	lsl.w	r3, r2, r3
 8001d94:	69ba      	ldr	r2, [r7, #24]
 8001d96:	4313      	orrs	r3, r2
 8001d98:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	69ba      	ldr	r2, [r7, #24]
 8001d9e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001da0:	683b      	ldr	r3, [r7, #0]
 8001da2:	685b      	ldr	r3, [r3, #4]
 8001da4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	f000 80a2 	beq.w	8001ef2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001dae:	2300      	movs	r3, #0
 8001db0:	60fb      	str	r3, [r7, #12]
 8001db2:	4b57      	ldr	r3, [pc, #348]	; (8001f10 <HAL_GPIO_Init+0x2e8>)
 8001db4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001db6:	4a56      	ldr	r2, [pc, #344]	; (8001f10 <HAL_GPIO_Init+0x2e8>)
 8001db8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001dbc:	6453      	str	r3, [r2, #68]	; 0x44
 8001dbe:	4b54      	ldr	r3, [pc, #336]	; (8001f10 <HAL_GPIO_Init+0x2e8>)
 8001dc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dc2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001dc6:	60fb      	str	r3, [r7, #12]
 8001dc8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001dca:	4a52      	ldr	r2, [pc, #328]	; (8001f14 <HAL_GPIO_Init+0x2ec>)
 8001dcc:	69fb      	ldr	r3, [r7, #28]
 8001dce:	089b      	lsrs	r3, r3, #2
 8001dd0:	3302      	adds	r3, #2
 8001dd2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001dd6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001dd8:	69fb      	ldr	r3, [r7, #28]
 8001dda:	f003 0303 	and.w	r3, r3, #3
 8001dde:	009b      	lsls	r3, r3, #2
 8001de0:	220f      	movs	r2, #15
 8001de2:	fa02 f303 	lsl.w	r3, r2, r3
 8001de6:	43db      	mvns	r3, r3
 8001de8:	69ba      	ldr	r2, [r7, #24]
 8001dea:	4013      	ands	r3, r2
 8001dec:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	4a49      	ldr	r2, [pc, #292]	; (8001f18 <HAL_GPIO_Init+0x2f0>)
 8001df2:	4293      	cmp	r3, r2
 8001df4:	d019      	beq.n	8001e2a <HAL_GPIO_Init+0x202>
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	4a48      	ldr	r2, [pc, #288]	; (8001f1c <HAL_GPIO_Init+0x2f4>)
 8001dfa:	4293      	cmp	r3, r2
 8001dfc:	d013      	beq.n	8001e26 <HAL_GPIO_Init+0x1fe>
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	4a47      	ldr	r2, [pc, #284]	; (8001f20 <HAL_GPIO_Init+0x2f8>)
 8001e02:	4293      	cmp	r3, r2
 8001e04:	d00d      	beq.n	8001e22 <HAL_GPIO_Init+0x1fa>
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	4a46      	ldr	r2, [pc, #280]	; (8001f24 <HAL_GPIO_Init+0x2fc>)
 8001e0a:	4293      	cmp	r3, r2
 8001e0c:	d007      	beq.n	8001e1e <HAL_GPIO_Init+0x1f6>
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	4a45      	ldr	r2, [pc, #276]	; (8001f28 <HAL_GPIO_Init+0x300>)
 8001e12:	4293      	cmp	r3, r2
 8001e14:	d101      	bne.n	8001e1a <HAL_GPIO_Init+0x1f2>
 8001e16:	2304      	movs	r3, #4
 8001e18:	e008      	b.n	8001e2c <HAL_GPIO_Init+0x204>
 8001e1a:	2307      	movs	r3, #7
 8001e1c:	e006      	b.n	8001e2c <HAL_GPIO_Init+0x204>
 8001e1e:	2303      	movs	r3, #3
 8001e20:	e004      	b.n	8001e2c <HAL_GPIO_Init+0x204>
 8001e22:	2302      	movs	r3, #2
 8001e24:	e002      	b.n	8001e2c <HAL_GPIO_Init+0x204>
 8001e26:	2301      	movs	r3, #1
 8001e28:	e000      	b.n	8001e2c <HAL_GPIO_Init+0x204>
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	69fa      	ldr	r2, [r7, #28]
 8001e2e:	f002 0203 	and.w	r2, r2, #3
 8001e32:	0092      	lsls	r2, r2, #2
 8001e34:	4093      	lsls	r3, r2
 8001e36:	69ba      	ldr	r2, [r7, #24]
 8001e38:	4313      	orrs	r3, r2
 8001e3a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001e3c:	4935      	ldr	r1, [pc, #212]	; (8001f14 <HAL_GPIO_Init+0x2ec>)
 8001e3e:	69fb      	ldr	r3, [r7, #28]
 8001e40:	089b      	lsrs	r3, r3, #2
 8001e42:	3302      	adds	r3, #2
 8001e44:	69ba      	ldr	r2, [r7, #24]
 8001e46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001e4a:	4b38      	ldr	r3, [pc, #224]	; (8001f2c <HAL_GPIO_Init+0x304>)
 8001e4c:	689b      	ldr	r3, [r3, #8]
 8001e4e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e50:	693b      	ldr	r3, [r7, #16]
 8001e52:	43db      	mvns	r3, r3
 8001e54:	69ba      	ldr	r2, [r7, #24]
 8001e56:	4013      	ands	r3, r2
 8001e58:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001e5a:	683b      	ldr	r3, [r7, #0]
 8001e5c:	685b      	ldr	r3, [r3, #4]
 8001e5e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d003      	beq.n	8001e6e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001e66:	69ba      	ldr	r2, [r7, #24]
 8001e68:	693b      	ldr	r3, [r7, #16]
 8001e6a:	4313      	orrs	r3, r2
 8001e6c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001e6e:	4a2f      	ldr	r2, [pc, #188]	; (8001f2c <HAL_GPIO_Init+0x304>)
 8001e70:	69bb      	ldr	r3, [r7, #24]
 8001e72:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001e74:	4b2d      	ldr	r3, [pc, #180]	; (8001f2c <HAL_GPIO_Init+0x304>)
 8001e76:	68db      	ldr	r3, [r3, #12]
 8001e78:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e7a:	693b      	ldr	r3, [r7, #16]
 8001e7c:	43db      	mvns	r3, r3
 8001e7e:	69ba      	ldr	r2, [r7, #24]
 8001e80:	4013      	ands	r3, r2
 8001e82:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001e84:	683b      	ldr	r3, [r7, #0]
 8001e86:	685b      	ldr	r3, [r3, #4]
 8001e88:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d003      	beq.n	8001e98 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001e90:	69ba      	ldr	r2, [r7, #24]
 8001e92:	693b      	ldr	r3, [r7, #16]
 8001e94:	4313      	orrs	r3, r2
 8001e96:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001e98:	4a24      	ldr	r2, [pc, #144]	; (8001f2c <HAL_GPIO_Init+0x304>)
 8001e9a:	69bb      	ldr	r3, [r7, #24]
 8001e9c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001e9e:	4b23      	ldr	r3, [pc, #140]	; (8001f2c <HAL_GPIO_Init+0x304>)
 8001ea0:	685b      	ldr	r3, [r3, #4]
 8001ea2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ea4:	693b      	ldr	r3, [r7, #16]
 8001ea6:	43db      	mvns	r3, r3
 8001ea8:	69ba      	ldr	r2, [r7, #24]
 8001eaa:	4013      	ands	r3, r2
 8001eac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001eae:	683b      	ldr	r3, [r7, #0]
 8001eb0:	685b      	ldr	r3, [r3, #4]
 8001eb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d003      	beq.n	8001ec2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001eba:	69ba      	ldr	r2, [r7, #24]
 8001ebc:	693b      	ldr	r3, [r7, #16]
 8001ebe:	4313      	orrs	r3, r2
 8001ec0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001ec2:	4a1a      	ldr	r2, [pc, #104]	; (8001f2c <HAL_GPIO_Init+0x304>)
 8001ec4:	69bb      	ldr	r3, [r7, #24]
 8001ec6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001ec8:	4b18      	ldr	r3, [pc, #96]	; (8001f2c <HAL_GPIO_Init+0x304>)
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ece:	693b      	ldr	r3, [r7, #16]
 8001ed0:	43db      	mvns	r3, r3
 8001ed2:	69ba      	ldr	r2, [r7, #24]
 8001ed4:	4013      	ands	r3, r2
 8001ed6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001ed8:	683b      	ldr	r3, [r7, #0]
 8001eda:	685b      	ldr	r3, [r3, #4]
 8001edc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d003      	beq.n	8001eec <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001ee4:	69ba      	ldr	r2, [r7, #24]
 8001ee6:	693b      	ldr	r3, [r7, #16]
 8001ee8:	4313      	orrs	r3, r2
 8001eea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001eec:	4a0f      	ldr	r2, [pc, #60]	; (8001f2c <HAL_GPIO_Init+0x304>)
 8001eee:	69bb      	ldr	r3, [r7, #24]
 8001ef0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001ef2:	69fb      	ldr	r3, [r7, #28]
 8001ef4:	3301      	adds	r3, #1
 8001ef6:	61fb      	str	r3, [r7, #28]
 8001ef8:	69fb      	ldr	r3, [r7, #28]
 8001efa:	2b0f      	cmp	r3, #15
 8001efc:	f67f aea2 	bls.w	8001c44 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001f00:	bf00      	nop
 8001f02:	bf00      	nop
 8001f04:	3724      	adds	r7, #36	; 0x24
 8001f06:	46bd      	mov	sp, r7
 8001f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0c:	4770      	bx	lr
 8001f0e:	bf00      	nop
 8001f10:	40023800 	.word	0x40023800
 8001f14:	40013800 	.word	0x40013800
 8001f18:	40020000 	.word	0x40020000
 8001f1c:	40020400 	.word	0x40020400
 8001f20:	40020800 	.word	0x40020800
 8001f24:	40020c00 	.word	0x40020c00
 8001f28:	40021000 	.word	0x40021000
 8001f2c:	40013c00 	.word	0x40013c00

08001f30 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f30:	b480      	push	{r7}
 8001f32:	b083      	sub	sp, #12
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
 8001f38:	460b      	mov	r3, r1
 8001f3a:	807b      	strh	r3, [r7, #2]
 8001f3c:	4613      	mov	r3, r2
 8001f3e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001f40:	787b      	ldrb	r3, [r7, #1]
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d003      	beq.n	8001f4e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001f46:	887a      	ldrh	r2, [r7, #2]
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001f4c:	e003      	b.n	8001f56 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001f4e:	887b      	ldrh	r3, [r7, #2]
 8001f50:	041a      	lsls	r2, r3, #16
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	619a      	str	r2, [r3, #24]
}
 8001f56:	bf00      	nop
 8001f58:	370c      	adds	r7, #12
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f60:	4770      	bx	lr
	...

08001f64 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	b086      	sub	sp, #24
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d101      	bne.n	8001f76 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001f72:	2301      	movs	r3, #1
 8001f74:	e267      	b.n	8002446 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f003 0301 	and.w	r3, r3, #1
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d075      	beq.n	800206e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001f82:	4b88      	ldr	r3, [pc, #544]	; (80021a4 <HAL_RCC_OscConfig+0x240>)
 8001f84:	689b      	ldr	r3, [r3, #8]
 8001f86:	f003 030c 	and.w	r3, r3, #12
 8001f8a:	2b04      	cmp	r3, #4
 8001f8c:	d00c      	beq.n	8001fa8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001f8e:	4b85      	ldr	r3, [pc, #532]	; (80021a4 <HAL_RCC_OscConfig+0x240>)
 8001f90:	689b      	ldr	r3, [r3, #8]
 8001f92:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001f96:	2b08      	cmp	r3, #8
 8001f98:	d112      	bne.n	8001fc0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001f9a:	4b82      	ldr	r3, [pc, #520]	; (80021a4 <HAL_RCC_OscConfig+0x240>)
 8001f9c:	685b      	ldr	r3, [r3, #4]
 8001f9e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001fa2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001fa6:	d10b      	bne.n	8001fc0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fa8:	4b7e      	ldr	r3, [pc, #504]	; (80021a4 <HAL_RCC_OscConfig+0x240>)
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d05b      	beq.n	800206c <HAL_RCC_OscConfig+0x108>
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	685b      	ldr	r3, [r3, #4]
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d157      	bne.n	800206c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001fbc:	2301      	movs	r3, #1
 8001fbe:	e242      	b.n	8002446 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	685b      	ldr	r3, [r3, #4]
 8001fc4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001fc8:	d106      	bne.n	8001fd8 <HAL_RCC_OscConfig+0x74>
 8001fca:	4b76      	ldr	r3, [pc, #472]	; (80021a4 <HAL_RCC_OscConfig+0x240>)
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	4a75      	ldr	r2, [pc, #468]	; (80021a4 <HAL_RCC_OscConfig+0x240>)
 8001fd0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001fd4:	6013      	str	r3, [r2, #0]
 8001fd6:	e01d      	b.n	8002014 <HAL_RCC_OscConfig+0xb0>
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	685b      	ldr	r3, [r3, #4]
 8001fdc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001fe0:	d10c      	bne.n	8001ffc <HAL_RCC_OscConfig+0x98>
 8001fe2:	4b70      	ldr	r3, [pc, #448]	; (80021a4 <HAL_RCC_OscConfig+0x240>)
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	4a6f      	ldr	r2, [pc, #444]	; (80021a4 <HAL_RCC_OscConfig+0x240>)
 8001fe8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001fec:	6013      	str	r3, [r2, #0]
 8001fee:	4b6d      	ldr	r3, [pc, #436]	; (80021a4 <HAL_RCC_OscConfig+0x240>)
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	4a6c      	ldr	r2, [pc, #432]	; (80021a4 <HAL_RCC_OscConfig+0x240>)
 8001ff4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ff8:	6013      	str	r3, [r2, #0]
 8001ffa:	e00b      	b.n	8002014 <HAL_RCC_OscConfig+0xb0>
 8001ffc:	4b69      	ldr	r3, [pc, #420]	; (80021a4 <HAL_RCC_OscConfig+0x240>)
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	4a68      	ldr	r2, [pc, #416]	; (80021a4 <HAL_RCC_OscConfig+0x240>)
 8002002:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002006:	6013      	str	r3, [r2, #0]
 8002008:	4b66      	ldr	r3, [pc, #408]	; (80021a4 <HAL_RCC_OscConfig+0x240>)
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	4a65      	ldr	r2, [pc, #404]	; (80021a4 <HAL_RCC_OscConfig+0x240>)
 800200e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002012:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	685b      	ldr	r3, [r3, #4]
 8002018:	2b00      	cmp	r3, #0
 800201a:	d013      	beq.n	8002044 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800201c:	f7ff fc54 	bl	80018c8 <HAL_GetTick>
 8002020:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002022:	e008      	b.n	8002036 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002024:	f7ff fc50 	bl	80018c8 <HAL_GetTick>
 8002028:	4602      	mov	r2, r0
 800202a:	693b      	ldr	r3, [r7, #16]
 800202c:	1ad3      	subs	r3, r2, r3
 800202e:	2b64      	cmp	r3, #100	; 0x64
 8002030:	d901      	bls.n	8002036 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002032:	2303      	movs	r3, #3
 8002034:	e207      	b.n	8002446 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002036:	4b5b      	ldr	r3, [pc, #364]	; (80021a4 <HAL_RCC_OscConfig+0x240>)
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800203e:	2b00      	cmp	r3, #0
 8002040:	d0f0      	beq.n	8002024 <HAL_RCC_OscConfig+0xc0>
 8002042:	e014      	b.n	800206e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002044:	f7ff fc40 	bl	80018c8 <HAL_GetTick>
 8002048:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800204a:	e008      	b.n	800205e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800204c:	f7ff fc3c 	bl	80018c8 <HAL_GetTick>
 8002050:	4602      	mov	r2, r0
 8002052:	693b      	ldr	r3, [r7, #16]
 8002054:	1ad3      	subs	r3, r2, r3
 8002056:	2b64      	cmp	r3, #100	; 0x64
 8002058:	d901      	bls.n	800205e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800205a:	2303      	movs	r3, #3
 800205c:	e1f3      	b.n	8002446 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800205e:	4b51      	ldr	r3, [pc, #324]	; (80021a4 <HAL_RCC_OscConfig+0x240>)
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002066:	2b00      	cmp	r3, #0
 8002068:	d1f0      	bne.n	800204c <HAL_RCC_OscConfig+0xe8>
 800206a:	e000      	b.n	800206e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800206c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f003 0302 	and.w	r3, r3, #2
 8002076:	2b00      	cmp	r3, #0
 8002078:	d063      	beq.n	8002142 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800207a:	4b4a      	ldr	r3, [pc, #296]	; (80021a4 <HAL_RCC_OscConfig+0x240>)
 800207c:	689b      	ldr	r3, [r3, #8]
 800207e:	f003 030c 	and.w	r3, r3, #12
 8002082:	2b00      	cmp	r3, #0
 8002084:	d00b      	beq.n	800209e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002086:	4b47      	ldr	r3, [pc, #284]	; (80021a4 <HAL_RCC_OscConfig+0x240>)
 8002088:	689b      	ldr	r3, [r3, #8]
 800208a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800208e:	2b08      	cmp	r3, #8
 8002090:	d11c      	bne.n	80020cc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002092:	4b44      	ldr	r3, [pc, #272]	; (80021a4 <HAL_RCC_OscConfig+0x240>)
 8002094:	685b      	ldr	r3, [r3, #4]
 8002096:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800209a:	2b00      	cmp	r3, #0
 800209c:	d116      	bne.n	80020cc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800209e:	4b41      	ldr	r3, [pc, #260]	; (80021a4 <HAL_RCC_OscConfig+0x240>)
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f003 0302 	and.w	r3, r3, #2
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d005      	beq.n	80020b6 <HAL_RCC_OscConfig+0x152>
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	68db      	ldr	r3, [r3, #12]
 80020ae:	2b01      	cmp	r3, #1
 80020b0:	d001      	beq.n	80020b6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80020b2:	2301      	movs	r3, #1
 80020b4:	e1c7      	b.n	8002446 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020b6:	4b3b      	ldr	r3, [pc, #236]	; (80021a4 <HAL_RCC_OscConfig+0x240>)
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	691b      	ldr	r3, [r3, #16]
 80020c2:	00db      	lsls	r3, r3, #3
 80020c4:	4937      	ldr	r1, [pc, #220]	; (80021a4 <HAL_RCC_OscConfig+0x240>)
 80020c6:	4313      	orrs	r3, r2
 80020c8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80020ca:	e03a      	b.n	8002142 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	68db      	ldr	r3, [r3, #12]
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d020      	beq.n	8002116 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80020d4:	4b34      	ldr	r3, [pc, #208]	; (80021a8 <HAL_RCC_OscConfig+0x244>)
 80020d6:	2201      	movs	r2, #1
 80020d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020da:	f7ff fbf5 	bl	80018c8 <HAL_GetTick>
 80020de:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020e0:	e008      	b.n	80020f4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80020e2:	f7ff fbf1 	bl	80018c8 <HAL_GetTick>
 80020e6:	4602      	mov	r2, r0
 80020e8:	693b      	ldr	r3, [r7, #16]
 80020ea:	1ad3      	subs	r3, r2, r3
 80020ec:	2b02      	cmp	r3, #2
 80020ee:	d901      	bls.n	80020f4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80020f0:	2303      	movs	r3, #3
 80020f2:	e1a8      	b.n	8002446 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020f4:	4b2b      	ldr	r3, [pc, #172]	; (80021a4 <HAL_RCC_OscConfig+0x240>)
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f003 0302 	and.w	r3, r3, #2
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d0f0      	beq.n	80020e2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002100:	4b28      	ldr	r3, [pc, #160]	; (80021a4 <HAL_RCC_OscConfig+0x240>)
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	691b      	ldr	r3, [r3, #16]
 800210c:	00db      	lsls	r3, r3, #3
 800210e:	4925      	ldr	r1, [pc, #148]	; (80021a4 <HAL_RCC_OscConfig+0x240>)
 8002110:	4313      	orrs	r3, r2
 8002112:	600b      	str	r3, [r1, #0]
 8002114:	e015      	b.n	8002142 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002116:	4b24      	ldr	r3, [pc, #144]	; (80021a8 <HAL_RCC_OscConfig+0x244>)
 8002118:	2200      	movs	r2, #0
 800211a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800211c:	f7ff fbd4 	bl	80018c8 <HAL_GetTick>
 8002120:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002122:	e008      	b.n	8002136 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002124:	f7ff fbd0 	bl	80018c8 <HAL_GetTick>
 8002128:	4602      	mov	r2, r0
 800212a:	693b      	ldr	r3, [r7, #16]
 800212c:	1ad3      	subs	r3, r2, r3
 800212e:	2b02      	cmp	r3, #2
 8002130:	d901      	bls.n	8002136 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002132:	2303      	movs	r3, #3
 8002134:	e187      	b.n	8002446 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002136:	4b1b      	ldr	r3, [pc, #108]	; (80021a4 <HAL_RCC_OscConfig+0x240>)
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f003 0302 	and.w	r3, r3, #2
 800213e:	2b00      	cmp	r3, #0
 8002140:	d1f0      	bne.n	8002124 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f003 0308 	and.w	r3, r3, #8
 800214a:	2b00      	cmp	r3, #0
 800214c:	d036      	beq.n	80021bc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	695b      	ldr	r3, [r3, #20]
 8002152:	2b00      	cmp	r3, #0
 8002154:	d016      	beq.n	8002184 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002156:	4b15      	ldr	r3, [pc, #84]	; (80021ac <HAL_RCC_OscConfig+0x248>)
 8002158:	2201      	movs	r2, #1
 800215a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800215c:	f7ff fbb4 	bl	80018c8 <HAL_GetTick>
 8002160:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002162:	e008      	b.n	8002176 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002164:	f7ff fbb0 	bl	80018c8 <HAL_GetTick>
 8002168:	4602      	mov	r2, r0
 800216a:	693b      	ldr	r3, [r7, #16]
 800216c:	1ad3      	subs	r3, r2, r3
 800216e:	2b02      	cmp	r3, #2
 8002170:	d901      	bls.n	8002176 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002172:	2303      	movs	r3, #3
 8002174:	e167      	b.n	8002446 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002176:	4b0b      	ldr	r3, [pc, #44]	; (80021a4 <HAL_RCC_OscConfig+0x240>)
 8002178:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800217a:	f003 0302 	and.w	r3, r3, #2
 800217e:	2b00      	cmp	r3, #0
 8002180:	d0f0      	beq.n	8002164 <HAL_RCC_OscConfig+0x200>
 8002182:	e01b      	b.n	80021bc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002184:	4b09      	ldr	r3, [pc, #36]	; (80021ac <HAL_RCC_OscConfig+0x248>)
 8002186:	2200      	movs	r2, #0
 8002188:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800218a:	f7ff fb9d 	bl	80018c8 <HAL_GetTick>
 800218e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002190:	e00e      	b.n	80021b0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002192:	f7ff fb99 	bl	80018c8 <HAL_GetTick>
 8002196:	4602      	mov	r2, r0
 8002198:	693b      	ldr	r3, [r7, #16]
 800219a:	1ad3      	subs	r3, r2, r3
 800219c:	2b02      	cmp	r3, #2
 800219e:	d907      	bls.n	80021b0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80021a0:	2303      	movs	r3, #3
 80021a2:	e150      	b.n	8002446 <HAL_RCC_OscConfig+0x4e2>
 80021a4:	40023800 	.word	0x40023800
 80021a8:	42470000 	.word	0x42470000
 80021ac:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80021b0:	4b88      	ldr	r3, [pc, #544]	; (80023d4 <HAL_RCC_OscConfig+0x470>)
 80021b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80021b4:	f003 0302 	and.w	r3, r3, #2
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d1ea      	bne.n	8002192 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f003 0304 	and.w	r3, r3, #4
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	f000 8097 	beq.w	80022f8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80021ca:	2300      	movs	r3, #0
 80021cc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80021ce:	4b81      	ldr	r3, [pc, #516]	; (80023d4 <HAL_RCC_OscConfig+0x470>)
 80021d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d10f      	bne.n	80021fa <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80021da:	2300      	movs	r3, #0
 80021dc:	60bb      	str	r3, [r7, #8]
 80021de:	4b7d      	ldr	r3, [pc, #500]	; (80023d4 <HAL_RCC_OscConfig+0x470>)
 80021e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021e2:	4a7c      	ldr	r2, [pc, #496]	; (80023d4 <HAL_RCC_OscConfig+0x470>)
 80021e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021e8:	6413      	str	r3, [r2, #64]	; 0x40
 80021ea:	4b7a      	ldr	r3, [pc, #488]	; (80023d4 <HAL_RCC_OscConfig+0x470>)
 80021ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021f2:	60bb      	str	r3, [r7, #8]
 80021f4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80021f6:	2301      	movs	r3, #1
 80021f8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021fa:	4b77      	ldr	r3, [pc, #476]	; (80023d8 <HAL_RCC_OscConfig+0x474>)
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002202:	2b00      	cmp	r3, #0
 8002204:	d118      	bne.n	8002238 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002206:	4b74      	ldr	r3, [pc, #464]	; (80023d8 <HAL_RCC_OscConfig+0x474>)
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	4a73      	ldr	r2, [pc, #460]	; (80023d8 <HAL_RCC_OscConfig+0x474>)
 800220c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002210:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002212:	f7ff fb59 	bl	80018c8 <HAL_GetTick>
 8002216:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002218:	e008      	b.n	800222c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800221a:	f7ff fb55 	bl	80018c8 <HAL_GetTick>
 800221e:	4602      	mov	r2, r0
 8002220:	693b      	ldr	r3, [r7, #16]
 8002222:	1ad3      	subs	r3, r2, r3
 8002224:	2b02      	cmp	r3, #2
 8002226:	d901      	bls.n	800222c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002228:	2303      	movs	r3, #3
 800222a:	e10c      	b.n	8002446 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800222c:	4b6a      	ldr	r3, [pc, #424]	; (80023d8 <HAL_RCC_OscConfig+0x474>)
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002234:	2b00      	cmp	r3, #0
 8002236:	d0f0      	beq.n	800221a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	689b      	ldr	r3, [r3, #8]
 800223c:	2b01      	cmp	r3, #1
 800223e:	d106      	bne.n	800224e <HAL_RCC_OscConfig+0x2ea>
 8002240:	4b64      	ldr	r3, [pc, #400]	; (80023d4 <HAL_RCC_OscConfig+0x470>)
 8002242:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002244:	4a63      	ldr	r2, [pc, #396]	; (80023d4 <HAL_RCC_OscConfig+0x470>)
 8002246:	f043 0301 	orr.w	r3, r3, #1
 800224a:	6713      	str	r3, [r2, #112]	; 0x70
 800224c:	e01c      	b.n	8002288 <HAL_RCC_OscConfig+0x324>
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	689b      	ldr	r3, [r3, #8]
 8002252:	2b05      	cmp	r3, #5
 8002254:	d10c      	bne.n	8002270 <HAL_RCC_OscConfig+0x30c>
 8002256:	4b5f      	ldr	r3, [pc, #380]	; (80023d4 <HAL_RCC_OscConfig+0x470>)
 8002258:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800225a:	4a5e      	ldr	r2, [pc, #376]	; (80023d4 <HAL_RCC_OscConfig+0x470>)
 800225c:	f043 0304 	orr.w	r3, r3, #4
 8002260:	6713      	str	r3, [r2, #112]	; 0x70
 8002262:	4b5c      	ldr	r3, [pc, #368]	; (80023d4 <HAL_RCC_OscConfig+0x470>)
 8002264:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002266:	4a5b      	ldr	r2, [pc, #364]	; (80023d4 <HAL_RCC_OscConfig+0x470>)
 8002268:	f043 0301 	orr.w	r3, r3, #1
 800226c:	6713      	str	r3, [r2, #112]	; 0x70
 800226e:	e00b      	b.n	8002288 <HAL_RCC_OscConfig+0x324>
 8002270:	4b58      	ldr	r3, [pc, #352]	; (80023d4 <HAL_RCC_OscConfig+0x470>)
 8002272:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002274:	4a57      	ldr	r2, [pc, #348]	; (80023d4 <HAL_RCC_OscConfig+0x470>)
 8002276:	f023 0301 	bic.w	r3, r3, #1
 800227a:	6713      	str	r3, [r2, #112]	; 0x70
 800227c:	4b55      	ldr	r3, [pc, #340]	; (80023d4 <HAL_RCC_OscConfig+0x470>)
 800227e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002280:	4a54      	ldr	r2, [pc, #336]	; (80023d4 <HAL_RCC_OscConfig+0x470>)
 8002282:	f023 0304 	bic.w	r3, r3, #4
 8002286:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	689b      	ldr	r3, [r3, #8]
 800228c:	2b00      	cmp	r3, #0
 800228e:	d015      	beq.n	80022bc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002290:	f7ff fb1a 	bl	80018c8 <HAL_GetTick>
 8002294:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002296:	e00a      	b.n	80022ae <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002298:	f7ff fb16 	bl	80018c8 <HAL_GetTick>
 800229c:	4602      	mov	r2, r0
 800229e:	693b      	ldr	r3, [r7, #16]
 80022a0:	1ad3      	subs	r3, r2, r3
 80022a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80022a6:	4293      	cmp	r3, r2
 80022a8:	d901      	bls.n	80022ae <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80022aa:	2303      	movs	r3, #3
 80022ac:	e0cb      	b.n	8002446 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022ae:	4b49      	ldr	r3, [pc, #292]	; (80023d4 <HAL_RCC_OscConfig+0x470>)
 80022b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022b2:	f003 0302 	and.w	r3, r3, #2
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d0ee      	beq.n	8002298 <HAL_RCC_OscConfig+0x334>
 80022ba:	e014      	b.n	80022e6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022bc:	f7ff fb04 	bl	80018c8 <HAL_GetTick>
 80022c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80022c2:	e00a      	b.n	80022da <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80022c4:	f7ff fb00 	bl	80018c8 <HAL_GetTick>
 80022c8:	4602      	mov	r2, r0
 80022ca:	693b      	ldr	r3, [r7, #16]
 80022cc:	1ad3      	subs	r3, r2, r3
 80022ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80022d2:	4293      	cmp	r3, r2
 80022d4:	d901      	bls.n	80022da <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80022d6:	2303      	movs	r3, #3
 80022d8:	e0b5      	b.n	8002446 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80022da:	4b3e      	ldr	r3, [pc, #248]	; (80023d4 <HAL_RCC_OscConfig+0x470>)
 80022dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022de:	f003 0302 	and.w	r3, r3, #2
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d1ee      	bne.n	80022c4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80022e6:	7dfb      	ldrb	r3, [r7, #23]
 80022e8:	2b01      	cmp	r3, #1
 80022ea:	d105      	bne.n	80022f8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80022ec:	4b39      	ldr	r3, [pc, #228]	; (80023d4 <HAL_RCC_OscConfig+0x470>)
 80022ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022f0:	4a38      	ldr	r2, [pc, #224]	; (80023d4 <HAL_RCC_OscConfig+0x470>)
 80022f2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80022f6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	699b      	ldr	r3, [r3, #24]
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	f000 80a1 	beq.w	8002444 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002302:	4b34      	ldr	r3, [pc, #208]	; (80023d4 <HAL_RCC_OscConfig+0x470>)
 8002304:	689b      	ldr	r3, [r3, #8]
 8002306:	f003 030c 	and.w	r3, r3, #12
 800230a:	2b08      	cmp	r3, #8
 800230c:	d05c      	beq.n	80023c8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	699b      	ldr	r3, [r3, #24]
 8002312:	2b02      	cmp	r3, #2
 8002314:	d141      	bne.n	800239a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002316:	4b31      	ldr	r3, [pc, #196]	; (80023dc <HAL_RCC_OscConfig+0x478>)
 8002318:	2200      	movs	r2, #0
 800231a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800231c:	f7ff fad4 	bl	80018c8 <HAL_GetTick>
 8002320:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002322:	e008      	b.n	8002336 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002324:	f7ff fad0 	bl	80018c8 <HAL_GetTick>
 8002328:	4602      	mov	r2, r0
 800232a:	693b      	ldr	r3, [r7, #16]
 800232c:	1ad3      	subs	r3, r2, r3
 800232e:	2b02      	cmp	r3, #2
 8002330:	d901      	bls.n	8002336 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002332:	2303      	movs	r3, #3
 8002334:	e087      	b.n	8002446 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002336:	4b27      	ldr	r3, [pc, #156]	; (80023d4 <HAL_RCC_OscConfig+0x470>)
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800233e:	2b00      	cmp	r3, #0
 8002340:	d1f0      	bne.n	8002324 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	69da      	ldr	r2, [r3, #28]
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	6a1b      	ldr	r3, [r3, #32]
 800234a:	431a      	orrs	r2, r3
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002350:	019b      	lsls	r3, r3, #6
 8002352:	431a      	orrs	r2, r3
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002358:	085b      	lsrs	r3, r3, #1
 800235a:	3b01      	subs	r3, #1
 800235c:	041b      	lsls	r3, r3, #16
 800235e:	431a      	orrs	r2, r3
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002364:	061b      	lsls	r3, r3, #24
 8002366:	491b      	ldr	r1, [pc, #108]	; (80023d4 <HAL_RCC_OscConfig+0x470>)
 8002368:	4313      	orrs	r3, r2
 800236a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800236c:	4b1b      	ldr	r3, [pc, #108]	; (80023dc <HAL_RCC_OscConfig+0x478>)
 800236e:	2201      	movs	r2, #1
 8002370:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002372:	f7ff faa9 	bl	80018c8 <HAL_GetTick>
 8002376:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002378:	e008      	b.n	800238c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800237a:	f7ff faa5 	bl	80018c8 <HAL_GetTick>
 800237e:	4602      	mov	r2, r0
 8002380:	693b      	ldr	r3, [r7, #16]
 8002382:	1ad3      	subs	r3, r2, r3
 8002384:	2b02      	cmp	r3, #2
 8002386:	d901      	bls.n	800238c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002388:	2303      	movs	r3, #3
 800238a:	e05c      	b.n	8002446 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800238c:	4b11      	ldr	r3, [pc, #68]	; (80023d4 <HAL_RCC_OscConfig+0x470>)
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002394:	2b00      	cmp	r3, #0
 8002396:	d0f0      	beq.n	800237a <HAL_RCC_OscConfig+0x416>
 8002398:	e054      	b.n	8002444 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800239a:	4b10      	ldr	r3, [pc, #64]	; (80023dc <HAL_RCC_OscConfig+0x478>)
 800239c:	2200      	movs	r2, #0
 800239e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023a0:	f7ff fa92 	bl	80018c8 <HAL_GetTick>
 80023a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80023a6:	e008      	b.n	80023ba <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80023a8:	f7ff fa8e 	bl	80018c8 <HAL_GetTick>
 80023ac:	4602      	mov	r2, r0
 80023ae:	693b      	ldr	r3, [r7, #16]
 80023b0:	1ad3      	subs	r3, r2, r3
 80023b2:	2b02      	cmp	r3, #2
 80023b4:	d901      	bls.n	80023ba <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80023b6:	2303      	movs	r3, #3
 80023b8:	e045      	b.n	8002446 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80023ba:	4b06      	ldr	r3, [pc, #24]	; (80023d4 <HAL_RCC_OscConfig+0x470>)
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d1f0      	bne.n	80023a8 <HAL_RCC_OscConfig+0x444>
 80023c6:	e03d      	b.n	8002444 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	699b      	ldr	r3, [r3, #24]
 80023cc:	2b01      	cmp	r3, #1
 80023ce:	d107      	bne.n	80023e0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80023d0:	2301      	movs	r3, #1
 80023d2:	e038      	b.n	8002446 <HAL_RCC_OscConfig+0x4e2>
 80023d4:	40023800 	.word	0x40023800
 80023d8:	40007000 	.word	0x40007000
 80023dc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80023e0:	4b1b      	ldr	r3, [pc, #108]	; (8002450 <HAL_RCC_OscConfig+0x4ec>)
 80023e2:	685b      	ldr	r3, [r3, #4]
 80023e4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	699b      	ldr	r3, [r3, #24]
 80023ea:	2b01      	cmp	r3, #1
 80023ec:	d028      	beq.n	8002440 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80023f8:	429a      	cmp	r2, r3
 80023fa:	d121      	bne.n	8002440 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002406:	429a      	cmp	r2, r3
 8002408:	d11a      	bne.n	8002440 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800240a:	68fa      	ldr	r2, [r7, #12]
 800240c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002410:	4013      	ands	r3, r2
 8002412:	687a      	ldr	r2, [r7, #4]
 8002414:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002416:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002418:	4293      	cmp	r3, r2
 800241a:	d111      	bne.n	8002440 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002426:	085b      	lsrs	r3, r3, #1
 8002428:	3b01      	subs	r3, #1
 800242a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800242c:	429a      	cmp	r2, r3
 800242e:	d107      	bne.n	8002440 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800243a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800243c:	429a      	cmp	r2, r3
 800243e:	d001      	beq.n	8002444 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002440:	2301      	movs	r3, #1
 8002442:	e000      	b.n	8002446 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002444:	2300      	movs	r3, #0
}
 8002446:	4618      	mov	r0, r3
 8002448:	3718      	adds	r7, #24
 800244a:	46bd      	mov	sp, r7
 800244c:	bd80      	pop	{r7, pc}
 800244e:	bf00      	nop
 8002450:	40023800 	.word	0x40023800

08002454 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	b084      	sub	sp, #16
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
 800245c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	2b00      	cmp	r3, #0
 8002462:	d101      	bne.n	8002468 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002464:	2301      	movs	r3, #1
 8002466:	e0cc      	b.n	8002602 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002468:	4b68      	ldr	r3, [pc, #416]	; (800260c <HAL_RCC_ClockConfig+0x1b8>)
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f003 0307 	and.w	r3, r3, #7
 8002470:	683a      	ldr	r2, [r7, #0]
 8002472:	429a      	cmp	r2, r3
 8002474:	d90c      	bls.n	8002490 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002476:	4b65      	ldr	r3, [pc, #404]	; (800260c <HAL_RCC_ClockConfig+0x1b8>)
 8002478:	683a      	ldr	r2, [r7, #0]
 800247a:	b2d2      	uxtb	r2, r2
 800247c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800247e:	4b63      	ldr	r3, [pc, #396]	; (800260c <HAL_RCC_ClockConfig+0x1b8>)
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f003 0307 	and.w	r3, r3, #7
 8002486:	683a      	ldr	r2, [r7, #0]
 8002488:	429a      	cmp	r2, r3
 800248a:	d001      	beq.n	8002490 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800248c:	2301      	movs	r3, #1
 800248e:	e0b8      	b.n	8002602 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f003 0302 	and.w	r3, r3, #2
 8002498:	2b00      	cmp	r3, #0
 800249a:	d020      	beq.n	80024de <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f003 0304 	and.w	r3, r3, #4
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d005      	beq.n	80024b4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80024a8:	4b59      	ldr	r3, [pc, #356]	; (8002610 <HAL_RCC_ClockConfig+0x1bc>)
 80024aa:	689b      	ldr	r3, [r3, #8]
 80024ac:	4a58      	ldr	r2, [pc, #352]	; (8002610 <HAL_RCC_ClockConfig+0x1bc>)
 80024ae:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80024b2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f003 0308 	and.w	r3, r3, #8
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d005      	beq.n	80024cc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80024c0:	4b53      	ldr	r3, [pc, #332]	; (8002610 <HAL_RCC_ClockConfig+0x1bc>)
 80024c2:	689b      	ldr	r3, [r3, #8]
 80024c4:	4a52      	ldr	r2, [pc, #328]	; (8002610 <HAL_RCC_ClockConfig+0x1bc>)
 80024c6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80024ca:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80024cc:	4b50      	ldr	r3, [pc, #320]	; (8002610 <HAL_RCC_ClockConfig+0x1bc>)
 80024ce:	689b      	ldr	r3, [r3, #8]
 80024d0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	689b      	ldr	r3, [r3, #8]
 80024d8:	494d      	ldr	r1, [pc, #308]	; (8002610 <HAL_RCC_ClockConfig+0x1bc>)
 80024da:	4313      	orrs	r3, r2
 80024dc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f003 0301 	and.w	r3, r3, #1
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d044      	beq.n	8002574 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	685b      	ldr	r3, [r3, #4]
 80024ee:	2b01      	cmp	r3, #1
 80024f0:	d107      	bne.n	8002502 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024f2:	4b47      	ldr	r3, [pc, #284]	; (8002610 <HAL_RCC_ClockConfig+0x1bc>)
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d119      	bne.n	8002532 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80024fe:	2301      	movs	r3, #1
 8002500:	e07f      	b.n	8002602 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	685b      	ldr	r3, [r3, #4]
 8002506:	2b02      	cmp	r3, #2
 8002508:	d003      	beq.n	8002512 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800250e:	2b03      	cmp	r3, #3
 8002510:	d107      	bne.n	8002522 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002512:	4b3f      	ldr	r3, [pc, #252]	; (8002610 <HAL_RCC_ClockConfig+0x1bc>)
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800251a:	2b00      	cmp	r3, #0
 800251c:	d109      	bne.n	8002532 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800251e:	2301      	movs	r3, #1
 8002520:	e06f      	b.n	8002602 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002522:	4b3b      	ldr	r3, [pc, #236]	; (8002610 <HAL_RCC_ClockConfig+0x1bc>)
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f003 0302 	and.w	r3, r3, #2
 800252a:	2b00      	cmp	r3, #0
 800252c:	d101      	bne.n	8002532 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800252e:	2301      	movs	r3, #1
 8002530:	e067      	b.n	8002602 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002532:	4b37      	ldr	r3, [pc, #220]	; (8002610 <HAL_RCC_ClockConfig+0x1bc>)
 8002534:	689b      	ldr	r3, [r3, #8]
 8002536:	f023 0203 	bic.w	r2, r3, #3
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	685b      	ldr	r3, [r3, #4]
 800253e:	4934      	ldr	r1, [pc, #208]	; (8002610 <HAL_RCC_ClockConfig+0x1bc>)
 8002540:	4313      	orrs	r3, r2
 8002542:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002544:	f7ff f9c0 	bl	80018c8 <HAL_GetTick>
 8002548:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800254a:	e00a      	b.n	8002562 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800254c:	f7ff f9bc 	bl	80018c8 <HAL_GetTick>
 8002550:	4602      	mov	r2, r0
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	1ad3      	subs	r3, r2, r3
 8002556:	f241 3288 	movw	r2, #5000	; 0x1388
 800255a:	4293      	cmp	r3, r2
 800255c:	d901      	bls.n	8002562 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800255e:	2303      	movs	r3, #3
 8002560:	e04f      	b.n	8002602 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002562:	4b2b      	ldr	r3, [pc, #172]	; (8002610 <HAL_RCC_ClockConfig+0x1bc>)
 8002564:	689b      	ldr	r3, [r3, #8]
 8002566:	f003 020c 	and.w	r2, r3, #12
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	685b      	ldr	r3, [r3, #4]
 800256e:	009b      	lsls	r3, r3, #2
 8002570:	429a      	cmp	r2, r3
 8002572:	d1eb      	bne.n	800254c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002574:	4b25      	ldr	r3, [pc, #148]	; (800260c <HAL_RCC_ClockConfig+0x1b8>)
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f003 0307 	and.w	r3, r3, #7
 800257c:	683a      	ldr	r2, [r7, #0]
 800257e:	429a      	cmp	r2, r3
 8002580:	d20c      	bcs.n	800259c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002582:	4b22      	ldr	r3, [pc, #136]	; (800260c <HAL_RCC_ClockConfig+0x1b8>)
 8002584:	683a      	ldr	r2, [r7, #0]
 8002586:	b2d2      	uxtb	r2, r2
 8002588:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800258a:	4b20      	ldr	r3, [pc, #128]	; (800260c <HAL_RCC_ClockConfig+0x1b8>)
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f003 0307 	and.w	r3, r3, #7
 8002592:	683a      	ldr	r2, [r7, #0]
 8002594:	429a      	cmp	r2, r3
 8002596:	d001      	beq.n	800259c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002598:	2301      	movs	r3, #1
 800259a:	e032      	b.n	8002602 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f003 0304 	and.w	r3, r3, #4
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d008      	beq.n	80025ba <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80025a8:	4b19      	ldr	r3, [pc, #100]	; (8002610 <HAL_RCC_ClockConfig+0x1bc>)
 80025aa:	689b      	ldr	r3, [r3, #8]
 80025ac:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	68db      	ldr	r3, [r3, #12]
 80025b4:	4916      	ldr	r1, [pc, #88]	; (8002610 <HAL_RCC_ClockConfig+0x1bc>)
 80025b6:	4313      	orrs	r3, r2
 80025b8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f003 0308 	and.w	r3, r3, #8
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d009      	beq.n	80025da <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80025c6:	4b12      	ldr	r3, [pc, #72]	; (8002610 <HAL_RCC_ClockConfig+0x1bc>)
 80025c8:	689b      	ldr	r3, [r3, #8]
 80025ca:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	691b      	ldr	r3, [r3, #16]
 80025d2:	00db      	lsls	r3, r3, #3
 80025d4:	490e      	ldr	r1, [pc, #56]	; (8002610 <HAL_RCC_ClockConfig+0x1bc>)
 80025d6:	4313      	orrs	r3, r2
 80025d8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80025da:	f000 f821 	bl	8002620 <HAL_RCC_GetSysClockFreq>
 80025de:	4602      	mov	r2, r0
 80025e0:	4b0b      	ldr	r3, [pc, #44]	; (8002610 <HAL_RCC_ClockConfig+0x1bc>)
 80025e2:	689b      	ldr	r3, [r3, #8]
 80025e4:	091b      	lsrs	r3, r3, #4
 80025e6:	f003 030f 	and.w	r3, r3, #15
 80025ea:	490a      	ldr	r1, [pc, #40]	; (8002614 <HAL_RCC_ClockConfig+0x1c0>)
 80025ec:	5ccb      	ldrb	r3, [r1, r3]
 80025ee:	fa22 f303 	lsr.w	r3, r2, r3
 80025f2:	4a09      	ldr	r2, [pc, #36]	; (8002618 <HAL_RCC_ClockConfig+0x1c4>)
 80025f4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80025f6:	4b09      	ldr	r3, [pc, #36]	; (800261c <HAL_RCC_ClockConfig+0x1c8>)
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	4618      	mov	r0, r3
 80025fc:	f7ff f920 	bl	8001840 <HAL_InitTick>

  return HAL_OK;
 8002600:	2300      	movs	r3, #0
}
 8002602:	4618      	mov	r0, r3
 8002604:	3710      	adds	r7, #16
 8002606:	46bd      	mov	sp, r7
 8002608:	bd80      	pop	{r7, pc}
 800260a:	bf00      	nop
 800260c:	40023c00 	.word	0x40023c00
 8002610:	40023800 	.word	0x40023800
 8002614:	08006e70 	.word	0x08006e70
 8002618:	20000000 	.word	0x20000000
 800261c:	20000004 	.word	0x20000004

08002620 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002620:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002624:	b090      	sub	sp, #64	; 0x40
 8002626:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002628:	2300      	movs	r3, #0
 800262a:	637b      	str	r3, [r7, #52]	; 0x34
 800262c:	2300      	movs	r3, #0
 800262e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002630:	2300      	movs	r3, #0
 8002632:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8002634:	2300      	movs	r3, #0
 8002636:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002638:	4b59      	ldr	r3, [pc, #356]	; (80027a0 <HAL_RCC_GetSysClockFreq+0x180>)
 800263a:	689b      	ldr	r3, [r3, #8]
 800263c:	f003 030c 	and.w	r3, r3, #12
 8002640:	2b08      	cmp	r3, #8
 8002642:	d00d      	beq.n	8002660 <HAL_RCC_GetSysClockFreq+0x40>
 8002644:	2b08      	cmp	r3, #8
 8002646:	f200 80a1 	bhi.w	800278c <HAL_RCC_GetSysClockFreq+0x16c>
 800264a:	2b00      	cmp	r3, #0
 800264c:	d002      	beq.n	8002654 <HAL_RCC_GetSysClockFreq+0x34>
 800264e:	2b04      	cmp	r3, #4
 8002650:	d003      	beq.n	800265a <HAL_RCC_GetSysClockFreq+0x3a>
 8002652:	e09b      	b.n	800278c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002654:	4b53      	ldr	r3, [pc, #332]	; (80027a4 <HAL_RCC_GetSysClockFreq+0x184>)
 8002656:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8002658:	e09b      	b.n	8002792 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800265a:	4b53      	ldr	r3, [pc, #332]	; (80027a8 <HAL_RCC_GetSysClockFreq+0x188>)
 800265c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800265e:	e098      	b.n	8002792 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002660:	4b4f      	ldr	r3, [pc, #316]	; (80027a0 <HAL_RCC_GetSysClockFreq+0x180>)
 8002662:	685b      	ldr	r3, [r3, #4]
 8002664:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002668:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800266a:	4b4d      	ldr	r3, [pc, #308]	; (80027a0 <HAL_RCC_GetSysClockFreq+0x180>)
 800266c:	685b      	ldr	r3, [r3, #4]
 800266e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002672:	2b00      	cmp	r3, #0
 8002674:	d028      	beq.n	80026c8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002676:	4b4a      	ldr	r3, [pc, #296]	; (80027a0 <HAL_RCC_GetSysClockFreq+0x180>)
 8002678:	685b      	ldr	r3, [r3, #4]
 800267a:	099b      	lsrs	r3, r3, #6
 800267c:	2200      	movs	r2, #0
 800267e:	623b      	str	r3, [r7, #32]
 8002680:	627a      	str	r2, [r7, #36]	; 0x24
 8002682:	6a3b      	ldr	r3, [r7, #32]
 8002684:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002688:	2100      	movs	r1, #0
 800268a:	4b47      	ldr	r3, [pc, #284]	; (80027a8 <HAL_RCC_GetSysClockFreq+0x188>)
 800268c:	fb03 f201 	mul.w	r2, r3, r1
 8002690:	2300      	movs	r3, #0
 8002692:	fb00 f303 	mul.w	r3, r0, r3
 8002696:	4413      	add	r3, r2
 8002698:	4a43      	ldr	r2, [pc, #268]	; (80027a8 <HAL_RCC_GetSysClockFreq+0x188>)
 800269a:	fba0 1202 	umull	r1, r2, r0, r2
 800269e:	62fa      	str	r2, [r7, #44]	; 0x2c
 80026a0:	460a      	mov	r2, r1
 80026a2:	62ba      	str	r2, [r7, #40]	; 0x28
 80026a4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80026a6:	4413      	add	r3, r2
 80026a8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80026aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80026ac:	2200      	movs	r2, #0
 80026ae:	61bb      	str	r3, [r7, #24]
 80026b0:	61fa      	str	r2, [r7, #28]
 80026b2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80026b6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80026ba:	f7fe facd 	bl	8000c58 <__aeabi_uldivmod>
 80026be:	4602      	mov	r2, r0
 80026c0:	460b      	mov	r3, r1
 80026c2:	4613      	mov	r3, r2
 80026c4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80026c6:	e053      	b.n	8002770 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80026c8:	4b35      	ldr	r3, [pc, #212]	; (80027a0 <HAL_RCC_GetSysClockFreq+0x180>)
 80026ca:	685b      	ldr	r3, [r3, #4]
 80026cc:	099b      	lsrs	r3, r3, #6
 80026ce:	2200      	movs	r2, #0
 80026d0:	613b      	str	r3, [r7, #16]
 80026d2:	617a      	str	r2, [r7, #20]
 80026d4:	693b      	ldr	r3, [r7, #16]
 80026d6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80026da:	f04f 0b00 	mov.w	fp, #0
 80026de:	4652      	mov	r2, sl
 80026e0:	465b      	mov	r3, fp
 80026e2:	f04f 0000 	mov.w	r0, #0
 80026e6:	f04f 0100 	mov.w	r1, #0
 80026ea:	0159      	lsls	r1, r3, #5
 80026ec:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80026f0:	0150      	lsls	r0, r2, #5
 80026f2:	4602      	mov	r2, r0
 80026f4:	460b      	mov	r3, r1
 80026f6:	ebb2 080a 	subs.w	r8, r2, sl
 80026fa:	eb63 090b 	sbc.w	r9, r3, fp
 80026fe:	f04f 0200 	mov.w	r2, #0
 8002702:	f04f 0300 	mov.w	r3, #0
 8002706:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800270a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800270e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002712:	ebb2 0408 	subs.w	r4, r2, r8
 8002716:	eb63 0509 	sbc.w	r5, r3, r9
 800271a:	f04f 0200 	mov.w	r2, #0
 800271e:	f04f 0300 	mov.w	r3, #0
 8002722:	00eb      	lsls	r3, r5, #3
 8002724:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002728:	00e2      	lsls	r2, r4, #3
 800272a:	4614      	mov	r4, r2
 800272c:	461d      	mov	r5, r3
 800272e:	eb14 030a 	adds.w	r3, r4, sl
 8002732:	603b      	str	r3, [r7, #0]
 8002734:	eb45 030b 	adc.w	r3, r5, fp
 8002738:	607b      	str	r3, [r7, #4]
 800273a:	f04f 0200 	mov.w	r2, #0
 800273e:	f04f 0300 	mov.w	r3, #0
 8002742:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002746:	4629      	mov	r1, r5
 8002748:	028b      	lsls	r3, r1, #10
 800274a:	4621      	mov	r1, r4
 800274c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002750:	4621      	mov	r1, r4
 8002752:	028a      	lsls	r2, r1, #10
 8002754:	4610      	mov	r0, r2
 8002756:	4619      	mov	r1, r3
 8002758:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800275a:	2200      	movs	r2, #0
 800275c:	60bb      	str	r3, [r7, #8]
 800275e:	60fa      	str	r2, [r7, #12]
 8002760:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002764:	f7fe fa78 	bl	8000c58 <__aeabi_uldivmod>
 8002768:	4602      	mov	r2, r0
 800276a:	460b      	mov	r3, r1
 800276c:	4613      	mov	r3, r2
 800276e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002770:	4b0b      	ldr	r3, [pc, #44]	; (80027a0 <HAL_RCC_GetSysClockFreq+0x180>)
 8002772:	685b      	ldr	r3, [r3, #4]
 8002774:	0c1b      	lsrs	r3, r3, #16
 8002776:	f003 0303 	and.w	r3, r3, #3
 800277a:	3301      	adds	r3, #1
 800277c:	005b      	lsls	r3, r3, #1
 800277e:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8002780:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002782:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002784:	fbb2 f3f3 	udiv	r3, r2, r3
 8002788:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800278a:	e002      	b.n	8002792 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800278c:	4b05      	ldr	r3, [pc, #20]	; (80027a4 <HAL_RCC_GetSysClockFreq+0x184>)
 800278e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002790:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002792:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8002794:	4618      	mov	r0, r3
 8002796:	3740      	adds	r7, #64	; 0x40
 8002798:	46bd      	mov	sp, r7
 800279a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800279e:	bf00      	nop
 80027a0:	40023800 	.word	0x40023800
 80027a4:	00f42400 	.word	0x00f42400
 80027a8:	017d7840 	.word	0x017d7840

080027ac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80027ac:	b480      	push	{r7}
 80027ae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80027b0:	4b03      	ldr	r3, [pc, #12]	; (80027c0 <HAL_RCC_GetHCLKFreq+0x14>)
 80027b2:	681b      	ldr	r3, [r3, #0]
}
 80027b4:	4618      	mov	r0, r3
 80027b6:	46bd      	mov	sp, r7
 80027b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027bc:	4770      	bx	lr
 80027be:	bf00      	nop
 80027c0:	20000000 	.word	0x20000000

080027c4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80027c4:	b580      	push	{r7, lr}
 80027c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80027c8:	f7ff fff0 	bl	80027ac <HAL_RCC_GetHCLKFreq>
 80027cc:	4602      	mov	r2, r0
 80027ce:	4b05      	ldr	r3, [pc, #20]	; (80027e4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80027d0:	689b      	ldr	r3, [r3, #8]
 80027d2:	0a9b      	lsrs	r3, r3, #10
 80027d4:	f003 0307 	and.w	r3, r3, #7
 80027d8:	4903      	ldr	r1, [pc, #12]	; (80027e8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80027da:	5ccb      	ldrb	r3, [r1, r3]
 80027dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80027e0:	4618      	mov	r0, r3
 80027e2:	bd80      	pop	{r7, pc}
 80027e4:	40023800 	.word	0x40023800
 80027e8:	08006e80 	.word	0x08006e80

080027ec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80027ec:	b580      	push	{r7, lr}
 80027ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80027f0:	f7ff ffdc 	bl	80027ac <HAL_RCC_GetHCLKFreq>
 80027f4:	4602      	mov	r2, r0
 80027f6:	4b05      	ldr	r3, [pc, #20]	; (800280c <HAL_RCC_GetPCLK2Freq+0x20>)
 80027f8:	689b      	ldr	r3, [r3, #8]
 80027fa:	0b5b      	lsrs	r3, r3, #13
 80027fc:	f003 0307 	and.w	r3, r3, #7
 8002800:	4903      	ldr	r1, [pc, #12]	; (8002810 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002802:	5ccb      	ldrb	r3, [r1, r3]
 8002804:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002808:	4618      	mov	r0, r3
 800280a:	bd80      	pop	{r7, pc}
 800280c:	40023800 	.word	0x40023800
 8002810:	08006e80 	.word	0x08006e80

08002814 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002814:	b580      	push	{r7, lr}
 8002816:	b082      	sub	sp, #8
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	2b00      	cmp	r3, #0
 8002820:	d101      	bne.n	8002826 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002822:	2301      	movs	r3, #1
 8002824:	e07b      	b.n	800291e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800282a:	2b00      	cmp	r3, #0
 800282c:	d108      	bne.n	8002840 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	685b      	ldr	r3, [r3, #4]
 8002832:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002836:	d009      	beq.n	800284c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	2200      	movs	r2, #0
 800283c:	61da      	str	r2, [r3, #28]
 800283e:	e005      	b.n	800284c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	2200      	movs	r2, #0
 8002844:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	2200      	movs	r2, #0
 800284a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	2200      	movs	r2, #0
 8002850:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002858:	b2db      	uxtb	r3, r3
 800285a:	2b00      	cmp	r3, #0
 800285c:	d106      	bne.n	800286c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	2200      	movs	r2, #0
 8002862:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002866:	6878      	ldr	r0, [r7, #4]
 8002868:	f7fe fde8 	bl	800143c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	2202      	movs	r2, #2
 8002870:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	681a      	ldr	r2, [r3, #0]
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002882:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	685b      	ldr	r3, [r3, #4]
 8002888:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	689b      	ldr	r3, [r3, #8]
 8002890:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002894:	431a      	orrs	r2, r3
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	68db      	ldr	r3, [r3, #12]
 800289a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800289e:	431a      	orrs	r2, r3
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	691b      	ldr	r3, [r3, #16]
 80028a4:	f003 0302 	and.w	r3, r3, #2
 80028a8:	431a      	orrs	r2, r3
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	695b      	ldr	r3, [r3, #20]
 80028ae:	f003 0301 	and.w	r3, r3, #1
 80028b2:	431a      	orrs	r2, r3
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	699b      	ldr	r3, [r3, #24]
 80028b8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80028bc:	431a      	orrs	r2, r3
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	69db      	ldr	r3, [r3, #28]
 80028c2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80028c6:	431a      	orrs	r2, r3
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	6a1b      	ldr	r3, [r3, #32]
 80028cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028d0:	ea42 0103 	orr.w	r1, r2, r3
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028d8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	430a      	orrs	r2, r1
 80028e2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	699b      	ldr	r3, [r3, #24]
 80028e8:	0c1b      	lsrs	r3, r3, #16
 80028ea:	f003 0104 	and.w	r1, r3, #4
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028f2:	f003 0210 	and.w	r2, r3, #16
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	430a      	orrs	r2, r1
 80028fc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	69da      	ldr	r2, [r3, #28]
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800290c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	2200      	movs	r2, #0
 8002912:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	2201      	movs	r2, #1
 8002918:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800291c:	2300      	movs	r3, #0
}
 800291e:	4618      	mov	r0, r3
 8002920:	3708      	adds	r7, #8
 8002922:	46bd      	mov	sp, r7
 8002924:	bd80      	pop	{r7, pc}

08002926 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002926:	b580      	push	{r7, lr}
 8002928:	b088      	sub	sp, #32
 800292a:	af00      	add	r7, sp, #0
 800292c:	60f8      	str	r0, [r7, #12]
 800292e:	60b9      	str	r1, [r7, #8]
 8002930:	603b      	str	r3, [r7, #0]
 8002932:	4613      	mov	r3, r2
 8002934:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002936:	2300      	movs	r3, #0
 8002938:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002940:	2b01      	cmp	r3, #1
 8002942:	d101      	bne.n	8002948 <HAL_SPI_Transmit+0x22>
 8002944:	2302      	movs	r3, #2
 8002946:	e126      	b.n	8002b96 <HAL_SPI_Transmit+0x270>
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	2201      	movs	r2, #1
 800294c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002950:	f7fe ffba 	bl	80018c8 <HAL_GetTick>
 8002954:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002956:	88fb      	ldrh	r3, [r7, #6]
 8002958:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002960:	b2db      	uxtb	r3, r3
 8002962:	2b01      	cmp	r3, #1
 8002964:	d002      	beq.n	800296c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002966:	2302      	movs	r3, #2
 8002968:	77fb      	strb	r3, [r7, #31]
    goto error;
 800296a:	e10b      	b.n	8002b84 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 800296c:	68bb      	ldr	r3, [r7, #8]
 800296e:	2b00      	cmp	r3, #0
 8002970:	d002      	beq.n	8002978 <HAL_SPI_Transmit+0x52>
 8002972:	88fb      	ldrh	r3, [r7, #6]
 8002974:	2b00      	cmp	r3, #0
 8002976:	d102      	bne.n	800297e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002978:	2301      	movs	r3, #1
 800297a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800297c:	e102      	b.n	8002b84 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	2203      	movs	r2, #3
 8002982:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	2200      	movs	r2, #0
 800298a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	68ba      	ldr	r2, [r7, #8]
 8002990:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	88fa      	ldrh	r2, [r7, #6]
 8002996:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	88fa      	ldrh	r2, [r7, #6]
 800299c:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	2200      	movs	r2, #0
 80029a2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	2200      	movs	r2, #0
 80029a8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	2200      	movs	r2, #0
 80029ae:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	2200      	movs	r2, #0
 80029b4:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	2200      	movs	r2, #0
 80029ba:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	689b      	ldr	r3, [r3, #8]
 80029c0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80029c4:	d10f      	bne.n	80029e6 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	681a      	ldr	r2, [r3, #0]
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80029d4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	681a      	ldr	r2, [r3, #0]
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80029e4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029f0:	2b40      	cmp	r3, #64	; 0x40
 80029f2:	d007      	beq.n	8002a04 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	681a      	ldr	r2, [r3, #0]
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002a02:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	68db      	ldr	r3, [r3, #12]
 8002a08:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002a0c:	d14b      	bne.n	8002aa6 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	685b      	ldr	r3, [r3, #4]
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d002      	beq.n	8002a1c <HAL_SPI_Transmit+0xf6>
 8002a16:	8afb      	ldrh	r3, [r7, #22]
 8002a18:	2b01      	cmp	r3, #1
 8002a1a:	d13e      	bne.n	8002a9a <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a20:	881a      	ldrh	r2, [r3, #0]
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a2c:	1c9a      	adds	r2, r3, #2
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002a36:	b29b      	uxth	r3, r3
 8002a38:	3b01      	subs	r3, #1
 8002a3a:	b29a      	uxth	r2, r3
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002a40:	e02b      	b.n	8002a9a <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	689b      	ldr	r3, [r3, #8]
 8002a48:	f003 0302 	and.w	r3, r3, #2
 8002a4c:	2b02      	cmp	r3, #2
 8002a4e:	d112      	bne.n	8002a76 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a54:	881a      	ldrh	r2, [r3, #0]
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a60:	1c9a      	adds	r2, r3, #2
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002a6a:	b29b      	uxth	r3, r3
 8002a6c:	3b01      	subs	r3, #1
 8002a6e:	b29a      	uxth	r2, r3
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	86da      	strh	r2, [r3, #54]	; 0x36
 8002a74:	e011      	b.n	8002a9a <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002a76:	f7fe ff27 	bl	80018c8 <HAL_GetTick>
 8002a7a:	4602      	mov	r2, r0
 8002a7c:	69bb      	ldr	r3, [r7, #24]
 8002a7e:	1ad3      	subs	r3, r2, r3
 8002a80:	683a      	ldr	r2, [r7, #0]
 8002a82:	429a      	cmp	r2, r3
 8002a84:	d803      	bhi.n	8002a8e <HAL_SPI_Transmit+0x168>
 8002a86:	683b      	ldr	r3, [r7, #0]
 8002a88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a8c:	d102      	bne.n	8002a94 <HAL_SPI_Transmit+0x16e>
 8002a8e:	683b      	ldr	r3, [r7, #0]
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d102      	bne.n	8002a9a <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8002a94:	2303      	movs	r3, #3
 8002a96:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002a98:	e074      	b.n	8002b84 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002a9e:	b29b      	uxth	r3, r3
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d1ce      	bne.n	8002a42 <HAL_SPI_Transmit+0x11c>
 8002aa4:	e04c      	b.n	8002b40 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	685b      	ldr	r3, [r3, #4]
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d002      	beq.n	8002ab4 <HAL_SPI_Transmit+0x18e>
 8002aae:	8afb      	ldrh	r3, [r7, #22]
 8002ab0:	2b01      	cmp	r3, #1
 8002ab2:	d140      	bne.n	8002b36 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	330c      	adds	r3, #12
 8002abe:	7812      	ldrb	r2, [r2, #0]
 8002ac0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ac6:	1c5a      	adds	r2, r3, #1
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002ad0:	b29b      	uxth	r3, r3
 8002ad2:	3b01      	subs	r3, #1
 8002ad4:	b29a      	uxth	r2, r3
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002ada:	e02c      	b.n	8002b36 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	689b      	ldr	r3, [r3, #8]
 8002ae2:	f003 0302 	and.w	r3, r3, #2
 8002ae6:	2b02      	cmp	r3, #2
 8002ae8:	d113      	bne.n	8002b12 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	330c      	adds	r3, #12
 8002af4:	7812      	ldrb	r2, [r2, #0]
 8002af6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002afc:	1c5a      	adds	r2, r3, #1
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002b06:	b29b      	uxth	r3, r3
 8002b08:	3b01      	subs	r3, #1
 8002b0a:	b29a      	uxth	r2, r3
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	86da      	strh	r2, [r3, #54]	; 0x36
 8002b10:	e011      	b.n	8002b36 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002b12:	f7fe fed9 	bl	80018c8 <HAL_GetTick>
 8002b16:	4602      	mov	r2, r0
 8002b18:	69bb      	ldr	r3, [r7, #24]
 8002b1a:	1ad3      	subs	r3, r2, r3
 8002b1c:	683a      	ldr	r2, [r7, #0]
 8002b1e:	429a      	cmp	r2, r3
 8002b20:	d803      	bhi.n	8002b2a <HAL_SPI_Transmit+0x204>
 8002b22:	683b      	ldr	r3, [r7, #0]
 8002b24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b28:	d102      	bne.n	8002b30 <HAL_SPI_Transmit+0x20a>
 8002b2a:	683b      	ldr	r3, [r7, #0]
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d102      	bne.n	8002b36 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8002b30:	2303      	movs	r3, #3
 8002b32:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002b34:	e026      	b.n	8002b84 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002b3a:	b29b      	uxth	r3, r3
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d1cd      	bne.n	8002adc <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002b40:	69ba      	ldr	r2, [r7, #24]
 8002b42:	6839      	ldr	r1, [r7, #0]
 8002b44:	68f8      	ldr	r0, [r7, #12]
 8002b46:	f000 fce9 	bl	800351c <SPI_EndRxTxTransaction>
 8002b4a:	4603      	mov	r3, r0
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d002      	beq.n	8002b56 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	2220      	movs	r2, #32
 8002b54:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	689b      	ldr	r3, [r3, #8]
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d10a      	bne.n	8002b74 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002b5e:	2300      	movs	r3, #0
 8002b60:	613b      	str	r3, [r7, #16]
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	68db      	ldr	r3, [r3, #12]
 8002b68:	613b      	str	r3, [r7, #16]
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	689b      	ldr	r3, [r3, #8]
 8002b70:	613b      	str	r3, [r7, #16]
 8002b72:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d002      	beq.n	8002b82 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8002b7c:	2301      	movs	r3, #1
 8002b7e:	77fb      	strb	r3, [r7, #31]
 8002b80:	e000      	b.n	8002b84 <HAL_SPI_Transmit+0x25e>
  }

error:
 8002b82:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	2201      	movs	r2, #1
 8002b88:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	2200      	movs	r2, #0
 8002b90:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002b94:	7ffb      	ldrb	r3, [r7, #31]
}
 8002b96:	4618      	mov	r0, r3
 8002b98:	3720      	adds	r7, #32
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	bd80      	pop	{r7, pc}

08002b9e <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002b9e:	b580      	push	{r7, lr}
 8002ba0:	b088      	sub	sp, #32
 8002ba2:	af02      	add	r7, sp, #8
 8002ba4:	60f8      	str	r0, [r7, #12]
 8002ba6:	60b9      	str	r1, [r7, #8]
 8002ba8:	603b      	str	r3, [r7, #0]
 8002baa:	4613      	mov	r3, r2
 8002bac:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002bae:	2300      	movs	r3, #0
 8002bb0:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	685b      	ldr	r3, [r3, #4]
 8002bb6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002bba:	d112      	bne.n	8002be2 <HAL_SPI_Receive+0x44>
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	689b      	ldr	r3, [r3, #8]
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d10e      	bne.n	8002be2 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	2204      	movs	r2, #4
 8002bc8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8002bcc:	88fa      	ldrh	r2, [r7, #6]
 8002bce:	683b      	ldr	r3, [r7, #0]
 8002bd0:	9300      	str	r3, [sp, #0]
 8002bd2:	4613      	mov	r3, r2
 8002bd4:	68ba      	ldr	r2, [r7, #8]
 8002bd6:	68b9      	ldr	r1, [r7, #8]
 8002bd8:	68f8      	ldr	r0, [r7, #12]
 8002bda:	f000 f8f1 	bl	8002dc0 <HAL_SPI_TransmitReceive>
 8002bde:	4603      	mov	r3, r0
 8002be0:	e0ea      	b.n	8002db8 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002be8:	2b01      	cmp	r3, #1
 8002bea:	d101      	bne.n	8002bf0 <HAL_SPI_Receive+0x52>
 8002bec:	2302      	movs	r3, #2
 8002bee:	e0e3      	b.n	8002db8 <HAL_SPI_Receive+0x21a>
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	2201      	movs	r2, #1
 8002bf4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002bf8:	f7fe fe66 	bl	80018c8 <HAL_GetTick>
 8002bfc:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002c04:	b2db      	uxtb	r3, r3
 8002c06:	2b01      	cmp	r3, #1
 8002c08:	d002      	beq.n	8002c10 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8002c0a:	2302      	movs	r3, #2
 8002c0c:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002c0e:	e0ca      	b.n	8002da6 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8002c10:	68bb      	ldr	r3, [r7, #8]
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d002      	beq.n	8002c1c <HAL_SPI_Receive+0x7e>
 8002c16:	88fb      	ldrh	r3, [r7, #6]
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d102      	bne.n	8002c22 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8002c1c:	2301      	movs	r3, #1
 8002c1e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002c20:	e0c1      	b.n	8002da6 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	2204      	movs	r2, #4
 8002c26:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	68ba      	ldr	r2, [r7, #8]
 8002c34:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	88fa      	ldrh	r2, [r7, #6]
 8002c3a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	88fa      	ldrh	r2, [r7, #6]
 8002c40:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	2200      	movs	r2, #0
 8002c46:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	2200      	movs	r2, #0
 8002c52:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	2200      	movs	r2, #0
 8002c58:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	2200      	movs	r2, #0
 8002c5e:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	689b      	ldr	r3, [r3, #8]
 8002c64:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002c68:	d10f      	bne.n	8002c8a <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	681a      	ldr	r2, [r3, #0]
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002c78:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	681a      	ldr	r2, [r3, #0]
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002c88:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c94:	2b40      	cmp	r3, #64	; 0x40
 8002c96:	d007      	beq.n	8002ca8 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	681a      	ldr	r2, [r3, #0]
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002ca6:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	68db      	ldr	r3, [r3, #12]
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d162      	bne.n	8002d76 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8002cb0:	e02e      	b.n	8002d10 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	689b      	ldr	r3, [r3, #8]
 8002cb8:	f003 0301 	and.w	r3, r3, #1
 8002cbc:	2b01      	cmp	r3, #1
 8002cbe:	d115      	bne.n	8002cec <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f103 020c 	add.w	r2, r3, #12
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ccc:	7812      	ldrb	r2, [r2, #0]
 8002cce:	b2d2      	uxtb	r2, r2
 8002cd0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cd6:	1c5a      	adds	r2, r3, #1
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002ce0:	b29b      	uxth	r3, r3
 8002ce2:	3b01      	subs	r3, #1
 8002ce4:	b29a      	uxth	r2, r3
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002cea:	e011      	b.n	8002d10 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002cec:	f7fe fdec 	bl	80018c8 <HAL_GetTick>
 8002cf0:	4602      	mov	r2, r0
 8002cf2:	693b      	ldr	r3, [r7, #16]
 8002cf4:	1ad3      	subs	r3, r2, r3
 8002cf6:	683a      	ldr	r2, [r7, #0]
 8002cf8:	429a      	cmp	r2, r3
 8002cfa:	d803      	bhi.n	8002d04 <HAL_SPI_Receive+0x166>
 8002cfc:	683b      	ldr	r3, [r7, #0]
 8002cfe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d02:	d102      	bne.n	8002d0a <HAL_SPI_Receive+0x16c>
 8002d04:	683b      	ldr	r3, [r7, #0]
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d102      	bne.n	8002d10 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8002d0a:	2303      	movs	r3, #3
 8002d0c:	75fb      	strb	r3, [r7, #23]
          goto error;
 8002d0e:	e04a      	b.n	8002da6 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002d14:	b29b      	uxth	r3, r3
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d1cb      	bne.n	8002cb2 <HAL_SPI_Receive+0x114>
 8002d1a:	e031      	b.n	8002d80 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	689b      	ldr	r3, [r3, #8]
 8002d22:	f003 0301 	and.w	r3, r3, #1
 8002d26:	2b01      	cmp	r3, #1
 8002d28:	d113      	bne.n	8002d52 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	68da      	ldr	r2, [r3, #12]
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d34:	b292      	uxth	r2, r2
 8002d36:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d3c:	1c9a      	adds	r2, r3, #2
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002d46:	b29b      	uxth	r3, r3
 8002d48:	3b01      	subs	r3, #1
 8002d4a:	b29a      	uxth	r2, r3
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002d50:	e011      	b.n	8002d76 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002d52:	f7fe fdb9 	bl	80018c8 <HAL_GetTick>
 8002d56:	4602      	mov	r2, r0
 8002d58:	693b      	ldr	r3, [r7, #16]
 8002d5a:	1ad3      	subs	r3, r2, r3
 8002d5c:	683a      	ldr	r2, [r7, #0]
 8002d5e:	429a      	cmp	r2, r3
 8002d60:	d803      	bhi.n	8002d6a <HAL_SPI_Receive+0x1cc>
 8002d62:	683b      	ldr	r3, [r7, #0]
 8002d64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d68:	d102      	bne.n	8002d70 <HAL_SPI_Receive+0x1d2>
 8002d6a:	683b      	ldr	r3, [r7, #0]
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d102      	bne.n	8002d76 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8002d70:	2303      	movs	r3, #3
 8002d72:	75fb      	strb	r3, [r7, #23]
          goto error;
 8002d74:	e017      	b.n	8002da6 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002d7a:	b29b      	uxth	r3, r3
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d1cd      	bne.n	8002d1c <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002d80:	693a      	ldr	r2, [r7, #16]
 8002d82:	6839      	ldr	r1, [r7, #0]
 8002d84:	68f8      	ldr	r0, [r7, #12]
 8002d86:	f000 fb63 	bl	8003450 <SPI_EndRxTransaction>
 8002d8a:	4603      	mov	r3, r0
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d002      	beq.n	8002d96 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	2220      	movs	r2, #32
 8002d94:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d002      	beq.n	8002da4 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8002d9e:	2301      	movs	r3, #1
 8002da0:	75fb      	strb	r3, [r7, #23]
 8002da2:	e000      	b.n	8002da6 <HAL_SPI_Receive+0x208>
  }

error :
 8002da4:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	2201      	movs	r2, #1
 8002daa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	2200      	movs	r2, #0
 8002db2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002db6:	7dfb      	ldrb	r3, [r7, #23]
}
 8002db8:	4618      	mov	r0, r3
 8002dba:	3718      	adds	r7, #24
 8002dbc:	46bd      	mov	sp, r7
 8002dbe:	bd80      	pop	{r7, pc}

08002dc0 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	b08c      	sub	sp, #48	; 0x30
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	60f8      	str	r0, [r7, #12]
 8002dc8:	60b9      	str	r1, [r7, #8]
 8002dca:	607a      	str	r2, [r7, #4]
 8002dcc:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002dce:	2301      	movs	r3, #1
 8002dd0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002dd2:	2300      	movs	r3, #0
 8002dd4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002dde:	2b01      	cmp	r3, #1
 8002de0:	d101      	bne.n	8002de6 <HAL_SPI_TransmitReceive+0x26>
 8002de2:	2302      	movs	r3, #2
 8002de4:	e18a      	b.n	80030fc <HAL_SPI_TransmitReceive+0x33c>
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	2201      	movs	r2, #1
 8002dea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002dee:	f7fe fd6b 	bl	80018c8 <HAL_GetTick>
 8002df2:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002dfa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	685b      	ldr	r3, [r3, #4]
 8002e02:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8002e04:	887b      	ldrh	r3, [r7, #2]
 8002e06:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002e08:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002e0c:	2b01      	cmp	r3, #1
 8002e0e:	d00f      	beq.n	8002e30 <HAL_SPI_TransmitReceive+0x70>
 8002e10:	69fb      	ldr	r3, [r7, #28]
 8002e12:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002e16:	d107      	bne.n	8002e28 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	689b      	ldr	r3, [r3, #8]
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d103      	bne.n	8002e28 <HAL_SPI_TransmitReceive+0x68>
 8002e20:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002e24:	2b04      	cmp	r3, #4
 8002e26:	d003      	beq.n	8002e30 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8002e28:	2302      	movs	r3, #2
 8002e2a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002e2e:	e15b      	b.n	80030e8 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002e30:	68bb      	ldr	r3, [r7, #8]
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d005      	beq.n	8002e42 <HAL_SPI_TransmitReceive+0x82>
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d002      	beq.n	8002e42 <HAL_SPI_TransmitReceive+0x82>
 8002e3c:	887b      	ldrh	r3, [r7, #2]
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d103      	bne.n	8002e4a <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8002e42:	2301      	movs	r3, #1
 8002e44:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002e48:	e14e      	b.n	80030e8 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002e50:	b2db      	uxtb	r3, r3
 8002e52:	2b04      	cmp	r3, #4
 8002e54:	d003      	beq.n	8002e5e <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	2205      	movs	r2, #5
 8002e5a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	2200      	movs	r2, #0
 8002e62:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	687a      	ldr	r2, [r7, #4]
 8002e68:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	887a      	ldrh	r2, [r7, #2]
 8002e6e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	887a      	ldrh	r2, [r7, #2]
 8002e74:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	68ba      	ldr	r2, [r7, #8]
 8002e7a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	887a      	ldrh	r2, [r7, #2]
 8002e80:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	887a      	ldrh	r2, [r7, #2]
 8002e86:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	2200      	movs	r2, #0
 8002e92:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e9e:	2b40      	cmp	r3, #64	; 0x40
 8002ea0:	d007      	beq.n	8002eb2 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	681a      	ldr	r2, [r3, #0]
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002eb0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	68db      	ldr	r3, [r3, #12]
 8002eb6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002eba:	d178      	bne.n	8002fae <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	685b      	ldr	r3, [r3, #4]
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d002      	beq.n	8002eca <HAL_SPI_TransmitReceive+0x10a>
 8002ec4:	8b7b      	ldrh	r3, [r7, #26]
 8002ec6:	2b01      	cmp	r3, #1
 8002ec8:	d166      	bne.n	8002f98 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ece:	881a      	ldrh	r2, [r3, #0]
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eda:	1c9a      	adds	r2, r3, #2
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002ee4:	b29b      	uxth	r3, r3
 8002ee6:	3b01      	subs	r3, #1
 8002ee8:	b29a      	uxth	r2, r3
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002eee:	e053      	b.n	8002f98 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	689b      	ldr	r3, [r3, #8]
 8002ef6:	f003 0302 	and.w	r3, r3, #2
 8002efa:	2b02      	cmp	r3, #2
 8002efc:	d11b      	bne.n	8002f36 <HAL_SPI_TransmitReceive+0x176>
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002f02:	b29b      	uxth	r3, r3
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d016      	beq.n	8002f36 <HAL_SPI_TransmitReceive+0x176>
 8002f08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f0a:	2b01      	cmp	r3, #1
 8002f0c:	d113      	bne.n	8002f36 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f12:	881a      	ldrh	r2, [r3, #0]
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f1e:	1c9a      	adds	r2, r3, #2
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002f28:	b29b      	uxth	r3, r3
 8002f2a:	3b01      	subs	r3, #1
 8002f2c:	b29a      	uxth	r2, r3
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002f32:	2300      	movs	r3, #0
 8002f34:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	689b      	ldr	r3, [r3, #8]
 8002f3c:	f003 0301 	and.w	r3, r3, #1
 8002f40:	2b01      	cmp	r3, #1
 8002f42:	d119      	bne.n	8002f78 <HAL_SPI_TransmitReceive+0x1b8>
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002f48:	b29b      	uxth	r3, r3
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d014      	beq.n	8002f78 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	68da      	ldr	r2, [r3, #12]
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f58:	b292      	uxth	r2, r2
 8002f5a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f60:	1c9a      	adds	r2, r3, #2
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002f6a:	b29b      	uxth	r3, r3
 8002f6c:	3b01      	subs	r3, #1
 8002f6e:	b29a      	uxth	r2, r3
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002f74:	2301      	movs	r3, #1
 8002f76:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002f78:	f7fe fca6 	bl	80018c8 <HAL_GetTick>
 8002f7c:	4602      	mov	r2, r0
 8002f7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f80:	1ad3      	subs	r3, r2, r3
 8002f82:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002f84:	429a      	cmp	r2, r3
 8002f86:	d807      	bhi.n	8002f98 <HAL_SPI_TransmitReceive+0x1d8>
 8002f88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f8e:	d003      	beq.n	8002f98 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8002f90:	2303      	movs	r3, #3
 8002f92:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002f96:	e0a7      	b.n	80030e8 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002f9c:	b29b      	uxth	r3, r3
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d1a6      	bne.n	8002ef0 <HAL_SPI_TransmitReceive+0x130>
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002fa6:	b29b      	uxth	r3, r3
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d1a1      	bne.n	8002ef0 <HAL_SPI_TransmitReceive+0x130>
 8002fac:	e07c      	b.n	80030a8 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	685b      	ldr	r3, [r3, #4]
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d002      	beq.n	8002fbc <HAL_SPI_TransmitReceive+0x1fc>
 8002fb6:	8b7b      	ldrh	r3, [r7, #26]
 8002fb8:	2b01      	cmp	r3, #1
 8002fba:	d16b      	bne.n	8003094 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	330c      	adds	r3, #12
 8002fc6:	7812      	ldrb	r2, [r2, #0]
 8002fc8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fce:	1c5a      	adds	r2, r3, #1
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002fd8:	b29b      	uxth	r3, r3
 8002fda:	3b01      	subs	r3, #1
 8002fdc:	b29a      	uxth	r2, r3
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002fe2:	e057      	b.n	8003094 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	689b      	ldr	r3, [r3, #8]
 8002fea:	f003 0302 	and.w	r3, r3, #2
 8002fee:	2b02      	cmp	r3, #2
 8002ff0:	d11c      	bne.n	800302c <HAL_SPI_TransmitReceive+0x26c>
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002ff6:	b29b      	uxth	r3, r3
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d017      	beq.n	800302c <HAL_SPI_TransmitReceive+0x26c>
 8002ffc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ffe:	2b01      	cmp	r3, #1
 8003000:	d114      	bne.n	800302c <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	330c      	adds	r3, #12
 800300c:	7812      	ldrb	r2, [r2, #0]
 800300e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003014:	1c5a      	adds	r2, r3, #1
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800301e:	b29b      	uxth	r3, r3
 8003020:	3b01      	subs	r3, #1
 8003022:	b29a      	uxth	r2, r3
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003028:	2300      	movs	r3, #0
 800302a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	689b      	ldr	r3, [r3, #8]
 8003032:	f003 0301 	and.w	r3, r3, #1
 8003036:	2b01      	cmp	r3, #1
 8003038:	d119      	bne.n	800306e <HAL_SPI_TransmitReceive+0x2ae>
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800303e:	b29b      	uxth	r3, r3
 8003040:	2b00      	cmp	r3, #0
 8003042:	d014      	beq.n	800306e <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	68da      	ldr	r2, [r3, #12]
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800304e:	b2d2      	uxtb	r2, r2
 8003050:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003056:	1c5a      	adds	r2, r3, #1
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003060:	b29b      	uxth	r3, r3
 8003062:	3b01      	subs	r3, #1
 8003064:	b29a      	uxth	r2, r3
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800306a:	2301      	movs	r3, #1
 800306c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800306e:	f7fe fc2b 	bl	80018c8 <HAL_GetTick>
 8003072:	4602      	mov	r2, r0
 8003074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003076:	1ad3      	subs	r3, r2, r3
 8003078:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800307a:	429a      	cmp	r2, r3
 800307c:	d803      	bhi.n	8003086 <HAL_SPI_TransmitReceive+0x2c6>
 800307e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003080:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003084:	d102      	bne.n	800308c <HAL_SPI_TransmitReceive+0x2cc>
 8003086:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003088:	2b00      	cmp	r3, #0
 800308a:	d103      	bne.n	8003094 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800308c:	2303      	movs	r3, #3
 800308e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003092:	e029      	b.n	80030e8 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003098:	b29b      	uxth	r3, r3
 800309a:	2b00      	cmp	r3, #0
 800309c:	d1a2      	bne.n	8002fe4 <HAL_SPI_TransmitReceive+0x224>
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80030a2:	b29b      	uxth	r3, r3
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d19d      	bne.n	8002fe4 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80030a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030aa:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80030ac:	68f8      	ldr	r0, [r7, #12]
 80030ae:	f000 fa35 	bl	800351c <SPI_EndRxTxTransaction>
 80030b2:	4603      	mov	r3, r0
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d006      	beq.n	80030c6 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80030b8:	2301      	movs	r3, #1
 80030ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	2220      	movs	r2, #32
 80030c2:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80030c4:	e010      	b.n	80030e8 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	689b      	ldr	r3, [r3, #8]
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d10b      	bne.n	80030e6 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80030ce:	2300      	movs	r3, #0
 80030d0:	617b      	str	r3, [r7, #20]
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	68db      	ldr	r3, [r3, #12]
 80030d8:	617b      	str	r3, [r7, #20]
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	689b      	ldr	r3, [r3, #8]
 80030e0:	617b      	str	r3, [r7, #20]
 80030e2:	697b      	ldr	r3, [r7, #20]
 80030e4:	e000      	b.n	80030e8 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80030e6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	2201      	movs	r2, #1
 80030ec:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	2200      	movs	r2, #0
 80030f4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80030f8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80030fc:	4618      	mov	r0, r3
 80030fe:	3730      	adds	r7, #48	; 0x30
 8003100:	46bd      	mov	sp, r7
 8003102:	bd80      	pop	{r7, pc}

08003104 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8003104:	b580      	push	{r7, lr}
 8003106:	b088      	sub	sp, #32
 8003108:	af00      	add	r7, sp, #0
 800310a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	685b      	ldr	r3, [r3, #4]
 8003112:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	689b      	ldr	r3, [r3, #8]
 800311a:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800311c:	69bb      	ldr	r3, [r7, #24]
 800311e:	099b      	lsrs	r3, r3, #6
 8003120:	f003 0301 	and.w	r3, r3, #1
 8003124:	2b00      	cmp	r3, #0
 8003126:	d10f      	bne.n	8003148 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8003128:	69bb      	ldr	r3, [r7, #24]
 800312a:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800312e:	2b00      	cmp	r3, #0
 8003130:	d00a      	beq.n	8003148 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8003132:	69fb      	ldr	r3, [r7, #28]
 8003134:	099b      	lsrs	r3, r3, #6
 8003136:	f003 0301 	and.w	r3, r3, #1
 800313a:	2b00      	cmp	r3, #0
 800313c:	d004      	beq.n	8003148 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003142:	6878      	ldr	r0, [r7, #4]
 8003144:	4798      	blx	r3
    return;
 8003146:	e0d7      	b.n	80032f8 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8003148:	69bb      	ldr	r3, [r7, #24]
 800314a:	085b      	lsrs	r3, r3, #1
 800314c:	f003 0301 	and.w	r3, r3, #1
 8003150:	2b00      	cmp	r3, #0
 8003152:	d00a      	beq.n	800316a <HAL_SPI_IRQHandler+0x66>
 8003154:	69fb      	ldr	r3, [r7, #28]
 8003156:	09db      	lsrs	r3, r3, #7
 8003158:	f003 0301 	and.w	r3, r3, #1
 800315c:	2b00      	cmp	r3, #0
 800315e:	d004      	beq.n	800316a <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003164:	6878      	ldr	r0, [r7, #4]
 8003166:	4798      	blx	r3
    return;
 8003168:	e0c6      	b.n	80032f8 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800316a:	69bb      	ldr	r3, [r7, #24]
 800316c:	095b      	lsrs	r3, r3, #5
 800316e:	f003 0301 	and.w	r3, r3, #1
 8003172:	2b00      	cmp	r3, #0
 8003174:	d10c      	bne.n	8003190 <HAL_SPI_IRQHandler+0x8c>
 8003176:	69bb      	ldr	r3, [r7, #24]
 8003178:	099b      	lsrs	r3, r3, #6
 800317a:	f003 0301 	and.w	r3, r3, #1
 800317e:	2b00      	cmp	r3, #0
 8003180:	d106      	bne.n	8003190 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8003182:	69bb      	ldr	r3, [r7, #24]
 8003184:	0a1b      	lsrs	r3, r3, #8
 8003186:	f003 0301 	and.w	r3, r3, #1
 800318a:	2b00      	cmp	r3, #0
 800318c:	f000 80b4 	beq.w	80032f8 <HAL_SPI_IRQHandler+0x1f4>
 8003190:	69fb      	ldr	r3, [r7, #28]
 8003192:	095b      	lsrs	r3, r3, #5
 8003194:	f003 0301 	and.w	r3, r3, #1
 8003198:	2b00      	cmp	r3, #0
 800319a:	f000 80ad 	beq.w	80032f8 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800319e:	69bb      	ldr	r3, [r7, #24]
 80031a0:	099b      	lsrs	r3, r3, #6
 80031a2:	f003 0301 	and.w	r3, r3, #1
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d023      	beq.n	80031f2 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80031b0:	b2db      	uxtb	r3, r3
 80031b2:	2b03      	cmp	r3, #3
 80031b4:	d011      	beq.n	80031da <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031ba:	f043 0204 	orr.w	r2, r3, #4
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80031c2:	2300      	movs	r3, #0
 80031c4:	617b      	str	r3, [r7, #20]
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	68db      	ldr	r3, [r3, #12]
 80031cc:	617b      	str	r3, [r7, #20]
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	689b      	ldr	r3, [r3, #8]
 80031d4:	617b      	str	r3, [r7, #20]
 80031d6:	697b      	ldr	r3, [r7, #20]
 80031d8:	e00b      	b.n	80031f2 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80031da:	2300      	movs	r3, #0
 80031dc:	613b      	str	r3, [r7, #16]
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	68db      	ldr	r3, [r3, #12]
 80031e4:	613b      	str	r3, [r7, #16]
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	689b      	ldr	r3, [r3, #8]
 80031ec:	613b      	str	r3, [r7, #16]
 80031ee:	693b      	ldr	r3, [r7, #16]
        return;
 80031f0:	e082      	b.n	80032f8 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80031f2:	69bb      	ldr	r3, [r7, #24]
 80031f4:	095b      	lsrs	r3, r3, #5
 80031f6:	f003 0301 	and.w	r3, r3, #1
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d014      	beq.n	8003228 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003202:	f043 0201 	orr.w	r2, r3, #1
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800320a:	2300      	movs	r3, #0
 800320c:	60fb      	str	r3, [r7, #12]
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	689b      	ldr	r3, [r3, #8]
 8003214:	60fb      	str	r3, [r7, #12]
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	681a      	ldr	r2, [r3, #0]
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003224:	601a      	str	r2, [r3, #0]
 8003226:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8003228:	69bb      	ldr	r3, [r7, #24]
 800322a:	0a1b      	lsrs	r3, r3, #8
 800322c:	f003 0301 	and.w	r3, r3, #1
 8003230:	2b00      	cmp	r3, #0
 8003232:	d00c      	beq.n	800324e <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003238:	f043 0208 	orr.w	r2, r3, #8
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8003240:	2300      	movs	r3, #0
 8003242:	60bb      	str	r3, [r7, #8]
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	689b      	ldr	r3, [r3, #8]
 800324a:	60bb      	str	r3, [r7, #8]
 800324c:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003252:	2b00      	cmp	r3, #0
 8003254:	d04f      	beq.n	80032f6 <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	685a      	ldr	r2, [r3, #4]
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003264:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	2201      	movs	r2, #1
 800326a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800326e:	69fb      	ldr	r3, [r7, #28]
 8003270:	f003 0302 	and.w	r3, r3, #2
 8003274:	2b00      	cmp	r3, #0
 8003276:	d104      	bne.n	8003282 <HAL_SPI_IRQHandler+0x17e>
 8003278:	69fb      	ldr	r3, [r7, #28]
 800327a:	f003 0301 	and.w	r3, r3, #1
 800327e:	2b00      	cmp	r3, #0
 8003280:	d034      	beq.n	80032ec <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	685a      	ldr	r2, [r3, #4]
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f022 0203 	bic.w	r2, r2, #3
 8003290:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003296:	2b00      	cmp	r3, #0
 8003298:	d011      	beq.n	80032be <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800329e:	4a18      	ldr	r2, [pc, #96]	; (8003300 <HAL_SPI_IRQHandler+0x1fc>)
 80032a0:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80032a6:	4618      	mov	r0, r3
 80032a8:	f7fe fc9b 	bl	8001be2 <HAL_DMA_Abort_IT>
 80032ac:	4603      	mov	r3, r0
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d005      	beq.n	80032be <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032b6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d016      	beq.n	80032f4 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80032ca:	4a0d      	ldr	r2, [pc, #52]	; (8003300 <HAL_SPI_IRQHandler+0x1fc>)
 80032cc:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80032d2:	4618      	mov	r0, r3
 80032d4:	f7fe fc85 	bl	8001be2 <HAL_DMA_Abort_IT>
 80032d8:	4603      	mov	r3, r0
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d00a      	beq.n	80032f4 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032e2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 80032ea:	e003      	b.n	80032f4 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 80032ec:	6878      	ldr	r0, [r7, #4]
 80032ee:	f000 f809 	bl	8003304 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80032f2:	e000      	b.n	80032f6 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 80032f4:	bf00      	nop
    return;
 80032f6:	bf00      	nop
  }
}
 80032f8:	3720      	adds	r7, #32
 80032fa:	46bd      	mov	sp, r7
 80032fc:	bd80      	pop	{r7, pc}
 80032fe:	bf00      	nop
 8003300:	08003319 	.word	0x08003319

08003304 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8003304:	b480      	push	{r7}
 8003306:	b083      	sub	sp, #12
 8003308:	af00      	add	r7, sp, #0
 800330a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800330c:	bf00      	nop
 800330e:	370c      	adds	r7, #12
 8003310:	46bd      	mov	sp, r7
 8003312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003316:	4770      	bx	lr

08003318 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003318:	b580      	push	{r7, lr}
 800331a:	b084      	sub	sp, #16
 800331c:	af00      	add	r7, sp, #0
 800331e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003324:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	2200      	movs	r2, #0
 800332a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	2200      	movs	r2, #0
 8003330:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8003332:	68f8      	ldr	r0, [r7, #12]
 8003334:	f7ff ffe6 	bl	8003304 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003338:	bf00      	nop
 800333a:	3710      	adds	r7, #16
 800333c:	46bd      	mov	sp, r7
 800333e:	bd80      	pop	{r7, pc}

08003340 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003340:	b580      	push	{r7, lr}
 8003342:	b088      	sub	sp, #32
 8003344:	af00      	add	r7, sp, #0
 8003346:	60f8      	str	r0, [r7, #12]
 8003348:	60b9      	str	r1, [r7, #8]
 800334a:	603b      	str	r3, [r7, #0]
 800334c:	4613      	mov	r3, r2
 800334e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003350:	f7fe faba 	bl	80018c8 <HAL_GetTick>
 8003354:	4602      	mov	r2, r0
 8003356:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003358:	1a9b      	subs	r3, r3, r2
 800335a:	683a      	ldr	r2, [r7, #0]
 800335c:	4413      	add	r3, r2
 800335e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003360:	f7fe fab2 	bl	80018c8 <HAL_GetTick>
 8003364:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003366:	4b39      	ldr	r3, [pc, #228]	; (800344c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	015b      	lsls	r3, r3, #5
 800336c:	0d1b      	lsrs	r3, r3, #20
 800336e:	69fa      	ldr	r2, [r7, #28]
 8003370:	fb02 f303 	mul.w	r3, r2, r3
 8003374:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003376:	e054      	b.n	8003422 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003378:	683b      	ldr	r3, [r7, #0]
 800337a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800337e:	d050      	beq.n	8003422 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003380:	f7fe faa2 	bl	80018c8 <HAL_GetTick>
 8003384:	4602      	mov	r2, r0
 8003386:	69bb      	ldr	r3, [r7, #24]
 8003388:	1ad3      	subs	r3, r2, r3
 800338a:	69fa      	ldr	r2, [r7, #28]
 800338c:	429a      	cmp	r2, r3
 800338e:	d902      	bls.n	8003396 <SPI_WaitFlagStateUntilTimeout+0x56>
 8003390:	69fb      	ldr	r3, [r7, #28]
 8003392:	2b00      	cmp	r3, #0
 8003394:	d13d      	bne.n	8003412 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	685a      	ldr	r2, [r3, #4]
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80033a4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	685b      	ldr	r3, [r3, #4]
 80033aa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80033ae:	d111      	bne.n	80033d4 <SPI_WaitFlagStateUntilTimeout+0x94>
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	689b      	ldr	r3, [r3, #8]
 80033b4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80033b8:	d004      	beq.n	80033c4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	689b      	ldr	r3, [r3, #8]
 80033be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80033c2:	d107      	bne.n	80033d4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	681a      	ldr	r2, [r3, #0]
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80033d2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033d8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80033dc:	d10f      	bne.n	80033fe <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	681a      	ldr	r2, [r3, #0]
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80033ec:	601a      	str	r2, [r3, #0]
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	681a      	ldr	r2, [r3, #0]
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80033fc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	2201      	movs	r2, #1
 8003402:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	2200      	movs	r2, #0
 800340a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800340e:	2303      	movs	r3, #3
 8003410:	e017      	b.n	8003442 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003412:	697b      	ldr	r3, [r7, #20]
 8003414:	2b00      	cmp	r3, #0
 8003416:	d101      	bne.n	800341c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003418:	2300      	movs	r3, #0
 800341a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800341c:	697b      	ldr	r3, [r7, #20]
 800341e:	3b01      	subs	r3, #1
 8003420:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	689a      	ldr	r2, [r3, #8]
 8003428:	68bb      	ldr	r3, [r7, #8]
 800342a:	4013      	ands	r3, r2
 800342c:	68ba      	ldr	r2, [r7, #8]
 800342e:	429a      	cmp	r2, r3
 8003430:	bf0c      	ite	eq
 8003432:	2301      	moveq	r3, #1
 8003434:	2300      	movne	r3, #0
 8003436:	b2db      	uxtb	r3, r3
 8003438:	461a      	mov	r2, r3
 800343a:	79fb      	ldrb	r3, [r7, #7]
 800343c:	429a      	cmp	r2, r3
 800343e:	d19b      	bne.n	8003378 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003440:	2300      	movs	r3, #0
}
 8003442:	4618      	mov	r0, r3
 8003444:	3720      	adds	r7, #32
 8003446:	46bd      	mov	sp, r7
 8003448:	bd80      	pop	{r7, pc}
 800344a:	bf00      	nop
 800344c:	20000000 	.word	0x20000000

08003450 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003450:	b580      	push	{r7, lr}
 8003452:	b086      	sub	sp, #24
 8003454:	af02      	add	r7, sp, #8
 8003456:	60f8      	str	r0, [r7, #12]
 8003458:	60b9      	str	r1, [r7, #8]
 800345a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	685b      	ldr	r3, [r3, #4]
 8003460:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003464:	d111      	bne.n	800348a <SPI_EndRxTransaction+0x3a>
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	689b      	ldr	r3, [r3, #8]
 800346a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800346e:	d004      	beq.n	800347a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	689b      	ldr	r3, [r3, #8]
 8003474:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003478:	d107      	bne.n	800348a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	681a      	ldr	r2, [r3, #0]
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003488:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	685b      	ldr	r3, [r3, #4]
 800348e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003492:	d12a      	bne.n	80034ea <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	689b      	ldr	r3, [r3, #8]
 8003498:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800349c:	d012      	beq.n	80034c4 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	9300      	str	r3, [sp, #0]
 80034a2:	68bb      	ldr	r3, [r7, #8]
 80034a4:	2200      	movs	r2, #0
 80034a6:	2180      	movs	r1, #128	; 0x80
 80034a8:	68f8      	ldr	r0, [r7, #12]
 80034aa:	f7ff ff49 	bl	8003340 <SPI_WaitFlagStateUntilTimeout>
 80034ae:	4603      	mov	r3, r0
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d02d      	beq.n	8003510 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034b8:	f043 0220 	orr.w	r2, r3, #32
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80034c0:	2303      	movs	r3, #3
 80034c2:	e026      	b.n	8003512 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	9300      	str	r3, [sp, #0]
 80034c8:	68bb      	ldr	r3, [r7, #8]
 80034ca:	2200      	movs	r2, #0
 80034cc:	2101      	movs	r1, #1
 80034ce:	68f8      	ldr	r0, [r7, #12]
 80034d0:	f7ff ff36 	bl	8003340 <SPI_WaitFlagStateUntilTimeout>
 80034d4:	4603      	mov	r3, r0
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d01a      	beq.n	8003510 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034de:	f043 0220 	orr.w	r2, r3, #32
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80034e6:	2303      	movs	r3, #3
 80034e8:	e013      	b.n	8003512 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	9300      	str	r3, [sp, #0]
 80034ee:	68bb      	ldr	r3, [r7, #8]
 80034f0:	2200      	movs	r2, #0
 80034f2:	2101      	movs	r1, #1
 80034f4:	68f8      	ldr	r0, [r7, #12]
 80034f6:	f7ff ff23 	bl	8003340 <SPI_WaitFlagStateUntilTimeout>
 80034fa:	4603      	mov	r3, r0
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d007      	beq.n	8003510 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003504:	f043 0220 	orr.w	r2, r3, #32
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800350c:	2303      	movs	r3, #3
 800350e:	e000      	b.n	8003512 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8003510:	2300      	movs	r3, #0
}
 8003512:	4618      	mov	r0, r3
 8003514:	3710      	adds	r7, #16
 8003516:	46bd      	mov	sp, r7
 8003518:	bd80      	pop	{r7, pc}
	...

0800351c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800351c:	b580      	push	{r7, lr}
 800351e:	b088      	sub	sp, #32
 8003520:	af02      	add	r7, sp, #8
 8003522:	60f8      	str	r0, [r7, #12]
 8003524:	60b9      	str	r1, [r7, #8]
 8003526:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003528:	4b1b      	ldr	r3, [pc, #108]	; (8003598 <SPI_EndRxTxTransaction+0x7c>)
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	4a1b      	ldr	r2, [pc, #108]	; (800359c <SPI_EndRxTxTransaction+0x80>)
 800352e:	fba2 2303 	umull	r2, r3, r2, r3
 8003532:	0d5b      	lsrs	r3, r3, #21
 8003534:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003538:	fb02 f303 	mul.w	r3, r2, r3
 800353c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	685b      	ldr	r3, [r3, #4]
 8003542:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003546:	d112      	bne.n	800356e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	9300      	str	r3, [sp, #0]
 800354c:	68bb      	ldr	r3, [r7, #8]
 800354e:	2200      	movs	r2, #0
 8003550:	2180      	movs	r1, #128	; 0x80
 8003552:	68f8      	ldr	r0, [r7, #12]
 8003554:	f7ff fef4 	bl	8003340 <SPI_WaitFlagStateUntilTimeout>
 8003558:	4603      	mov	r3, r0
 800355a:	2b00      	cmp	r3, #0
 800355c:	d016      	beq.n	800358c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003562:	f043 0220 	orr.w	r2, r3, #32
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800356a:	2303      	movs	r3, #3
 800356c:	e00f      	b.n	800358e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800356e:	697b      	ldr	r3, [r7, #20]
 8003570:	2b00      	cmp	r3, #0
 8003572:	d00a      	beq.n	800358a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8003574:	697b      	ldr	r3, [r7, #20]
 8003576:	3b01      	subs	r3, #1
 8003578:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	689b      	ldr	r3, [r3, #8]
 8003580:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003584:	2b80      	cmp	r3, #128	; 0x80
 8003586:	d0f2      	beq.n	800356e <SPI_EndRxTxTransaction+0x52>
 8003588:	e000      	b.n	800358c <SPI_EndRxTxTransaction+0x70>
        break;
 800358a:	bf00      	nop
  }

  return HAL_OK;
 800358c:	2300      	movs	r3, #0
}
 800358e:	4618      	mov	r0, r3
 8003590:	3718      	adds	r7, #24
 8003592:	46bd      	mov	sp, r7
 8003594:	bd80      	pop	{r7, pc}
 8003596:	bf00      	nop
 8003598:	20000000 	.word	0x20000000
 800359c:	165e9f81 	.word	0x165e9f81

080035a0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80035a0:	b580      	push	{r7, lr}
 80035a2:	b082      	sub	sp, #8
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d101      	bne.n	80035b2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80035ae:	2301      	movs	r3, #1
 80035b0:	e03f      	b.n	8003632 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035b8:	b2db      	uxtb	r3, r3
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d106      	bne.n	80035cc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	2200      	movs	r2, #0
 80035c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80035c6:	6878      	ldr	r0, [r7, #4]
 80035c8:	f7fd ff88 	bl	80014dc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	2224      	movs	r2, #36	; 0x24
 80035d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	68da      	ldr	r2, [r3, #12]
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80035e2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80035e4:	6878      	ldr	r0, [r7, #4]
 80035e6:	f000 fc7b 	bl	8003ee0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	691a      	ldr	r2, [r3, #16]
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80035f8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	695a      	ldr	r2, [r3, #20]
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003608:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	68da      	ldr	r2, [r3, #12]
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003618:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	2200      	movs	r2, #0
 800361e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	2220      	movs	r2, #32
 8003624:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	2220      	movs	r2, #32
 800362c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003630:	2300      	movs	r3, #0
}
 8003632:	4618      	mov	r0, r3
 8003634:	3708      	adds	r7, #8
 8003636:	46bd      	mov	sp, r7
 8003638:	bd80      	pop	{r7, pc}
	...

0800363c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800363c:	b580      	push	{r7, lr}
 800363e:	b0ba      	sub	sp, #232	; 0xe8
 8003640:	af00      	add	r7, sp, #0
 8003642:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	68db      	ldr	r3, [r3, #12]
 8003654:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	695b      	ldr	r3, [r3, #20]
 800365e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8003662:	2300      	movs	r3, #0
 8003664:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8003668:	2300      	movs	r3, #0
 800366a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800366e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003672:	f003 030f 	and.w	r3, r3, #15
 8003676:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800367a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800367e:	2b00      	cmp	r3, #0
 8003680:	d10f      	bne.n	80036a2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003682:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003686:	f003 0320 	and.w	r3, r3, #32
 800368a:	2b00      	cmp	r3, #0
 800368c:	d009      	beq.n	80036a2 <HAL_UART_IRQHandler+0x66>
 800368e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003692:	f003 0320 	and.w	r3, r3, #32
 8003696:	2b00      	cmp	r3, #0
 8003698:	d003      	beq.n	80036a2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800369a:	6878      	ldr	r0, [r7, #4]
 800369c:	f000 fb65 	bl	8003d6a <UART_Receive_IT>
      return;
 80036a0:	e256      	b.n	8003b50 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80036a2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	f000 80de 	beq.w	8003868 <HAL_UART_IRQHandler+0x22c>
 80036ac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80036b0:	f003 0301 	and.w	r3, r3, #1
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d106      	bne.n	80036c6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80036b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80036bc:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	f000 80d1 	beq.w	8003868 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80036c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80036ca:	f003 0301 	and.w	r3, r3, #1
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d00b      	beq.n	80036ea <HAL_UART_IRQHandler+0xae>
 80036d2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80036d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d005      	beq.n	80036ea <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036e2:	f043 0201 	orr.w	r2, r3, #1
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80036ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80036ee:	f003 0304 	and.w	r3, r3, #4
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d00b      	beq.n	800370e <HAL_UART_IRQHandler+0xd2>
 80036f6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80036fa:	f003 0301 	and.w	r3, r3, #1
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d005      	beq.n	800370e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003706:	f043 0202 	orr.w	r2, r3, #2
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800370e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003712:	f003 0302 	and.w	r3, r3, #2
 8003716:	2b00      	cmp	r3, #0
 8003718:	d00b      	beq.n	8003732 <HAL_UART_IRQHandler+0xf6>
 800371a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800371e:	f003 0301 	and.w	r3, r3, #1
 8003722:	2b00      	cmp	r3, #0
 8003724:	d005      	beq.n	8003732 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800372a:	f043 0204 	orr.w	r2, r3, #4
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003732:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003736:	f003 0308 	and.w	r3, r3, #8
 800373a:	2b00      	cmp	r3, #0
 800373c:	d011      	beq.n	8003762 <HAL_UART_IRQHandler+0x126>
 800373e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003742:	f003 0320 	and.w	r3, r3, #32
 8003746:	2b00      	cmp	r3, #0
 8003748:	d105      	bne.n	8003756 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800374a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800374e:	f003 0301 	and.w	r3, r3, #1
 8003752:	2b00      	cmp	r3, #0
 8003754:	d005      	beq.n	8003762 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800375a:	f043 0208 	orr.w	r2, r3, #8
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003766:	2b00      	cmp	r3, #0
 8003768:	f000 81ed 	beq.w	8003b46 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800376c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003770:	f003 0320 	and.w	r3, r3, #32
 8003774:	2b00      	cmp	r3, #0
 8003776:	d008      	beq.n	800378a <HAL_UART_IRQHandler+0x14e>
 8003778:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800377c:	f003 0320 	and.w	r3, r3, #32
 8003780:	2b00      	cmp	r3, #0
 8003782:	d002      	beq.n	800378a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003784:	6878      	ldr	r0, [r7, #4]
 8003786:	f000 faf0 	bl	8003d6a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	695b      	ldr	r3, [r3, #20]
 8003790:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003794:	2b40      	cmp	r3, #64	; 0x40
 8003796:	bf0c      	ite	eq
 8003798:	2301      	moveq	r3, #1
 800379a:	2300      	movne	r3, #0
 800379c:	b2db      	uxtb	r3, r3
 800379e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037a6:	f003 0308 	and.w	r3, r3, #8
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d103      	bne.n	80037b6 <HAL_UART_IRQHandler+0x17a>
 80037ae:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d04f      	beq.n	8003856 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80037b6:	6878      	ldr	r0, [r7, #4]
 80037b8:	f000 f9f8 	bl	8003bac <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	695b      	ldr	r3, [r3, #20]
 80037c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037c6:	2b40      	cmp	r3, #64	; 0x40
 80037c8:	d141      	bne.n	800384e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	3314      	adds	r3, #20
 80037d0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037d4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80037d8:	e853 3f00 	ldrex	r3, [r3]
 80037dc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80037e0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80037e4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80037e8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	3314      	adds	r3, #20
 80037f2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80037f6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80037fa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037fe:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003802:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003806:	e841 2300 	strex	r3, r2, [r1]
 800380a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800380e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003812:	2b00      	cmp	r3, #0
 8003814:	d1d9      	bne.n	80037ca <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800381a:	2b00      	cmp	r3, #0
 800381c:	d013      	beq.n	8003846 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003822:	4a7d      	ldr	r2, [pc, #500]	; (8003a18 <HAL_UART_IRQHandler+0x3dc>)
 8003824:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800382a:	4618      	mov	r0, r3
 800382c:	f7fe f9d9 	bl	8001be2 <HAL_DMA_Abort_IT>
 8003830:	4603      	mov	r3, r0
 8003832:	2b00      	cmp	r3, #0
 8003834:	d016      	beq.n	8003864 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800383a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800383c:	687a      	ldr	r2, [r7, #4]
 800383e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003840:	4610      	mov	r0, r2
 8003842:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003844:	e00e      	b.n	8003864 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003846:	6878      	ldr	r0, [r7, #4]
 8003848:	f000 f99a 	bl	8003b80 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800384c:	e00a      	b.n	8003864 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800384e:	6878      	ldr	r0, [r7, #4]
 8003850:	f000 f996 	bl	8003b80 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003854:	e006      	b.n	8003864 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003856:	6878      	ldr	r0, [r7, #4]
 8003858:	f000 f992 	bl	8003b80 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	2200      	movs	r2, #0
 8003860:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8003862:	e170      	b.n	8003b46 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003864:	bf00      	nop
    return;
 8003866:	e16e      	b.n	8003b46 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800386c:	2b01      	cmp	r3, #1
 800386e:	f040 814a 	bne.w	8003b06 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003872:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003876:	f003 0310 	and.w	r3, r3, #16
 800387a:	2b00      	cmp	r3, #0
 800387c:	f000 8143 	beq.w	8003b06 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003880:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003884:	f003 0310 	and.w	r3, r3, #16
 8003888:	2b00      	cmp	r3, #0
 800388a:	f000 813c 	beq.w	8003b06 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800388e:	2300      	movs	r3, #0
 8003890:	60bb      	str	r3, [r7, #8]
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	60bb      	str	r3, [r7, #8]
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	685b      	ldr	r3, [r3, #4]
 80038a0:	60bb      	str	r3, [r7, #8]
 80038a2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	695b      	ldr	r3, [r3, #20]
 80038aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038ae:	2b40      	cmp	r3, #64	; 0x40
 80038b0:	f040 80b4 	bne.w	8003a1c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	685b      	ldr	r3, [r3, #4]
 80038bc:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80038c0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	f000 8140 	beq.w	8003b4a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80038ce:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80038d2:	429a      	cmp	r2, r3
 80038d4:	f080 8139 	bcs.w	8003b4a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80038de:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038e4:	69db      	ldr	r3, [r3, #28]
 80038e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80038ea:	f000 8088 	beq.w	80039fe <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	330c      	adds	r3, #12
 80038f4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038f8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80038fc:	e853 3f00 	ldrex	r3, [r3]
 8003900:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003904:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003908:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800390c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	330c      	adds	r3, #12
 8003916:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800391a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800391e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003922:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003926:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800392a:	e841 2300 	strex	r3, r2, [r1]
 800392e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003932:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003936:	2b00      	cmp	r3, #0
 8003938:	d1d9      	bne.n	80038ee <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	3314      	adds	r3, #20
 8003940:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003942:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003944:	e853 3f00 	ldrex	r3, [r3]
 8003948:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800394a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800394c:	f023 0301 	bic.w	r3, r3, #1
 8003950:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	3314      	adds	r3, #20
 800395a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800395e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003962:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003964:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003966:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800396a:	e841 2300 	strex	r3, r2, [r1]
 800396e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003970:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003972:	2b00      	cmp	r3, #0
 8003974:	d1e1      	bne.n	800393a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	3314      	adds	r3, #20
 800397c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800397e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003980:	e853 3f00 	ldrex	r3, [r3]
 8003984:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003986:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003988:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800398c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	3314      	adds	r3, #20
 8003996:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800399a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800399c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800399e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80039a0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80039a2:	e841 2300 	strex	r3, r2, [r1]
 80039a6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80039a8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d1e3      	bne.n	8003976 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	2220      	movs	r2, #32
 80039b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	2200      	movs	r2, #0
 80039ba:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	330c      	adds	r3, #12
 80039c2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80039c6:	e853 3f00 	ldrex	r3, [r3]
 80039ca:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80039cc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80039ce:	f023 0310 	bic.w	r3, r3, #16
 80039d2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	330c      	adds	r3, #12
 80039dc:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80039e0:	65ba      	str	r2, [r7, #88]	; 0x58
 80039e2:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039e4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80039e6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80039e8:	e841 2300 	strex	r3, r2, [r1]
 80039ec:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80039ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d1e3      	bne.n	80039bc <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039f8:	4618      	mov	r0, r3
 80039fa:	f7fe f882 	bl	8001b02 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003a06:	b29b      	uxth	r3, r3
 8003a08:	1ad3      	subs	r3, r2, r3
 8003a0a:	b29b      	uxth	r3, r3
 8003a0c:	4619      	mov	r1, r3
 8003a0e:	6878      	ldr	r0, [r7, #4]
 8003a10:	f000 f8c0 	bl	8003b94 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003a14:	e099      	b.n	8003b4a <HAL_UART_IRQHandler+0x50e>
 8003a16:	bf00      	nop
 8003a18:	08003c73 	.word	0x08003c73
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003a24:	b29b      	uxth	r3, r3
 8003a26:	1ad3      	subs	r3, r2, r3
 8003a28:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003a30:	b29b      	uxth	r3, r3
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	f000 808b 	beq.w	8003b4e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8003a38:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	f000 8086 	beq.w	8003b4e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	330c      	adds	r3, #12
 8003a48:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a4c:	e853 3f00 	ldrex	r3, [r3]
 8003a50:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003a52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a54:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003a58:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	330c      	adds	r3, #12
 8003a62:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8003a66:	647a      	str	r2, [r7, #68]	; 0x44
 8003a68:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a6a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003a6c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003a6e:	e841 2300 	strex	r3, r2, [r1]
 8003a72:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003a74:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d1e3      	bne.n	8003a42 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	3314      	adds	r3, #20
 8003a80:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a84:	e853 3f00 	ldrex	r3, [r3]
 8003a88:	623b      	str	r3, [r7, #32]
   return(result);
 8003a8a:	6a3b      	ldr	r3, [r7, #32]
 8003a8c:	f023 0301 	bic.w	r3, r3, #1
 8003a90:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	3314      	adds	r3, #20
 8003a9a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003a9e:	633a      	str	r2, [r7, #48]	; 0x30
 8003aa0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003aa2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003aa4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003aa6:	e841 2300 	strex	r3, r2, [r1]
 8003aaa:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003aac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d1e3      	bne.n	8003a7a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	2220      	movs	r2, #32
 8003ab6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	2200      	movs	r2, #0
 8003abe:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	330c      	adds	r3, #12
 8003ac6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ac8:	693b      	ldr	r3, [r7, #16]
 8003aca:	e853 3f00 	ldrex	r3, [r3]
 8003ace:	60fb      	str	r3, [r7, #12]
   return(result);
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	f023 0310 	bic.w	r3, r3, #16
 8003ad6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	330c      	adds	r3, #12
 8003ae0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003ae4:	61fa      	str	r2, [r7, #28]
 8003ae6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ae8:	69b9      	ldr	r1, [r7, #24]
 8003aea:	69fa      	ldr	r2, [r7, #28]
 8003aec:	e841 2300 	strex	r3, r2, [r1]
 8003af0:	617b      	str	r3, [r7, #20]
   return(result);
 8003af2:	697b      	ldr	r3, [r7, #20]
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d1e3      	bne.n	8003ac0 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003af8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003afc:	4619      	mov	r1, r3
 8003afe:	6878      	ldr	r0, [r7, #4]
 8003b00:	f000 f848 	bl	8003b94 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003b04:	e023      	b.n	8003b4e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003b06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d009      	beq.n	8003b26 <HAL_UART_IRQHandler+0x4ea>
 8003b12:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003b16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d003      	beq.n	8003b26 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8003b1e:	6878      	ldr	r0, [r7, #4]
 8003b20:	f000 f8bb 	bl	8003c9a <UART_Transmit_IT>
    return;
 8003b24:	e014      	b.n	8003b50 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003b26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d00e      	beq.n	8003b50 <HAL_UART_IRQHandler+0x514>
 8003b32:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003b36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d008      	beq.n	8003b50 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8003b3e:	6878      	ldr	r0, [r7, #4]
 8003b40:	f000 f8fb 	bl	8003d3a <UART_EndTransmit_IT>
    return;
 8003b44:	e004      	b.n	8003b50 <HAL_UART_IRQHandler+0x514>
    return;
 8003b46:	bf00      	nop
 8003b48:	e002      	b.n	8003b50 <HAL_UART_IRQHandler+0x514>
      return;
 8003b4a:	bf00      	nop
 8003b4c:	e000      	b.n	8003b50 <HAL_UART_IRQHandler+0x514>
      return;
 8003b4e:	bf00      	nop
  }
}
 8003b50:	37e8      	adds	r7, #232	; 0xe8
 8003b52:	46bd      	mov	sp, r7
 8003b54:	bd80      	pop	{r7, pc}
 8003b56:	bf00      	nop

08003b58 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003b58:	b480      	push	{r7}
 8003b5a:	b083      	sub	sp, #12
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003b60:	bf00      	nop
 8003b62:	370c      	adds	r7, #12
 8003b64:	46bd      	mov	sp, r7
 8003b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b6a:	4770      	bx	lr

08003b6c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003b6c:	b480      	push	{r7}
 8003b6e:	b083      	sub	sp, #12
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003b74:	bf00      	nop
 8003b76:	370c      	adds	r7, #12
 8003b78:	46bd      	mov	sp, r7
 8003b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b7e:	4770      	bx	lr

08003b80 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003b80:	b480      	push	{r7}
 8003b82:	b083      	sub	sp, #12
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003b88:	bf00      	nop
 8003b8a:	370c      	adds	r7, #12
 8003b8c:	46bd      	mov	sp, r7
 8003b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b92:	4770      	bx	lr

08003b94 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003b94:	b480      	push	{r7}
 8003b96:	b083      	sub	sp, #12
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	6078      	str	r0, [r7, #4]
 8003b9c:	460b      	mov	r3, r1
 8003b9e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003ba0:	bf00      	nop
 8003ba2:	370c      	adds	r7, #12
 8003ba4:	46bd      	mov	sp, r7
 8003ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003baa:	4770      	bx	lr

08003bac <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003bac:	b480      	push	{r7}
 8003bae:	b095      	sub	sp, #84	; 0x54
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	330c      	adds	r3, #12
 8003bba:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bbc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003bbe:	e853 3f00 	ldrex	r3, [r3]
 8003bc2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003bc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bc6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003bca:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	330c      	adds	r3, #12
 8003bd2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003bd4:	643a      	str	r2, [r7, #64]	; 0x40
 8003bd6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bd8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003bda:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003bdc:	e841 2300 	strex	r3, r2, [r1]
 8003be0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003be2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d1e5      	bne.n	8003bb4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	3314      	adds	r3, #20
 8003bee:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bf0:	6a3b      	ldr	r3, [r7, #32]
 8003bf2:	e853 3f00 	ldrex	r3, [r3]
 8003bf6:	61fb      	str	r3, [r7, #28]
   return(result);
 8003bf8:	69fb      	ldr	r3, [r7, #28]
 8003bfa:	f023 0301 	bic.w	r3, r3, #1
 8003bfe:	64bb      	str	r3, [r7, #72]	; 0x48
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	3314      	adds	r3, #20
 8003c06:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003c08:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003c0a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c0c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003c0e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003c10:	e841 2300 	strex	r3, r2, [r1]
 8003c14:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003c16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d1e5      	bne.n	8003be8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c20:	2b01      	cmp	r3, #1
 8003c22:	d119      	bne.n	8003c58 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	330c      	adds	r3, #12
 8003c2a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	e853 3f00 	ldrex	r3, [r3]
 8003c32:	60bb      	str	r3, [r7, #8]
   return(result);
 8003c34:	68bb      	ldr	r3, [r7, #8]
 8003c36:	f023 0310 	bic.w	r3, r3, #16
 8003c3a:	647b      	str	r3, [r7, #68]	; 0x44
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	330c      	adds	r3, #12
 8003c42:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003c44:	61ba      	str	r2, [r7, #24]
 8003c46:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c48:	6979      	ldr	r1, [r7, #20]
 8003c4a:	69ba      	ldr	r2, [r7, #24]
 8003c4c:	e841 2300 	strex	r3, r2, [r1]
 8003c50:	613b      	str	r3, [r7, #16]
   return(result);
 8003c52:	693b      	ldr	r3, [r7, #16]
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d1e5      	bne.n	8003c24 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	2220      	movs	r2, #32
 8003c5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	2200      	movs	r2, #0
 8003c64:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003c66:	bf00      	nop
 8003c68:	3754      	adds	r7, #84	; 0x54
 8003c6a:	46bd      	mov	sp, r7
 8003c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c70:	4770      	bx	lr

08003c72 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003c72:	b580      	push	{r7, lr}
 8003c74:	b084      	sub	sp, #16
 8003c76:	af00      	add	r7, sp, #0
 8003c78:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c7e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	2200      	movs	r2, #0
 8003c84:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	2200      	movs	r2, #0
 8003c8a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003c8c:	68f8      	ldr	r0, [r7, #12]
 8003c8e:	f7ff ff77 	bl	8003b80 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003c92:	bf00      	nop
 8003c94:	3710      	adds	r7, #16
 8003c96:	46bd      	mov	sp, r7
 8003c98:	bd80      	pop	{r7, pc}

08003c9a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003c9a:	b480      	push	{r7}
 8003c9c:	b085      	sub	sp, #20
 8003c9e:	af00      	add	r7, sp, #0
 8003ca0:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ca8:	b2db      	uxtb	r3, r3
 8003caa:	2b21      	cmp	r3, #33	; 0x21
 8003cac:	d13e      	bne.n	8003d2c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	689b      	ldr	r3, [r3, #8]
 8003cb2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003cb6:	d114      	bne.n	8003ce2 <UART_Transmit_IT+0x48>
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	691b      	ldr	r3, [r3, #16]
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d110      	bne.n	8003ce2 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	6a1b      	ldr	r3, [r3, #32]
 8003cc4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	881b      	ldrh	r3, [r3, #0]
 8003cca:	461a      	mov	r2, r3
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003cd4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	6a1b      	ldr	r3, [r3, #32]
 8003cda:	1c9a      	adds	r2, r3, #2
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	621a      	str	r2, [r3, #32]
 8003ce0:	e008      	b.n	8003cf4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	6a1b      	ldr	r3, [r3, #32]
 8003ce6:	1c59      	adds	r1, r3, #1
 8003ce8:	687a      	ldr	r2, [r7, #4]
 8003cea:	6211      	str	r1, [r2, #32]
 8003cec:	781a      	ldrb	r2, [r3, #0]
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003cf8:	b29b      	uxth	r3, r3
 8003cfa:	3b01      	subs	r3, #1
 8003cfc:	b29b      	uxth	r3, r3
 8003cfe:	687a      	ldr	r2, [r7, #4]
 8003d00:	4619      	mov	r1, r3
 8003d02:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d10f      	bne.n	8003d28 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	68da      	ldr	r2, [r3, #12]
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003d16:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	68da      	ldr	r2, [r3, #12]
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003d26:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003d28:	2300      	movs	r3, #0
 8003d2a:	e000      	b.n	8003d2e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003d2c:	2302      	movs	r3, #2
  }
}
 8003d2e:	4618      	mov	r0, r3
 8003d30:	3714      	adds	r7, #20
 8003d32:	46bd      	mov	sp, r7
 8003d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d38:	4770      	bx	lr

08003d3a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003d3a:	b580      	push	{r7, lr}
 8003d3c:	b082      	sub	sp, #8
 8003d3e:	af00      	add	r7, sp, #0
 8003d40:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	68da      	ldr	r2, [r3, #12]
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003d50:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	2220      	movs	r2, #32
 8003d56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003d5a:	6878      	ldr	r0, [r7, #4]
 8003d5c:	f7ff fefc 	bl	8003b58 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003d60:	2300      	movs	r3, #0
}
 8003d62:	4618      	mov	r0, r3
 8003d64:	3708      	adds	r7, #8
 8003d66:	46bd      	mov	sp, r7
 8003d68:	bd80      	pop	{r7, pc}

08003d6a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003d6a:	b580      	push	{r7, lr}
 8003d6c:	b08c      	sub	sp, #48	; 0x30
 8003d6e:	af00      	add	r7, sp, #0
 8003d70:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003d78:	b2db      	uxtb	r3, r3
 8003d7a:	2b22      	cmp	r3, #34	; 0x22
 8003d7c:	f040 80ab 	bne.w	8003ed6 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	689b      	ldr	r3, [r3, #8]
 8003d84:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d88:	d117      	bne.n	8003dba <UART_Receive_IT+0x50>
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	691b      	ldr	r3, [r3, #16]
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d113      	bne.n	8003dba <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003d92:	2300      	movs	r3, #0
 8003d94:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d9a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	685b      	ldr	r3, [r3, #4]
 8003da2:	b29b      	uxth	r3, r3
 8003da4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003da8:	b29a      	uxth	r2, r3
 8003daa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dac:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003db2:	1c9a      	adds	r2, r3, #2
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	629a      	str	r2, [r3, #40]	; 0x28
 8003db8:	e026      	b.n	8003e08 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dbe:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8003dc0:	2300      	movs	r3, #0
 8003dc2:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	689b      	ldr	r3, [r3, #8]
 8003dc8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003dcc:	d007      	beq.n	8003dde <UART_Receive_IT+0x74>
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	689b      	ldr	r3, [r3, #8]
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d10a      	bne.n	8003dec <UART_Receive_IT+0x82>
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	691b      	ldr	r3, [r3, #16]
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d106      	bne.n	8003dec <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	685b      	ldr	r3, [r3, #4]
 8003de4:	b2da      	uxtb	r2, r3
 8003de6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003de8:	701a      	strb	r2, [r3, #0]
 8003dea:	e008      	b.n	8003dfe <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	685b      	ldr	r3, [r3, #4]
 8003df2:	b2db      	uxtb	r3, r3
 8003df4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003df8:	b2da      	uxtb	r2, r3
 8003dfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003dfc:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e02:	1c5a      	adds	r2, r3, #1
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003e0c:	b29b      	uxth	r3, r3
 8003e0e:	3b01      	subs	r3, #1
 8003e10:	b29b      	uxth	r3, r3
 8003e12:	687a      	ldr	r2, [r7, #4]
 8003e14:	4619      	mov	r1, r3
 8003e16:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d15a      	bne.n	8003ed2 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	68da      	ldr	r2, [r3, #12]
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f022 0220 	bic.w	r2, r2, #32
 8003e2a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	68da      	ldr	r2, [r3, #12]
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003e3a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	695a      	ldr	r2, [r3, #20]
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f022 0201 	bic.w	r2, r2, #1
 8003e4a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	2220      	movs	r2, #32
 8003e50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e58:	2b01      	cmp	r3, #1
 8003e5a:	d135      	bne.n	8003ec8 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	2200      	movs	r2, #0
 8003e60:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	330c      	adds	r3, #12
 8003e68:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e6a:	697b      	ldr	r3, [r7, #20]
 8003e6c:	e853 3f00 	ldrex	r3, [r3]
 8003e70:	613b      	str	r3, [r7, #16]
   return(result);
 8003e72:	693b      	ldr	r3, [r7, #16]
 8003e74:	f023 0310 	bic.w	r3, r3, #16
 8003e78:	627b      	str	r3, [r7, #36]	; 0x24
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	330c      	adds	r3, #12
 8003e80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e82:	623a      	str	r2, [r7, #32]
 8003e84:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e86:	69f9      	ldr	r1, [r7, #28]
 8003e88:	6a3a      	ldr	r2, [r7, #32]
 8003e8a:	e841 2300 	strex	r3, r2, [r1]
 8003e8e:	61bb      	str	r3, [r7, #24]
   return(result);
 8003e90:	69bb      	ldr	r3, [r7, #24]
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d1e5      	bne.n	8003e62 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f003 0310 	and.w	r3, r3, #16
 8003ea0:	2b10      	cmp	r3, #16
 8003ea2:	d10a      	bne.n	8003eba <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003ea4:	2300      	movs	r3, #0
 8003ea6:	60fb      	str	r3, [r7, #12]
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	60fb      	str	r3, [r7, #12]
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	685b      	ldr	r3, [r3, #4]
 8003eb6:	60fb      	str	r3, [r7, #12]
 8003eb8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003ebe:	4619      	mov	r1, r3
 8003ec0:	6878      	ldr	r0, [r7, #4]
 8003ec2:	f7ff fe67 	bl	8003b94 <HAL_UARTEx_RxEventCallback>
 8003ec6:	e002      	b.n	8003ece <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003ec8:	6878      	ldr	r0, [r7, #4]
 8003eca:	f7ff fe4f 	bl	8003b6c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003ece:	2300      	movs	r3, #0
 8003ed0:	e002      	b.n	8003ed8 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8003ed2:	2300      	movs	r3, #0
 8003ed4:	e000      	b.n	8003ed8 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8003ed6:	2302      	movs	r3, #2
  }
}
 8003ed8:	4618      	mov	r0, r3
 8003eda:	3730      	adds	r7, #48	; 0x30
 8003edc:	46bd      	mov	sp, r7
 8003ede:	bd80      	pop	{r7, pc}

08003ee0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003ee0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003ee4:	b0c0      	sub	sp, #256	; 0x100
 8003ee6:	af00      	add	r7, sp, #0
 8003ee8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003eec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	691b      	ldr	r3, [r3, #16]
 8003ef4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003ef8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003efc:	68d9      	ldr	r1, [r3, #12]
 8003efe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f02:	681a      	ldr	r2, [r3, #0]
 8003f04:	ea40 0301 	orr.w	r3, r0, r1
 8003f08:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003f0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f0e:	689a      	ldr	r2, [r3, #8]
 8003f10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f14:	691b      	ldr	r3, [r3, #16]
 8003f16:	431a      	orrs	r2, r3
 8003f18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f1c:	695b      	ldr	r3, [r3, #20]
 8003f1e:	431a      	orrs	r2, r3
 8003f20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f24:	69db      	ldr	r3, [r3, #28]
 8003f26:	4313      	orrs	r3, r2
 8003f28:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003f2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	68db      	ldr	r3, [r3, #12]
 8003f34:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003f38:	f021 010c 	bic.w	r1, r1, #12
 8003f3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f40:	681a      	ldr	r2, [r3, #0]
 8003f42:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003f46:	430b      	orrs	r3, r1
 8003f48:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003f4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	695b      	ldr	r3, [r3, #20]
 8003f52:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003f56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f5a:	6999      	ldr	r1, [r3, #24]
 8003f5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f60:	681a      	ldr	r2, [r3, #0]
 8003f62:	ea40 0301 	orr.w	r3, r0, r1
 8003f66:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003f68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f6c:	681a      	ldr	r2, [r3, #0]
 8003f6e:	4b8f      	ldr	r3, [pc, #572]	; (80041ac <UART_SetConfig+0x2cc>)
 8003f70:	429a      	cmp	r2, r3
 8003f72:	d005      	beq.n	8003f80 <UART_SetConfig+0xa0>
 8003f74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f78:	681a      	ldr	r2, [r3, #0]
 8003f7a:	4b8d      	ldr	r3, [pc, #564]	; (80041b0 <UART_SetConfig+0x2d0>)
 8003f7c:	429a      	cmp	r2, r3
 8003f7e:	d104      	bne.n	8003f8a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003f80:	f7fe fc34 	bl	80027ec <HAL_RCC_GetPCLK2Freq>
 8003f84:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003f88:	e003      	b.n	8003f92 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003f8a:	f7fe fc1b 	bl	80027c4 <HAL_RCC_GetPCLK1Freq>
 8003f8e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003f92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f96:	69db      	ldr	r3, [r3, #28]
 8003f98:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003f9c:	f040 810c 	bne.w	80041b8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003fa0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003fa4:	2200      	movs	r2, #0
 8003fa6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003faa:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003fae:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003fb2:	4622      	mov	r2, r4
 8003fb4:	462b      	mov	r3, r5
 8003fb6:	1891      	adds	r1, r2, r2
 8003fb8:	65b9      	str	r1, [r7, #88]	; 0x58
 8003fba:	415b      	adcs	r3, r3
 8003fbc:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003fbe:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003fc2:	4621      	mov	r1, r4
 8003fc4:	eb12 0801 	adds.w	r8, r2, r1
 8003fc8:	4629      	mov	r1, r5
 8003fca:	eb43 0901 	adc.w	r9, r3, r1
 8003fce:	f04f 0200 	mov.w	r2, #0
 8003fd2:	f04f 0300 	mov.w	r3, #0
 8003fd6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003fda:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003fde:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003fe2:	4690      	mov	r8, r2
 8003fe4:	4699      	mov	r9, r3
 8003fe6:	4623      	mov	r3, r4
 8003fe8:	eb18 0303 	adds.w	r3, r8, r3
 8003fec:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003ff0:	462b      	mov	r3, r5
 8003ff2:	eb49 0303 	adc.w	r3, r9, r3
 8003ff6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003ffa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ffe:	685b      	ldr	r3, [r3, #4]
 8004000:	2200      	movs	r2, #0
 8004002:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004006:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800400a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800400e:	460b      	mov	r3, r1
 8004010:	18db      	adds	r3, r3, r3
 8004012:	653b      	str	r3, [r7, #80]	; 0x50
 8004014:	4613      	mov	r3, r2
 8004016:	eb42 0303 	adc.w	r3, r2, r3
 800401a:	657b      	str	r3, [r7, #84]	; 0x54
 800401c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004020:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004024:	f7fc fe18 	bl	8000c58 <__aeabi_uldivmod>
 8004028:	4602      	mov	r2, r0
 800402a:	460b      	mov	r3, r1
 800402c:	4b61      	ldr	r3, [pc, #388]	; (80041b4 <UART_SetConfig+0x2d4>)
 800402e:	fba3 2302 	umull	r2, r3, r3, r2
 8004032:	095b      	lsrs	r3, r3, #5
 8004034:	011c      	lsls	r4, r3, #4
 8004036:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800403a:	2200      	movs	r2, #0
 800403c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004040:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004044:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004048:	4642      	mov	r2, r8
 800404a:	464b      	mov	r3, r9
 800404c:	1891      	adds	r1, r2, r2
 800404e:	64b9      	str	r1, [r7, #72]	; 0x48
 8004050:	415b      	adcs	r3, r3
 8004052:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004054:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004058:	4641      	mov	r1, r8
 800405a:	eb12 0a01 	adds.w	sl, r2, r1
 800405e:	4649      	mov	r1, r9
 8004060:	eb43 0b01 	adc.w	fp, r3, r1
 8004064:	f04f 0200 	mov.w	r2, #0
 8004068:	f04f 0300 	mov.w	r3, #0
 800406c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004070:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004074:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004078:	4692      	mov	sl, r2
 800407a:	469b      	mov	fp, r3
 800407c:	4643      	mov	r3, r8
 800407e:	eb1a 0303 	adds.w	r3, sl, r3
 8004082:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004086:	464b      	mov	r3, r9
 8004088:	eb4b 0303 	adc.w	r3, fp, r3
 800408c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004090:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004094:	685b      	ldr	r3, [r3, #4]
 8004096:	2200      	movs	r2, #0
 8004098:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800409c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80040a0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80040a4:	460b      	mov	r3, r1
 80040a6:	18db      	adds	r3, r3, r3
 80040a8:	643b      	str	r3, [r7, #64]	; 0x40
 80040aa:	4613      	mov	r3, r2
 80040ac:	eb42 0303 	adc.w	r3, r2, r3
 80040b0:	647b      	str	r3, [r7, #68]	; 0x44
 80040b2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80040b6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80040ba:	f7fc fdcd 	bl	8000c58 <__aeabi_uldivmod>
 80040be:	4602      	mov	r2, r0
 80040c0:	460b      	mov	r3, r1
 80040c2:	4611      	mov	r1, r2
 80040c4:	4b3b      	ldr	r3, [pc, #236]	; (80041b4 <UART_SetConfig+0x2d4>)
 80040c6:	fba3 2301 	umull	r2, r3, r3, r1
 80040ca:	095b      	lsrs	r3, r3, #5
 80040cc:	2264      	movs	r2, #100	; 0x64
 80040ce:	fb02 f303 	mul.w	r3, r2, r3
 80040d2:	1acb      	subs	r3, r1, r3
 80040d4:	00db      	lsls	r3, r3, #3
 80040d6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80040da:	4b36      	ldr	r3, [pc, #216]	; (80041b4 <UART_SetConfig+0x2d4>)
 80040dc:	fba3 2302 	umull	r2, r3, r3, r2
 80040e0:	095b      	lsrs	r3, r3, #5
 80040e2:	005b      	lsls	r3, r3, #1
 80040e4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80040e8:	441c      	add	r4, r3
 80040ea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80040ee:	2200      	movs	r2, #0
 80040f0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80040f4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80040f8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80040fc:	4642      	mov	r2, r8
 80040fe:	464b      	mov	r3, r9
 8004100:	1891      	adds	r1, r2, r2
 8004102:	63b9      	str	r1, [r7, #56]	; 0x38
 8004104:	415b      	adcs	r3, r3
 8004106:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004108:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800410c:	4641      	mov	r1, r8
 800410e:	1851      	adds	r1, r2, r1
 8004110:	6339      	str	r1, [r7, #48]	; 0x30
 8004112:	4649      	mov	r1, r9
 8004114:	414b      	adcs	r3, r1
 8004116:	637b      	str	r3, [r7, #52]	; 0x34
 8004118:	f04f 0200 	mov.w	r2, #0
 800411c:	f04f 0300 	mov.w	r3, #0
 8004120:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004124:	4659      	mov	r1, fp
 8004126:	00cb      	lsls	r3, r1, #3
 8004128:	4651      	mov	r1, sl
 800412a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800412e:	4651      	mov	r1, sl
 8004130:	00ca      	lsls	r2, r1, #3
 8004132:	4610      	mov	r0, r2
 8004134:	4619      	mov	r1, r3
 8004136:	4603      	mov	r3, r0
 8004138:	4642      	mov	r2, r8
 800413a:	189b      	adds	r3, r3, r2
 800413c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004140:	464b      	mov	r3, r9
 8004142:	460a      	mov	r2, r1
 8004144:	eb42 0303 	adc.w	r3, r2, r3
 8004148:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800414c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004150:	685b      	ldr	r3, [r3, #4]
 8004152:	2200      	movs	r2, #0
 8004154:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004158:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800415c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004160:	460b      	mov	r3, r1
 8004162:	18db      	adds	r3, r3, r3
 8004164:	62bb      	str	r3, [r7, #40]	; 0x28
 8004166:	4613      	mov	r3, r2
 8004168:	eb42 0303 	adc.w	r3, r2, r3
 800416c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800416e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004172:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004176:	f7fc fd6f 	bl	8000c58 <__aeabi_uldivmod>
 800417a:	4602      	mov	r2, r0
 800417c:	460b      	mov	r3, r1
 800417e:	4b0d      	ldr	r3, [pc, #52]	; (80041b4 <UART_SetConfig+0x2d4>)
 8004180:	fba3 1302 	umull	r1, r3, r3, r2
 8004184:	095b      	lsrs	r3, r3, #5
 8004186:	2164      	movs	r1, #100	; 0x64
 8004188:	fb01 f303 	mul.w	r3, r1, r3
 800418c:	1ad3      	subs	r3, r2, r3
 800418e:	00db      	lsls	r3, r3, #3
 8004190:	3332      	adds	r3, #50	; 0x32
 8004192:	4a08      	ldr	r2, [pc, #32]	; (80041b4 <UART_SetConfig+0x2d4>)
 8004194:	fba2 2303 	umull	r2, r3, r2, r3
 8004198:	095b      	lsrs	r3, r3, #5
 800419a:	f003 0207 	and.w	r2, r3, #7
 800419e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	4422      	add	r2, r4
 80041a6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80041a8:	e105      	b.n	80043b6 <UART_SetConfig+0x4d6>
 80041aa:	bf00      	nop
 80041ac:	40011000 	.word	0x40011000
 80041b0:	40011400 	.word	0x40011400
 80041b4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80041b8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80041bc:	2200      	movs	r2, #0
 80041be:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80041c2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80041c6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80041ca:	4642      	mov	r2, r8
 80041cc:	464b      	mov	r3, r9
 80041ce:	1891      	adds	r1, r2, r2
 80041d0:	6239      	str	r1, [r7, #32]
 80041d2:	415b      	adcs	r3, r3
 80041d4:	627b      	str	r3, [r7, #36]	; 0x24
 80041d6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80041da:	4641      	mov	r1, r8
 80041dc:	1854      	adds	r4, r2, r1
 80041de:	4649      	mov	r1, r9
 80041e0:	eb43 0501 	adc.w	r5, r3, r1
 80041e4:	f04f 0200 	mov.w	r2, #0
 80041e8:	f04f 0300 	mov.w	r3, #0
 80041ec:	00eb      	lsls	r3, r5, #3
 80041ee:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80041f2:	00e2      	lsls	r2, r4, #3
 80041f4:	4614      	mov	r4, r2
 80041f6:	461d      	mov	r5, r3
 80041f8:	4643      	mov	r3, r8
 80041fa:	18e3      	adds	r3, r4, r3
 80041fc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004200:	464b      	mov	r3, r9
 8004202:	eb45 0303 	adc.w	r3, r5, r3
 8004206:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800420a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800420e:	685b      	ldr	r3, [r3, #4]
 8004210:	2200      	movs	r2, #0
 8004212:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004216:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800421a:	f04f 0200 	mov.w	r2, #0
 800421e:	f04f 0300 	mov.w	r3, #0
 8004222:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004226:	4629      	mov	r1, r5
 8004228:	008b      	lsls	r3, r1, #2
 800422a:	4621      	mov	r1, r4
 800422c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004230:	4621      	mov	r1, r4
 8004232:	008a      	lsls	r2, r1, #2
 8004234:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004238:	f7fc fd0e 	bl	8000c58 <__aeabi_uldivmod>
 800423c:	4602      	mov	r2, r0
 800423e:	460b      	mov	r3, r1
 8004240:	4b60      	ldr	r3, [pc, #384]	; (80043c4 <UART_SetConfig+0x4e4>)
 8004242:	fba3 2302 	umull	r2, r3, r3, r2
 8004246:	095b      	lsrs	r3, r3, #5
 8004248:	011c      	lsls	r4, r3, #4
 800424a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800424e:	2200      	movs	r2, #0
 8004250:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004254:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004258:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800425c:	4642      	mov	r2, r8
 800425e:	464b      	mov	r3, r9
 8004260:	1891      	adds	r1, r2, r2
 8004262:	61b9      	str	r1, [r7, #24]
 8004264:	415b      	adcs	r3, r3
 8004266:	61fb      	str	r3, [r7, #28]
 8004268:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800426c:	4641      	mov	r1, r8
 800426e:	1851      	adds	r1, r2, r1
 8004270:	6139      	str	r1, [r7, #16]
 8004272:	4649      	mov	r1, r9
 8004274:	414b      	adcs	r3, r1
 8004276:	617b      	str	r3, [r7, #20]
 8004278:	f04f 0200 	mov.w	r2, #0
 800427c:	f04f 0300 	mov.w	r3, #0
 8004280:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004284:	4659      	mov	r1, fp
 8004286:	00cb      	lsls	r3, r1, #3
 8004288:	4651      	mov	r1, sl
 800428a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800428e:	4651      	mov	r1, sl
 8004290:	00ca      	lsls	r2, r1, #3
 8004292:	4610      	mov	r0, r2
 8004294:	4619      	mov	r1, r3
 8004296:	4603      	mov	r3, r0
 8004298:	4642      	mov	r2, r8
 800429a:	189b      	adds	r3, r3, r2
 800429c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80042a0:	464b      	mov	r3, r9
 80042a2:	460a      	mov	r2, r1
 80042a4:	eb42 0303 	adc.w	r3, r2, r3
 80042a8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80042ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042b0:	685b      	ldr	r3, [r3, #4]
 80042b2:	2200      	movs	r2, #0
 80042b4:	67bb      	str	r3, [r7, #120]	; 0x78
 80042b6:	67fa      	str	r2, [r7, #124]	; 0x7c
 80042b8:	f04f 0200 	mov.w	r2, #0
 80042bc:	f04f 0300 	mov.w	r3, #0
 80042c0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80042c4:	4649      	mov	r1, r9
 80042c6:	008b      	lsls	r3, r1, #2
 80042c8:	4641      	mov	r1, r8
 80042ca:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80042ce:	4641      	mov	r1, r8
 80042d0:	008a      	lsls	r2, r1, #2
 80042d2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80042d6:	f7fc fcbf 	bl	8000c58 <__aeabi_uldivmod>
 80042da:	4602      	mov	r2, r0
 80042dc:	460b      	mov	r3, r1
 80042de:	4b39      	ldr	r3, [pc, #228]	; (80043c4 <UART_SetConfig+0x4e4>)
 80042e0:	fba3 1302 	umull	r1, r3, r3, r2
 80042e4:	095b      	lsrs	r3, r3, #5
 80042e6:	2164      	movs	r1, #100	; 0x64
 80042e8:	fb01 f303 	mul.w	r3, r1, r3
 80042ec:	1ad3      	subs	r3, r2, r3
 80042ee:	011b      	lsls	r3, r3, #4
 80042f0:	3332      	adds	r3, #50	; 0x32
 80042f2:	4a34      	ldr	r2, [pc, #208]	; (80043c4 <UART_SetConfig+0x4e4>)
 80042f4:	fba2 2303 	umull	r2, r3, r2, r3
 80042f8:	095b      	lsrs	r3, r3, #5
 80042fa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80042fe:	441c      	add	r4, r3
 8004300:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004304:	2200      	movs	r2, #0
 8004306:	673b      	str	r3, [r7, #112]	; 0x70
 8004308:	677a      	str	r2, [r7, #116]	; 0x74
 800430a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800430e:	4642      	mov	r2, r8
 8004310:	464b      	mov	r3, r9
 8004312:	1891      	adds	r1, r2, r2
 8004314:	60b9      	str	r1, [r7, #8]
 8004316:	415b      	adcs	r3, r3
 8004318:	60fb      	str	r3, [r7, #12]
 800431a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800431e:	4641      	mov	r1, r8
 8004320:	1851      	adds	r1, r2, r1
 8004322:	6039      	str	r1, [r7, #0]
 8004324:	4649      	mov	r1, r9
 8004326:	414b      	adcs	r3, r1
 8004328:	607b      	str	r3, [r7, #4]
 800432a:	f04f 0200 	mov.w	r2, #0
 800432e:	f04f 0300 	mov.w	r3, #0
 8004332:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004336:	4659      	mov	r1, fp
 8004338:	00cb      	lsls	r3, r1, #3
 800433a:	4651      	mov	r1, sl
 800433c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004340:	4651      	mov	r1, sl
 8004342:	00ca      	lsls	r2, r1, #3
 8004344:	4610      	mov	r0, r2
 8004346:	4619      	mov	r1, r3
 8004348:	4603      	mov	r3, r0
 800434a:	4642      	mov	r2, r8
 800434c:	189b      	adds	r3, r3, r2
 800434e:	66bb      	str	r3, [r7, #104]	; 0x68
 8004350:	464b      	mov	r3, r9
 8004352:	460a      	mov	r2, r1
 8004354:	eb42 0303 	adc.w	r3, r2, r3
 8004358:	66fb      	str	r3, [r7, #108]	; 0x6c
 800435a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800435e:	685b      	ldr	r3, [r3, #4]
 8004360:	2200      	movs	r2, #0
 8004362:	663b      	str	r3, [r7, #96]	; 0x60
 8004364:	667a      	str	r2, [r7, #100]	; 0x64
 8004366:	f04f 0200 	mov.w	r2, #0
 800436a:	f04f 0300 	mov.w	r3, #0
 800436e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004372:	4649      	mov	r1, r9
 8004374:	008b      	lsls	r3, r1, #2
 8004376:	4641      	mov	r1, r8
 8004378:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800437c:	4641      	mov	r1, r8
 800437e:	008a      	lsls	r2, r1, #2
 8004380:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004384:	f7fc fc68 	bl	8000c58 <__aeabi_uldivmod>
 8004388:	4602      	mov	r2, r0
 800438a:	460b      	mov	r3, r1
 800438c:	4b0d      	ldr	r3, [pc, #52]	; (80043c4 <UART_SetConfig+0x4e4>)
 800438e:	fba3 1302 	umull	r1, r3, r3, r2
 8004392:	095b      	lsrs	r3, r3, #5
 8004394:	2164      	movs	r1, #100	; 0x64
 8004396:	fb01 f303 	mul.w	r3, r1, r3
 800439a:	1ad3      	subs	r3, r2, r3
 800439c:	011b      	lsls	r3, r3, #4
 800439e:	3332      	adds	r3, #50	; 0x32
 80043a0:	4a08      	ldr	r2, [pc, #32]	; (80043c4 <UART_SetConfig+0x4e4>)
 80043a2:	fba2 2303 	umull	r2, r3, r2, r3
 80043a6:	095b      	lsrs	r3, r3, #5
 80043a8:	f003 020f 	and.w	r2, r3, #15
 80043ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	4422      	add	r2, r4
 80043b4:	609a      	str	r2, [r3, #8]
}
 80043b6:	bf00      	nop
 80043b8:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80043bc:	46bd      	mov	sp, r7
 80043be:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80043c2:	bf00      	nop
 80043c4:	51eb851f 	.word	0x51eb851f

080043c8 <__errno>:
 80043c8:	4b01      	ldr	r3, [pc, #4]	; (80043d0 <__errno+0x8>)
 80043ca:	6818      	ldr	r0, [r3, #0]
 80043cc:	4770      	bx	lr
 80043ce:	bf00      	nop
 80043d0:	2000000c 	.word	0x2000000c

080043d4 <__libc_init_array>:
 80043d4:	b570      	push	{r4, r5, r6, lr}
 80043d6:	4d0d      	ldr	r5, [pc, #52]	; (800440c <__libc_init_array+0x38>)
 80043d8:	4c0d      	ldr	r4, [pc, #52]	; (8004410 <__libc_init_array+0x3c>)
 80043da:	1b64      	subs	r4, r4, r5
 80043dc:	10a4      	asrs	r4, r4, #2
 80043de:	2600      	movs	r6, #0
 80043e0:	42a6      	cmp	r6, r4
 80043e2:	d109      	bne.n	80043f8 <__libc_init_array+0x24>
 80043e4:	4d0b      	ldr	r5, [pc, #44]	; (8004414 <__libc_init_array+0x40>)
 80043e6:	4c0c      	ldr	r4, [pc, #48]	; (8004418 <__libc_init_array+0x44>)
 80043e8:	f002 fd36 	bl	8006e58 <_init>
 80043ec:	1b64      	subs	r4, r4, r5
 80043ee:	10a4      	asrs	r4, r4, #2
 80043f0:	2600      	movs	r6, #0
 80043f2:	42a6      	cmp	r6, r4
 80043f4:	d105      	bne.n	8004402 <__libc_init_array+0x2e>
 80043f6:	bd70      	pop	{r4, r5, r6, pc}
 80043f8:	f855 3b04 	ldr.w	r3, [r5], #4
 80043fc:	4798      	blx	r3
 80043fe:	3601      	adds	r6, #1
 8004400:	e7ee      	b.n	80043e0 <__libc_init_array+0xc>
 8004402:	f855 3b04 	ldr.w	r3, [r5], #4
 8004406:	4798      	blx	r3
 8004408:	3601      	adds	r6, #1
 800440a:	e7f2      	b.n	80043f2 <__libc_init_array+0x1e>
 800440c:	0800726c 	.word	0x0800726c
 8004410:	0800726c 	.word	0x0800726c
 8004414:	0800726c 	.word	0x0800726c
 8004418:	08007270 	.word	0x08007270

0800441c <memset>:
 800441c:	4402      	add	r2, r0
 800441e:	4603      	mov	r3, r0
 8004420:	4293      	cmp	r3, r2
 8004422:	d100      	bne.n	8004426 <memset+0xa>
 8004424:	4770      	bx	lr
 8004426:	f803 1b01 	strb.w	r1, [r3], #1
 800442a:	e7f9      	b.n	8004420 <memset+0x4>

0800442c <__cvt>:
 800442c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004430:	ec55 4b10 	vmov	r4, r5, d0
 8004434:	2d00      	cmp	r5, #0
 8004436:	460e      	mov	r6, r1
 8004438:	4619      	mov	r1, r3
 800443a:	462b      	mov	r3, r5
 800443c:	bfbb      	ittet	lt
 800443e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8004442:	461d      	movlt	r5, r3
 8004444:	2300      	movge	r3, #0
 8004446:	232d      	movlt	r3, #45	; 0x2d
 8004448:	700b      	strb	r3, [r1, #0]
 800444a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800444c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8004450:	4691      	mov	r9, r2
 8004452:	f023 0820 	bic.w	r8, r3, #32
 8004456:	bfbc      	itt	lt
 8004458:	4622      	movlt	r2, r4
 800445a:	4614      	movlt	r4, r2
 800445c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004460:	d005      	beq.n	800446e <__cvt+0x42>
 8004462:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8004466:	d100      	bne.n	800446a <__cvt+0x3e>
 8004468:	3601      	adds	r6, #1
 800446a:	2102      	movs	r1, #2
 800446c:	e000      	b.n	8004470 <__cvt+0x44>
 800446e:	2103      	movs	r1, #3
 8004470:	ab03      	add	r3, sp, #12
 8004472:	9301      	str	r3, [sp, #4]
 8004474:	ab02      	add	r3, sp, #8
 8004476:	9300      	str	r3, [sp, #0]
 8004478:	ec45 4b10 	vmov	d0, r4, r5
 800447c:	4653      	mov	r3, sl
 800447e:	4632      	mov	r2, r6
 8004480:	f000 fcca 	bl	8004e18 <_dtoa_r>
 8004484:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8004488:	4607      	mov	r7, r0
 800448a:	d102      	bne.n	8004492 <__cvt+0x66>
 800448c:	f019 0f01 	tst.w	r9, #1
 8004490:	d022      	beq.n	80044d8 <__cvt+0xac>
 8004492:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004496:	eb07 0906 	add.w	r9, r7, r6
 800449a:	d110      	bne.n	80044be <__cvt+0x92>
 800449c:	783b      	ldrb	r3, [r7, #0]
 800449e:	2b30      	cmp	r3, #48	; 0x30
 80044a0:	d10a      	bne.n	80044b8 <__cvt+0x8c>
 80044a2:	2200      	movs	r2, #0
 80044a4:	2300      	movs	r3, #0
 80044a6:	4620      	mov	r0, r4
 80044a8:	4629      	mov	r1, r5
 80044aa:	f7fc fb15 	bl	8000ad8 <__aeabi_dcmpeq>
 80044ae:	b918      	cbnz	r0, 80044b8 <__cvt+0x8c>
 80044b0:	f1c6 0601 	rsb	r6, r6, #1
 80044b4:	f8ca 6000 	str.w	r6, [sl]
 80044b8:	f8da 3000 	ldr.w	r3, [sl]
 80044bc:	4499      	add	r9, r3
 80044be:	2200      	movs	r2, #0
 80044c0:	2300      	movs	r3, #0
 80044c2:	4620      	mov	r0, r4
 80044c4:	4629      	mov	r1, r5
 80044c6:	f7fc fb07 	bl	8000ad8 <__aeabi_dcmpeq>
 80044ca:	b108      	cbz	r0, 80044d0 <__cvt+0xa4>
 80044cc:	f8cd 900c 	str.w	r9, [sp, #12]
 80044d0:	2230      	movs	r2, #48	; 0x30
 80044d2:	9b03      	ldr	r3, [sp, #12]
 80044d4:	454b      	cmp	r3, r9
 80044d6:	d307      	bcc.n	80044e8 <__cvt+0xbc>
 80044d8:	9b03      	ldr	r3, [sp, #12]
 80044da:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80044dc:	1bdb      	subs	r3, r3, r7
 80044de:	4638      	mov	r0, r7
 80044e0:	6013      	str	r3, [r2, #0]
 80044e2:	b004      	add	sp, #16
 80044e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80044e8:	1c59      	adds	r1, r3, #1
 80044ea:	9103      	str	r1, [sp, #12]
 80044ec:	701a      	strb	r2, [r3, #0]
 80044ee:	e7f0      	b.n	80044d2 <__cvt+0xa6>

080044f0 <__exponent>:
 80044f0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80044f2:	4603      	mov	r3, r0
 80044f4:	2900      	cmp	r1, #0
 80044f6:	bfb8      	it	lt
 80044f8:	4249      	neglt	r1, r1
 80044fa:	f803 2b02 	strb.w	r2, [r3], #2
 80044fe:	bfb4      	ite	lt
 8004500:	222d      	movlt	r2, #45	; 0x2d
 8004502:	222b      	movge	r2, #43	; 0x2b
 8004504:	2909      	cmp	r1, #9
 8004506:	7042      	strb	r2, [r0, #1]
 8004508:	dd2a      	ble.n	8004560 <__exponent+0x70>
 800450a:	f10d 0407 	add.w	r4, sp, #7
 800450e:	46a4      	mov	ip, r4
 8004510:	270a      	movs	r7, #10
 8004512:	46a6      	mov	lr, r4
 8004514:	460a      	mov	r2, r1
 8004516:	fb91 f6f7 	sdiv	r6, r1, r7
 800451a:	fb07 1516 	mls	r5, r7, r6, r1
 800451e:	3530      	adds	r5, #48	; 0x30
 8004520:	2a63      	cmp	r2, #99	; 0x63
 8004522:	f104 34ff 	add.w	r4, r4, #4294967295
 8004526:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800452a:	4631      	mov	r1, r6
 800452c:	dcf1      	bgt.n	8004512 <__exponent+0x22>
 800452e:	3130      	adds	r1, #48	; 0x30
 8004530:	f1ae 0502 	sub.w	r5, lr, #2
 8004534:	f804 1c01 	strb.w	r1, [r4, #-1]
 8004538:	1c44      	adds	r4, r0, #1
 800453a:	4629      	mov	r1, r5
 800453c:	4561      	cmp	r1, ip
 800453e:	d30a      	bcc.n	8004556 <__exponent+0x66>
 8004540:	f10d 0209 	add.w	r2, sp, #9
 8004544:	eba2 020e 	sub.w	r2, r2, lr
 8004548:	4565      	cmp	r5, ip
 800454a:	bf88      	it	hi
 800454c:	2200      	movhi	r2, #0
 800454e:	4413      	add	r3, r2
 8004550:	1a18      	subs	r0, r3, r0
 8004552:	b003      	add	sp, #12
 8004554:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004556:	f811 2b01 	ldrb.w	r2, [r1], #1
 800455a:	f804 2f01 	strb.w	r2, [r4, #1]!
 800455e:	e7ed      	b.n	800453c <__exponent+0x4c>
 8004560:	2330      	movs	r3, #48	; 0x30
 8004562:	3130      	adds	r1, #48	; 0x30
 8004564:	7083      	strb	r3, [r0, #2]
 8004566:	70c1      	strb	r1, [r0, #3]
 8004568:	1d03      	adds	r3, r0, #4
 800456a:	e7f1      	b.n	8004550 <__exponent+0x60>

0800456c <_printf_float>:
 800456c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004570:	ed2d 8b02 	vpush	{d8}
 8004574:	b08d      	sub	sp, #52	; 0x34
 8004576:	460c      	mov	r4, r1
 8004578:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800457c:	4616      	mov	r6, r2
 800457e:	461f      	mov	r7, r3
 8004580:	4605      	mov	r5, r0
 8004582:	f001 fa37 	bl	80059f4 <_localeconv_r>
 8004586:	f8d0 a000 	ldr.w	sl, [r0]
 800458a:	4650      	mov	r0, sl
 800458c:	f7fb fe28 	bl	80001e0 <strlen>
 8004590:	2300      	movs	r3, #0
 8004592:	930a      	str	r3, [sp, #40]	; 0x28
 8004594:	6823      	ldr	r3, [r4, #0]
 8004596:	9305      	str	r3, [sp, #20]
 8004598:	f8d8 3000 	ldr.w	r3, [r8]
 800459c:	f894 b018 	ldrb.w	fp, [r4, #24]
 80045a0:	3307      	adds	r3, #7
 80045a2:	f023 0307 	bic.w	r3, r3, #7
 80045a6:	f103 0208 	add.w	r2, r3, #8
 80045aa:	f8c8 2000 	str.w	r2, [r8]
 80045ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045b2:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80045b6:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80045ba:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80045be:	9307      	str	r3, [sp, #28]
 80045c0:	f8cd 8018 	str.w	r8, [sp, #24]
 80045c4:	ee08 0a10 	vmov	s16, r0
 80045c8:	4b9f      	ldr	r3, [pc, #636]	; (8004848 <_printf_float+0x2dc>)
 80045ca:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80045ce:	f04f 32ff 	mov.w	r2, #4294967295
 80045d2:	f7fc fab3 	bl	8000b3c <__aeabi_dcmpun>
 80045d6:	bb88      	cbnz	r0, 800463c <_printf_float+0xd0>
 80045d8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80045dc:	4b9a      	ldr	r3, [pc, #616]	; (8004848 <_printf_float+0x2dc>)
 80045de:	f04f 32ff 	mov.w	r2, #4294967295
 80045e2:	f7fc fa8d 	bl	8000b00 <__aeabi_dcmple>
 80045e6:	bb48      	cbnz	r0, 800463c <_printf_float+0xd0>
 80045e8:	2200      	movs	r2, #0
 80045ea:	2300      	movs	r3, #0
 80045ec:	4640      	mov	r0, r8
 80045ee:	4649      	mov	r1, r9
 80045f0:	f7fc fa7c 	bl	8000aec <__aeabi_dcmplt>
 80045f4:	b110      	cbz	r0, 80045fc <_printf_float+0x90>
 80045f6:	232d      	movs	r3, #45	; 0x2d
 80045f8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80045fc:	4b93      	ldr	r3, [pc, #588]	; (800484c <_printf_float+0x2e0>)
 80045fe:	4894      	ldr	r0, [pc, #592]	; (8004850 <_printf_float+0x2e4>)
 8004600:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8004604:	bf94      	ite	ls
 8004606:	4698      	movls	r8, r3
 8004608:	4680      	movhi	r8, r0
 800460a:	2303      	movs	r3, #3
 800460c:	6123      	str	r3, [r4, #16]
 800460e:	9b05      	ldr	r3, [sp, #20]
 8004610:	f023 0204 	bic.w	r2, r3, #4
 8004614:	6022      	str	r2, [r4, #0]
 8004616:	f04f 0900 	mov.w	r9, #0
 800461a:	9700      	str	r7, [sp, #0]
 800461c:	4633      	mov	r3, r6
 800461e:	aa0b      	add	r2, sp, #44	; 0x2c
 8004620:	4621      	mov	r1, r4
 8004622:	4628      	mov	r0, r5
 8004624:	f000 f9d8 	bl	80049d8 <_printf_common>
 8004628:	3001      	adds	r0, #1
 800462a:	f040 8090 	bne.w	800474e <_printf_float+0x1e2>
 800462e:	f04f 30ff 	mov.w	r0, #4294967295
 8004632:	b00d      	add	sp, #52	; 0x34
 8004634:	ecbd 8b02 	vpop	{d8}
 8004638:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800463c:	4642      	mov	r2, r8
 800463e:	464b      	mov	r3, r9
 8004640:	4640      	mov	r0, r8
 8004642:	4649      	mov	r1, r9
 8004644:	f7fc fa7a 	bl	8000b3c <__aeabi_dcmpun>
 8004648:	b140      	cbz	r0, 800465c <_printf_float+0xf0>
 800464a:	464b      	mov	r3, r9
 800464c:	2b00      	cmp	r3, #0
 800464e:	bfbc      	itt	lt
 8004650:	232d      	movlt	r3, #45	; 0x2d
 8004652:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8004656:	487f      	ldr	r0, [pc, #508]	; (8004854 <_printf_float+0x2e8>)
 8004658:	4b7f      	ldr	r3, [pc, #508]	; (8004858 <_printf_float+0x2ec>)
 800465a:	e7d1      	b.n	8004600 <_printf_float+0x94>
 800465c:	6863      	ldr	r3, [r4, #4]
 800465e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8004662:	9206      	str	r2, [sp, #24]
 8004664:	1c5a      	adds	r2, r3, #1
 8004666:	d13f      	bne.n	80046e8 <_printf_float+0x17c>
 8004668:	2306      	movs	r3, #6
 800466a:	6063      	str	r3, [r4, #4]
 800466c:	9b05      	ldr	r3, [sp, #20]
 800466e:	6861      	ldr	r1, [r4, #4]
 8004670:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8004674:	2300      	movs	r3, #0
 8004676:	9303      	str	r3, [sp, #12]
 8004678:	ab0a      	add	r3, sp, #40	; 0x28
 800467a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800467e:	ab09      	add	r3, sp, #36	; 0x24
 8004680:	ec49 8b10 	vmov	d0, r8, r9
 8004684:	9300      	str	r3, [sp, #0]
 8004686:	6022      	str	r2, [r4, #0]
 8004688:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800468c:	4628      	mov	r0, r5
 800468e:	f7ff fecd 	bl	800442c <__cvt>
 8004692:	9b06      	ldr	r3, [sp, #24]
 8004694:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004696:	2b47      	cmp	r3, #71	; 0x47
 8004698:	4680      	mov	r8, r0
 800469a:	d108      	bne.n	80046ae <_printf_float+0x142>
 800469c:	1cc8      	adds	r0, r1, #3
 800469e:	db02      	blt.n	80046a6 <_printf_float+0x13a>
 80046a0:	6863      	ldr	r3, [r4, #4]
 80046a2:	4299      	cmp	r1, r3
 80046a4:	dd41      	ble.n	800472a <_printf_float+0x1be>
 80046a6:	f1ab 0b02 	sub.w	fp, fp, #2
 80046aa:	fa5f fb8b 	uxtb.w	fp, fp
 80046ae:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80046b2:	d820      	bhi.n	80046f6 <_printf_float+0x18a>
 80046b4:	3901      	subs	r1, #1
 80046b6:	465a      	mov	r2, fp
 80046b8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80046bc:	9109      	str	r1, [sp, #36]	; 0x24
 80046be:	f7ff ff17 	bl	80044f0 <__exponent>
 80046c2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80046c4:	1813      	adds	r3, r2, r0
 80046c6:	2a01      	cmp	r2, #1
 80046c8:	4681      	mov	r9, r0
 80046ca:	6123      	str	r3, [r4, #16]
 80046cc:	dc02      	bgt.n	80046d4 <_printf_float+0x168>
 80046ce:	6822      	ldr	r2, [r4, #0]
 80046d0:	07d2      	lsls	r2, r2, #31
 80046d2:	d501      	bpl.n	80046d8 <_printf_float+0x16c>
 80046d4:	3301      	adds	r3, #1
 80046d6:	6123      	str	r3, [r4, #16]
 80046d8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d09c      	beq.n	800461a <_printf_float+0xae>
 80046e0:	232d      	movs	r3, #45	; 0x2d
 80046e2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80046e6:	e798      	b.n	800461a <_printf_float+0xae>
 80046e8:	9a06      	ldr	r2, [sp, #24]
 80046ea:	2a47      	cmp	r2, #71	; 0x47
 80046ec:	d1be      	bne.n	800466c <_printf_float+0x100>
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d1bc      	bne.n	800466c <_printf_float+0x100>
 80046f2:	2301      	movs	r3, #1
 80046f4:	e7b9      	b.n	800466a <_printf_float+0xfe>
 80046f6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80046fa:	d118      	bne.n	800472e <_printf_float+0x1c2>
 80046fc:	2900      	cmp	r1, #0
 80046fe:	6863      	ldr	r3, [r4, #4]
 8004700:	dd0b      	ble.n	800471a <_printf_float+0x1ae>
 8004702:	6121      	str	r1, [r4, #16]
 8004704:	b913      	cbnz	r3, 800470c <_printf_float+0x1a0>
 8004706:	6822      	ldr	r2, [r4, #0]
 8004708:	07d0      	lsls	r0, r2, #31
 800470a:	d502      	bpl.n	8004712 <_printf_float+0x1a6>
 800470c:	3301      	adds	r3, #1
 800470e:	440b      	add	r3, r1
 8004710:	6123      	str	r3, [r4, #16]
 8004712:	65a1      	str	r1, [r4, #88]	; 0x58
 8004714:	f04f 0900 	mov.w	r9, #0
 8004718:	e7de      	b.n	80046d8 <_printf_float+0x16c>
 800471a:	b913      	cbnz	r3, 8004722 <_printf_float+0x1b6>
 800471c:	6822      	ldr	r2, [r4, #0]
 800471e:	07d2      	lsls	r2, r2, #31
 8004720:	d501      	bpl.n	8004726 <_printf_float+0x1ba>
 8004722:	3302      	adds	r3, #2
 8004724:	e7f4      	b.n	8004710 <_printf_float+0x1a4>
 8004726:	2301      	movs	r3, #1
 8004728:	e7f2      	b.n	8004710 <_printf_float+0x1a4>
 800472a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800472e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004730:	4299      	cmp	r1, r3
 8004732:	db05      	blt.n	8004740 <_printf_float+0x1d4>
 8004734:	6823      	ldr	r3, [r4, #0]
 8004736:	6121      	str	r1, [r4, #16]
 8004738:	07d8      	lsls	r0, r3, #31
 800473a:	d5ea      	bpl.n	8004712 <_printf_float+0x1a6>
 800473c:	1c4b      	adds	r3, r1, #1
 800473e:	e7e7      	b.n	8004710 <_printf_float+0x1a4>
 8004740:	2900      	cmp	r1, #0
 8004742:	bfd4      	ite	le
 8004744:	f1c1 0202 	rsble	r2, r1, #2
 8004748:	2201      	movgt	r2, #1
 800474a:	4413      	add	r3, r2
 800474c:	e7e0      	b.n	8004710 <_printf_float+0x1a4>
 800474e:	6823      	ldr	r3, [r4, #0]
 8004750:	055a      	lsls	r2, r3, #21
 8004752:	d407      	bmi.n	8004764 <_printf_float+0x1f8>
 8004754:	6923      	ldr	r3, [r4, #16]
 8004756:	4642      	mov	r2, r8
 8004758:	4631      	mov	r1, r6
 800475a:	4628      	mov	r0, r5
 800475c:	47b8      	blx	r7
 800475e:	3001      	adds	r0, #1
 8004760:	d12c      	bne.n	80047bc <_printf_float+0x250>
 8004762:	e764      	b.n	800462e <_printf_float+0xc2>
 8004764:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8004768:	f240 80e0 	bls.w	800492c <_printf_float+0x3c0>
 800476c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004770:	2200      	movs	r2, #0
 8004772:	2300      	movs	r3, #0
 8004774:	f7fc f9b0 	bl	8000ad8 <__aeabi_dcmpeq>
 8004778:	2800      	cmp	r0, #0
 800477a:	d034      	beq.n	80047e6 <_printf_float+0x27a>
 800477c:	4a37      	ldr	r2, [pc, #220]	; (800485c <_printf_float+0x2f0>)
 800477e:	2301      	movs	r3, #1
 8004780:	4631      	mov	r1, r6
 8004782:	4628      	mov	r0, r5
 8004784:	47b8      	blx	r7
 8004786:	3001      	adds	r0, #1
 8004788:	f43f af51 	beq.w	800462e <_printf_float+0xc2>
 800478c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004790:	429a      	cmp	r2, r3
 8004792:	db02      	blt.n	800479a <_printf_float+0x22e>
 8004794:	6823      	ldr	r3, [r4, #0]
 8004796:	07d8      	lsls	r0, r3, #31
 8004798:	d510      	bpl.n	80047bc <_printf_float+0x250>
 800479a:	ee18 3a10 	vmov	r3, s16
 800479e:	4652      	mov	r2, sl
 80047a0:	4631      	mov	r1, r6
 80047a2:	4628      	mov	r0, r5
 80047a4:	47b8      	blx	r7
 80047a6:	3001      	adds	r0, #1
 80047a8:	f43f af41 	beq.w	800462e <_printf_float+0xc2>
 80047ac:	f04f 0800 	mov.w	r8, #0
 80047b0:	f104 091a 	add.w	r9, r4, #26
 80047b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80047b6:	3b01      	subs	r3, #1
 80047b8:	4543      	cmp	r3, r8
 80047ba:	dc09      	bgt.n	80047d0 <_printf_float+0x264>
 80047bc:	6823      	ldr	r3, [r4, #0]
 80047be:	079b      	lsls	r3, r3, #30
 80047c0:	f100 8105 	bmi.w	80049ce <_printf_float+0x462>
 80047c4:	68e0      	ldr	r0, [r4, #12]
 80047c6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80047c8:	4298      	cmp	r0, r3
 80047ca:	bfb8      	it	lt
 80047cc:	4618      	movlt	r0, r3
 80047ce:	e730      	b.n	8004632 <_printf_float+0xc6>
 80047d0:	2301      	movs	r3, #1
 80047d2:	464a      	mov	r2, r9
 80047d4:	4631      	mov	r1, r6
 80047d6:	4628      	mov	r0, r5
 80047d8:	47b8      	blx	r7
 80047da:	3001      	adds	r0, #1
 80047dc:	f43f af27 	beq.w	800462e <_printf_float+0xc2>
 80047e0:	f108 0801 	add.w	r8, r8, #1
 80047e4:	e7e6      	b.n	80047b4 <_printf_float+0x248>
 80047e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	dc39      	bgt.n	8004860 <_printf_float+0x2f4>
 80047ec:	4a1b      	ldr	r2, [pc, #108]	; (800485c <_printf_float+0x2f0>)
 80047ee:	2301      	movs	r3, #1
 80047f0:	4631      	mov	r1, r6
 80047f2:	4628      	mov	r0, r5
 80047f4:	47b8      	blx	r7
 80047f6:	3001      	adds	r0, #1
 80047f8:	f43f af19 	beq.w	800462e <_printf_float+0xc2>
 80047fc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004800:	4313      	orrs	r3, r2
 8004802:	d102      	bne.n	800480a <_printf_float+0x29e>
 8004804:	6823      	ldr	r3, [r4, #0]
 8004806:	07d9      	lsls	r1, r3, #31
 8004808:	d5d8      	bpl.n	80047bc <_printf_float+0x250>
 800480a:	ee18 3a10 	vmov	r3, s16
 800480e:	4652      	mov	r2, sl
 8004810:	4631      	mov	r1, r6
 8004812:	4628      	mov	r0, r5
 8004814:	47b8      	blx	r7
 8004816:	3001      	adds	r0, #1
 8004818:	f43f af09 	beq.w	800462e <_printf_float+0xc2>
 800481c:	f04f 0900 	mov.w	r9, #0
 8004820:	f104 0a1a 	add.w	sl, r4, #26
 8004824:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004826:	425b      	negs	r3, r3
 8004828:	454b      	cmp	r3, r9
 800482a:	dc01      	bgt.n	8004830 <_printf_float+0x2c4>
 800482c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800482e:	e792      	b.n	8004756 <_printf_float+0x1ea>
 8004830:	2301      	movs	r3, #1
 8004832:	4652      	mov	r2, sl
 8004834:	4631      	mov	r1, r6
 8004836:	4628      	mov	r0, r5
 8004838:	47b8      	blx	r7
 800483a:	3001      	adds	r0, #1
 800483c:	f43f aef7 	beq.w	800462e <_printf_float+0xc2>
 8004840:	f109 0901 	add.w	r9, r9, #1
 8004844:	e7ee      	b.n	8004824 <_printf_float+0x2b8>
 8004846:	bf00      	nop
 8004848:	7fefffff 	.word	0x7fefffff
 800484c:	08006e8c 	.word	0x08006e8c
 8004850:	08006e90 	.word	0x08006e90
 8004854:	08006e98 	.word	0x08006e98
 8004858:	08006e94 	.word	0x08006e94
 800485c:	08006e9c 	.word	0x08006e9c
 8004860:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004862:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004864:	429a      	cmp	r2, r3
 8004866:	bfa8      	it	ge
 8004868:	461a      	movge	r2, r3
 800486a:	2a00      	cmp	r2, #0
 800486c:	4691      	mov	r9, r2
 800486e:	dc37      	bgt.n	80048e0 <_printf_float+0x374>
 8004870:	f04f 0b00 	mov.w	fp, #0
 8004874:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004878:	f104 021a 	add.w	r2, r4, #26
 800487c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800487e:	9305      	str	r3, [sp, #20]
 8004880:	eba3 0309 	sub.w	r3, r3, r9
 8004884:	455b      	cmp	r3, fp
 8004886:	dc33      	bgt.n	80048f0 <_printf_float+0x384>
 8004888:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800488c:	429a      	cmp	r2, r3
 800488e:	db3b      	blt.n	8004908 <_printf_float+0x39c>
 8004890:	6823      	ldr	r3, [r4, #0]
 8004892:	07da      	lsls	r2, r3, #31
 8004894:	d438      	bmi.n	8004908 <_printf_float+0x39c>
 8004896:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004898:	9a05      	ldr	r2, [sp, #20]
 800489a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800489c:	1a9a      	subs	r2, r3, r2
 800489e:	eba3 0901 	sub.w	r9, r3, r1
 80048a2:	4591      	cmp	r9, r2
 80048a4:	bfa8      	it	ge
 80048a6:	4691      	movge	r9, r2
 80048a8:	f1b9 0f00 	cmp.w	r9, #0
 80048ac:	dc35      	bgt.n	800491a <_printf_float+0x3ae>
 80048ae:	f04f 0800 	mov.w	r8, #0
 80048b2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80048b6:	f104 0a1a 	add.w	sl, r4, #26
 80048ba:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80048be:	1a9b      	subs	r3, r3, r2
 80048c0:	eba3 0309 	sub.w	r3, r3, r9
 80048c4:	4543      	cmp	r3, r8
 80048c6:	f77f af79 	ble.w	80047bc <_printf_float+0x250>
 80048ca:	2301      	movs	r3, #1
 80048cc:	4652      	mov	r2, sl
 80048ce:	4631      	mov	r1, r6
 80048d0:	4628      	mov	r0, r5
 80048d2:	47b8      	blx	r7
 80048d4:	3001      	adds	r0, #1
 80048d6:	f43f aeaa 	beq.w	800462e <_printf_float+0xc2>
 80048da:	f108 0801 	add.w	r8, r8, #1
 80048de:	e7ec      	b.n	80048ba <_printf_float+0x34e>
 80048e0:	4613      	mov	r3, r2
 80048e2:	4631      	mov	r1, r6
 80048e4:	4642      	mov	r2, r8
 80048e6:	4628      	mov	r0, r5
 80048e8:	47b8      	blx	r7
 80048ea:	3001      	adds	r0, #1
 80048ec:	d1c0      	bne.n	8004870 <_printf_float+0x304>
 80048ee:	e69e      	b.n	800462e <_printf_float+0xc2>
 80048f0:	2301      	movs	r3, #1
 80048f2:	4631      	mov	r1, r6
 80048f4:	4628      	mov	r0, r5
 80048f6:	9205      	str	r2, [sp, #20]
 80048f8:	47b8      	blx	r7
 80048fa:	3001      	adds	r0, #1
 80048fc:	f43f ae97 	beq.w	800462e <_printf_float+0xc2>
 8004900:	9a05      	ldr	r2, [sp, #20]
 8004902:	f10b 0b01 	add.w	fp, fp, #1
 8004906:	e7b9      	b.n	800487c <_printf_float+0x310>
 8004908:	ee18 3a10 	vmov	r3, s16
 800490c:	4652      	mov	r2, sl
 800490e:	4631      	mov	r1, r6
 8004910:	4628      	mov	r0, r5
 8004912:	47b8      	blx	r7
 8004914:	3001      	adds	r0, #1
 8004916:	d1be      	bne.n	8004896 <_printf_float+0x32a>
 8004918:	e689      	b.n	800462e <_printf_float+0xc2>
 800491a:	9a05      	ldr	r2, [sp, #20]
 800491c:	464b      	mov	r3, r9
 800491e:	4442      	add	r2, r8
 8004920:	4631      	mov	r1, r6
 8004922:	4628      	mov	r0, r5
 8004924:	47b8      	blx	r7
 8004926:	3001      	adds	r0, #1
 8004928:	d1c1      	bne.n	80048ae <_printf_float+0x342>
 800492a:	e680      	b.n	800462e <_printf_float+0xc2>
 800492c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800492e:	2a01      	cmp	r2, #1
 8004930:	dc01      	bgt.n	8004936 <_printf_float+0x3ca>
 8004932:	07db      	lsls	r3, r3, #31
 8004934:	d538      	bpl.n	80049a8 <_printf_float+0x43c>
 8004936:	2301      	movs	r3, #1
 8004938:	4642      	mov	r2, r8
 800493a:	4631      	mov	r1, r6
 800493c:	4628      	mov	r0, r5
 800493e:	47b8      	blx	r7
 8004940:	3001      	adds	r0, #1
 8004942:	f43f ae74 	beq.w	800462e <_printf_float+0xc2>
 8004946:	ee18 3a10 	vmov	r3, s16
 800494a:	4652      	mov	r2, sl
 800494c:	4631      	mov	r1, r6
 800494e:	4628      	mov	r0, r5
 8004950:	47b8      	blx	r7
 8004952:	3001      	adds	r0, #1
 8004954:	f43f ae6b 	beq.w	800462e <_printf_float+0xc2>
 8004958:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800495c:	2200      	movs	r2, #0
 800495e:	2300      	movs	r3, #0
 8004960:	f7fc f8ba 	bl	8000ad8 <__aeabi_dcmpeq>
 8004964:	b9d8      	cbnz	r0, 800499e <_printf_float+0x432>
 8004966:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004968:	f108 0201 	add.w	r2, r8, #1
 800496c:	3b01      	subs	r3, #1
 800496e:	4631      	mov	r1, r6
 8004970:	4628      	mov	r0, r5
 8004972:	47b8      	blx	r7
 8004974:	3001      	adds	r0, #1
 8004976:	d10e      	bne.n	8004996 <_printf_float+0x42a>
 8004978:	e659      	b.n	800462e <_printf_float+0xc2>
 800497a:	2301      	movs	r3, #1
 800497c:	4652      	mov	r2, sl
 800497e:	4631      	mov	r1, r6
 8004980:	4628      	mov	r0, r5
 8004982:	47b8      	blx	r7
 8004984:	3001      	adds	r0, #1
 8004986:	f43f ae52 	beq.w	800462e <_printf_float+0xc2>
 800498a:	f108 0801 	add.w	r8, r8, #1
 800498e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004990:	3b01      	subs	r3, #1
 8004992:	4543      	cmp	r3, r8
 8004994:	dcf1      	bgt.n	800497a <_printf_float+0x40e>
 8004996:	464b      	mov	r3, r9
 8004998:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800499c:	e6dc      	b.n	8004758 <_printf_float+0x1ec>
 800499e:	f04f 0800 	mov.w	r8, #0
 80049a2:	f104 0a1a 	add.w	sl, r4, #26
 80049a6:	e7f2      	b.n	800498e <_printf_float+0x422>
 80049a8:	2301      	movs	r3, #1
 80049aa:	4642      	mov	r2, r8
 80049ac:	e7df      	b.n	800496e <_printf_float+0x402>
 80049ae:	2301      	movs	r3, #1
 80049b0:	464a      	mov	r2, r9
 80049b2:	4631      	mov	r1, r6
 80049b4:	4628      	mov	r0, r5
 80049b6:	47b8      	blx	r7
 80049b8:	3001      	adds	r0, #1
 80049ba:	f43f ae38 	beq.w	800462e <_printf_float+0xc2>
 80049be:	f108 0801 	add.w	r8, r8, #1
 80049c2:	68e3      	ldr	r3, [r4, #12]
 80049c4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80049c6:	1a5b      	subs	r3, r3, r1
 80049c8:	4543      	cmp	r3, r8
 80049ca:	dcf0      	bgt.n	80049ae <_printf_float+0x442>
 80049cc:	e6fa      	b.n	80047c4 <_printf_float+0x258>
 80049ce:	f04f 0800 	mov.w	r8, #0
 80049d2:	f104 0919 	add.w	r9, r4, #25
 80049d6:	e7f4      	b.n	80049c2 <_printf_float+0x456>

080049d8 <_printf_common>:
 80049d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80049dc:	4616      	mov	r6, r2
 80049de:	4699      	mov	r9, r3
 80049e0:	688a      	ldr	r2, [r1, #8]
 80049e2:	690b      	ldr	r3, [r1, #16]
 80049e4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80049e8:	4293      	cmp	r3, r2
 80049ea:	bfb8      	it	lt
 80049ec:	4613      	movlt	r3, r2
 80049ee:	6033      	str	r3, [r6, #0]
 80049f0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80049f4:	4607      	mov	r7, r0
 80049f6:	460c      	mov	r4, r1
 80049f8:	b10a      	cbz	r2, 80049fe <_printf_common+0x26>
 80049fa:	3301      	adds	r3, #1
 80049fc:	6033      	str	r3, [r6, #0]
 80049fe:	6823      	ldr	r3, [r4, #0]
 8004a00:	0699      	lsls	r1, r3, #26
 8004a02:	bf42      	ittt	mi
 8004a04:	6833      	ldrmi	r3, [r6, #0]
 8004a06:	3302      	addmi	r3, #2
 8004a08:	6033      	strmi	r3, [r6, #0]
 8004a0a:	6825      	ldr	r5, [r4, #0]
 8004a0c:	f015 0506 	ands.w	r5, r5, #6
 8004a10:	d106      	bne.n	8004a20 <_printf_common+0x48>
 8004a12:	f104 0a19 	add.w	sl, r4, #25
 8004a16:	68e3      	ldr	r3, [r4, #12]
 8004a18:	6832      	ldr	r2, [r6, #0]
 8004a1a:	1a9b      	subs	r3, r3, r2
 8004a1c:	42ab      	cmp	r3, r5
 8004a1e:	dc26      	bgt.n	8004a6e <_printf_common+0x96>
 8004a20:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004a24:	1e13      	subs	r3, r2, #0
 8004a26:	6822      	ldr	r2, [r4, #0]
 8004a28:	bf18      	it	ne
 8004a2a:	2301      	movne	r3, #1
 8004a2c:	0692      	lsls	r2, r2, #26
 8004a2e:	d42b      	bmi.n	8004a88 <_printf_common+0xb0>
 8004a30:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004a34:	4649      	mov	r1, r9
 8004a36:	4638      	mov	r0, r7
 8004a38:	47c0      	blx	r8
 8004a3a:	3001      	adds	r0, #1
 8004a3c:	d01e      	beq.n	8004a7c <_printf_common+0xa4>
 8004a3e:	6823      	ldr	r3, [r4, #0]
 8004a40:	68e5      	ldr	r5, [r4, #12]
 8004a42:	6832      	ldr	r2, [r6, #0]
 8004a44:	f003 0306 	and.w	r3, r3, #6
 8004a48:	2b04      	cmp	r3, #4
 8004a4a:	bf08      	it	eq
 8004a4c:	1aad      	subeq	r5, r5, r2
 8004a4e:	68a3      	ldr	r3, [r4, #8]
 8004a50:	6922      	ldr	r2, [r4, #16]
 8004a52:	bf0c      	ite	eq
 8004a54:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004a58:	2500      	movne	r5, #0
 8004a5a:	4293      	cmp	r3, r2
 8004a5c:	bfc4      	itt	gt
 8004a5e:	1a9b      	subgt	r3, r3, r2
 8004a60:	18ed      	addgt	r5, r5, r3
 8004a62:	2600      	movs	r6, #0
 8004a64:	341a      	adds	r4, #26
 8004a66:	42b5      	cmp	r5, r6
 8004a68:	d11a      	bne.n	8004aa0 <_printf_common+0xc8>
 8004a6a:	2000      	movs	r0, #0
 8004a6c:	e008      	b.n	8004a80 <_printf_common+0xa8>
 8004a6e:	2301      	movs	r3, #1
 8004a70:	4652      	mov	r2, sl
 8004a72:	4649      	mov	r1, r9
 8004a74:	4638      	mov	r0, r7
 8004a76:	47c0      	blx	r8
 8004a78:	3001      	adds	r0, #1
 8004a7a:	d103      	bne.n	8004a84 <_printf_common+0xac>
 8004a7c:	f04f 30ff 	mov.w	r0, #4294967295
 8004a80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004a84:	3501      	adds	r5, #1
 8004a86:	e7c6      	b.n	8004a16 <_printf_common+0x3e>
 8004a88:	18e1      	adds	r1, r4, r3
 8004a8a:	1c5a      	adds	r2, r3, #1
 8004a8c:	2030      	movs	r0, #48	; 0x30
 8004a8e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004a92:	4422      	add	r2, r4
 8004a94:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004a98:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004a9c:	3302      	adds	r3, #2
 8004a9e:	e7c7      	b.n	8004a30 <_printf_common+0x58>
 8004aa0:	2301      	movs	r3, #1
 8004aa2:	4622      	mov	r2, r4
 8004aa4:	4649      	mov	r1, r9
 8004aa6:	4638      	mov	r0, r7
 8004aa8:	47c0      	blx	r8
 8004aaa:	3001      	adds	r0, #1
 8004aac:	d0e6      	beq.n	8004a7c <_printf_common+0xa4>
 8004aae:	3601      	adds	r6, #1
 8004ab0:	e7d9      	b.n	8004a66 <_printf_common+0x8e>
	...

08004ab4 <_printf_i>:
 8004ab4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004ab8:	7e0f      	ldrb	r7, [r1, #24]
 8004aba:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004abc:	2f78      	cmp	r7, #120	; 0x78
 8004abe:	4691      	mov	r9, r2
 8004ac0:	4680      	mov	r8, r0
 8004ac2:	460c      	mov	r4, r1
 8004ac4:	469a      	mov	sl, r3
 8004ac6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004aca:	d807      	bhi.n	8004adc <_printf_i+0x28>
 8004acc:	2f62      	cmp	r7, #98	; 0x62
 8004ace:	d80a      	bhi.n	8004ae6 <_printf_i+0x32>
 8004ad0:	2f00      	cmp	r7, #0
 8004ad2:	f000 80d8 	beq.w	8004c86 <_printf_i+0x1d2>
 8004ad6:	2f58      	cmp	r7, #88	; 0x58
 8004ad8:	f000 80a3 	beq.w	8004c22 <_printf_i+0x16e>
 8004adc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004ae0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004ae4:	e03a      	b.n	8004b5c <_printf_i+0xa8>
 8004ae6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004aea:	2b15      	cmp	r3, #21
 8004aec:	d8f6      	bhi.n	8004adc <_printf_i+0x28>
 8004aee:	a101      	add	r1, pc, #4	; (adr r1, 8004af4 <_printf_i+0x40>)
 8004af0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004af4:	08004b4d 	.word	0x08004b4d
 8004af8:	08004b61 	.word	0x08004b61
 8004afc:	08004add 	.word	0x08004add
 8004b00:	08004add 	.word	0x08004add
 8004b04:	08004add 	.word	0x08004add
 8004b08:	08004add 	.word	0x08004add
 8004b0c:	08004b61 	.word	0x08004b61
 8004b10:	08004add 	.word	0x08004add
 8004b14:	08004add 	.word	0x08004add
 8004b18:	08004add 	.word	0x08004add
 8004b1c:	08004add 	.word	0x08004add
 8004b20:	08004c6d 	.word	0x08004c6d
 8004b24:	08004b91 	.word	0x08004b91
 8004b28:	08004c4f 	.word	0x08004c4f
 8004b2c:	08004add 	.word	0x08004add
 8004b30:	08004add 	.word	0x08004add
 8004b34:	08004c8f 	.word	0x08004c8f
 8004b38:	08004add 	.word	0x08004add
 8004b3c:	08004b91 	.word	0x08004b91
 8004b40:	08004add 	.word	0x08004add
 8004b44:	08004add 	.word	0x08004add
 8004b48:	08004c57 	.word	0x08004c57
 8004b4c:	682b      	ldr	r3, [r5, #0]
 8004b4e:	1d1a      	adds	r2, r3, #4
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	602a      	str	r2, [r5, #0]
 8004b54:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004b58:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004b5c:	2301      	movs	r3, #1
 8004b5e:	e0a3      	b.n	8004ca8 <_printf_i+0x1f4>
 8004b60:	6820      	ldr	r0, [r4, #0]
 8004b62:	6829      	ldr	r1, [r5, #0]
 8004b64:	0606      	lsls	r6, r0, #24
 8004b66:	f101 0304 	add.w	r3, r1, #4
 8004b6a:	d50a      	bpl.n	8004b82 <_printf_i+0xce>
 8004b6c:	680e      	ldr	r6, [r1, #0]
 8004b6e:	602b      	str	r3, [r5, #0]
 8004b70:	2e00      	cmp	r6, #0
 8004b72:	da03      	bge.n	8004b7c <_printf_i+0xc8>
 8004b74:	232d      	movs	r3, #45	; 0x2d
 8004b76:	4276      	negs	r6, r6
 8004b78:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004b7c:	485e      	ldr	r0, [pc, #376]	; (8004cf8 <_printf_i+0x244>)
 8004b7e:	230a      	movs	r3, #10
 8004b80:	e019      	b.n	8004bb6 <_printf_i+0x102>
 8004b82:	680e      	ldr	r6, [r1, #0]
 8004b84:	602b      	str	r3, [r5, #0]
 8004b86:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004b8a:	bf18      	it	ne
 8004b8c:	b236      	sxthne	r6, r6
 8004b8e:	e7ef      	b.n	8004b70 <_printf_i+0xbc>
 8004b90:	682b      	ldr	r3, [r5, #0]
 8004b92:	6820      	ldr	r0, [r4, #0]
 8004b94:	1d19      	adds	r1, r3, #4
 8004b96:	6029      	str	r1, [r5, #0]
 8004b98:	0601      	lsls	r1, r0, #24
 8004b9a:	d501      	bpl.n	8004ba0 <_printf_i+0xec>
 8004b9c:	681e      	ldr	r6, [r3, #0]
 8004b9e:	e002      	b.n	8004ba6 <_printf_i+0xf2>
 8004ba0:	0646      	lsls	r6, r0, #25
 8004ba2:	d5fb      	bpl.n	8004b9c <_printf_i+0xe8>
 8004ba4:	881e      	ldrh	r6, [r3, #0]
 8004ba6:	4854      	ldr	r0, [pc, #336]	; (8004cf8 <_printf_i+0x244>)
 8004ba8:	2f6f      	cmp	r7, #111	; 0x6f
 8004baa:	bf0c      	ite	eq
 8004bac:	2308      	moveq	r3, #8
 8004bae:	230a      	movne	r3, #10
 8004bb0:	2100      	movs	r1, #0
 8004bb2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004bb6:	6865      	ldr	r5, [r4, #4]
 8004bb8:	60a5      	str	r5, [r4, #8]
 8004bba:	2d00      	cmp	r5, #0
 8004bbc:	bfa2      	ittt	ge
 8004bbe:	6821      	ldrge	r1, [r4, #0]
 8004bc0:	f021 0104 	bicge.w	r1, r1, #4
 8004bc4:	6021      	strge	r1, [r4, #0]
 8004bc6:	b90e      	cbnz	r6, 8004bcc <_printf_i+0x118>
 8004bc8:	2d00      	cmp	r5, #0
 8004bca:	d04d      	beq.n	8004c68 <_printf_i+0x1b4>
 8004bcc:	4615      	mov	r5, r2
 8004bce:	fbb6 f1f3 	udiv	r1, r6, r3
 8004bd2:	fb03 6711 	mls	r7, r3, r1, r6
 8004bd6:	5dc7      	ldrb	r7, [r0, r7]
 8004bd8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004bdc:	4637      	mov	r7, r6
 8004bde:	42bb      	cmp	r3, r7
 8004be0:	460e      	mov	r6, r1
 8004be2:	d9f4      	bls.n	8004bce <_printf_i+0x11a>
 8004be4:	2b08      	cmp	r3, #8
 8004be6:	d10b      	bne.n	8004c00 <_printf_i+0x14c>
 8004be8:	6823      	ldr	r3, [r4, #0]
 8004bea:	07de      	lsls	r6, r3, #31
 8004bec:	d508      	bpl.n	8004c00 <_printf_i+0x14c>
 8004bee:	6923      	ldr	r3, [r4, #16]
 8004bf0:	6861      	ldr	r1, [r4, #4]
 8004bf2:	4299      	cmp	r1, r3
 8004bf4:	bfde      	ittt	le
 8004bf6:	2330      	movle	r3, #48	; 0x30
 8004bf8:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004bfc:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004c00:	1b52      	subs	r2, r2, r5
 8004c02:	6122      	str	r2, [r4, #16]
 8004c04:	f8cd a000 	str.w	sl, [sp]
 8004c08:	464b      	mov	r3, r9
 8004c0a:	aa03      	add	r2, sp, #12
 8004c0c:	4621      	mov	r1, r4
 8004c0e:	4640      	mov	r0, r8
 8004c10:	f7ff fee2 	bl	80049d8 <_printf_common>
 8004c14:	3001      	adds	r0, #1
 8004c16:	d14c      	bne.n	8004cb2 <_printf_i+0x1fe>
 8004c18:	f04f 30ff 	mov.w	r0, #4294967295
 8004c1c:	b004      	add	sp, #16
 8004c1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004c22:	4835      	ldr	r0, [pc, #212]	; (8004cf8 <_printf_i+0x244>)
 8004c24:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004c28:	6829      	ldr	r1, [r5, #0]
 8004c2a:	6823      	ldr	r3, [r4, #0]
 8004c2c:	f851 6b04 	ldr.w	r6, [r1], #4
 8004c30:	6029      	str	r1, [r5, #0]
 8004c32:	061d      	lsls	r5, r3, #24
 8004c34:	d514      	bpl.n	8004c60 <_printf_i+0x1ac>
 8004c36:	07df      	lsls	r7, r3, #31
 8004c38:	bf44      	itt	mi
 8004c3a:	f043 0320 	orrmi.w	r3, r3, #32
 8004c3e:	6023      	strmi	r3, [r4, #0]
 8004c40:	b91e      	cbnz	r6, 8004c4a <_printf_i+0x196>
 8004c42:	6823      	ldr	r3, [r4, #0]
 8004c44:	f023 0320 	bic.w	r3, r3, #32
 8004c48:	6023      	str	r3, [r4, #0]
 8004c4a:	2310      	movs	r3, #16
 8004c4c:	e7b0      	b.n	8004bb0 <_printf_i+0xfc>
 8004c4e:	6823      	ldr	r3, [r4, #0]
 8004c50:	f043 0320 	orr.w	r3, r3, #32
 8004c54:	6023      	str	r3, [r4, #0]
 8004c56:	2378      	movs	r3, #120	; 0x78
 8004c58:	4828      	ldr	r0, [pc, #160]	; (8004cfc <_printf_i+0x248>)
 8004c5a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004c5e:	e7e3      	b.n	8004c28 <_printf_i+0x174>
 8004c60:	0659      	lsls	r1, r3, #25
 8004c62:	bf48      	it	mi
 8004c64:	b2b6      	uxthmi	r6, r6
 8004c66:	e7e6      	b.n	8004c36 <_printf_i+0x182>
 8004c68:	4615      	mov	r5, r2
 8004c6a:	e7bb      	b.n	8004be4 <_printf_i+0x130>
 8004c6c:	682b      	ldr	r3, [r5, #0]
 8004c6e:	6826      	ldr	r6, [r4, #0]
 8004c70:	6961      	ldr	r1, [r4, #20]
 8004c72:	1d18      	adds	r0, r3, #4
 8004c74:	6028      	str	r0, [r5, #0]
 8004c76:	0635      	lsls	r5, r6, #24
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	d501      	bpl.n	8004c80 <_printf_i+0x1cc>
 8004c7c:	6019      	str	r1, [r3, #0]
 8004c7e:	e002      	b.n	8004c86 <_printf_i+0x1d2>
 8004c80:	0670      	lsls	r0, r6, #25
 8004c82:	d5fb      	bpl.n	8004c7c <_printf_i+0x1c8>
 8004c84:	8019      	strh	r1, [r3, #0]
 8004c86:	2300      	movs	r3, #0
 8004c88:	6123      	str	r3, [r4, #16]
 8004c8a:	4615      	mov	r5, r2
 8004c8c:	e7ba      	b.n	8004c04 <_printf_i+0x150>
 8004c8e:	682b      	ldr	r3, [r5, #0]
 8004c90:	1d1a      	adds	r2, r3, #4
 8004c92:	602a      	str	r2, [r5, #0]
 8004c94:	681d      	ldr	r5, [r3, #0]
 8004c96:	6862      	ldr	r2, [r4, #4]
 8004c98:	2100      	movs	r1, #0
 8004c9a:	4628      	mov	r0, r5
 8004c9c:	f7fb faa8 	bl	80001f0 <memchr>
 8004ca0:	b108      	cbz	r0, 8004ca6 <_printf_i+0x1f2>
 8004ca2:	1b40      	subs	r0, r0, r5
 8004ca4:	6060      	str	r0, [r4, #4]
 8004ca6:	6863      	ldr	r3, [r4, #4]
 8004ca8:	6123      	str	r3, [r4, #16]
 8004caa:	2300      	movs	r3, #0
 8004cac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004cb0:	e7a8      	b.n	8004c04 <_printf_i+0x150>
 8004cb2:	6923      	ldr	r3, [r4, #16]
 8004cb4:	462a      	mov	r2, r5
 8004cb6:	4649      	mov	r1, r9
 8004cb8:	4640      	mov	r0, r8
 8004cba:	47d0      	blx	sl
 8004cbc:	3001      	adds	r0, #1
 8004cbe:	d0ab      	beq.n	8004c18 <_printf_i+0x164>
 8004cc0:	6823      	ldr	r3, [r4, #0]
 8004cc2:	079b      	lsls	r3, r3, #30
 8004cc4:	d413      	bmi.n	8004cee <_printf_i+0x23a>
 8004cc6:	68e0      	ldr	r0, [r4, #12]
 8004cc8:	9b03      	ldr	r3, [sp, #12]
 8004cca:	4298      	cmp	r0, r3
 8004ccc:	bfb8      	it	lt
 8004cce:	4618      	movlt	r0, r3
 8004cd0:	e7a4      	b.n	8004c1c <_printf_i+0x168>
 8004cd2:	2301      	movs	r3, #1
 8004cd4:	4632      	mov	r2, r6
 8004cd6:	4649      	mov	r1, r9
 8004cd8:	4640      	mov	r0, r8
 8004cda:	47d0      	blx	sl
 8004cdc:	3001      	adds	r0, #1
 8004cde:	d09b      	beq.n	8004c18 <_printf_i+0x164>
 8004ce0:	3501      	adds	r5, #1
 8004ce2:	68e3      	ldr	r3, [r4, #12]
 8004ce4:	9903      	ldr	r1, [sp, #12]
 8004ce6:	1a5b      	subs	r3, r3, r1
 8004ce8:	42ab      	cmp	r3, r5
 8004cea:	dcf2      	bgt.n	8004cd2 <_printf_i+0x21e>
 8004cec:	e7eb      	b.n	8004cc6 <_printf_i+0x212>
 8004cee:	2500      	movs	r5, #0
 8004cf0:	f104 0619 	add.w	r6, r4, #25
 8004cf4:	e7f5      	b.n	8004ce2 <_printf_i+0x22e>
 8004cf6:	bf00      	nop
 8004cf8:	08006e9e 	.word	0x08006e9e
 8004cfc:	08006eaf 	.word	0x08006eaf

08004d00 <quorem>:
 8004d00:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d04:	6903      	ldr	r3, [r0, #16]
 8004d06:	690c      	ldr	r4, [r1, #16]
 8004d08:	42a3      	cmp	r3, r4
 8004d0a:	4607      	mov	r7, r0
 8004d0c:	f2c0 8081 	blt.w	8004e12 <quorem+0x112>
 8004d10:	3c01      	subs	r4, #1
 8004d12:	f101 0814 	add.w	r8, r1, #20
 8004d16:	f100 0514 	add.w	r5, r0, #20
 8004d1a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004d1e:	9301      	str	r3, [sp, #4]
 8004d20:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8004d24:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004d28:	3301      	adds	r3, #1
 8004d2a:	429a      	cmp	r2, r3
 8004d2c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8004d30:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8004d34:	fbb2 f6f3 	udiv	r6, r2, r3
 8004d38:	d331      	bcc.n	8004d9e <quorem+0x9e>
 8004d3a:	f04f 0e00 	mov.w	lr, #0
 8004d3e:	4640      	mov	r0, r8
 8004d40:	46ac      	mov	ip, r5
 8004d42:	46f2      	mov	sl, lr
 8004d44:	f850 2b04 	ldr.w	r2, [r0], #4
 8004d48:	b293      	uxth	r3, r2
 8004d4a:	fb06 e303 	mla	r3, r6, r3, lr
 8004d4e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8004d52:	b29b      	uxth	r3, r3
 8004d54:	ebaa 0303 	sub.w	r3, sl, r3
 8004d58:	f8dc a000 	ldr.w	sl, [ip]
 8004d5c:	0c12      	lsrs	r2, r2, #16
 8004d5e:	fa13 f38a 	uxtah	r3, r3, sl
 8004d62:	fb06 e202 	mla	r2, r6, r2, lr
 8004d66:	9300      	str	r3, [sp, #0]
 8004d68:	9b00      	ldr	r3, [sp, #0]
 8004d6a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8004d6e:	b292      	uxth	r2, r2
 8004d70:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8004d74:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004d78:	f8bd 3000 	ldrh.w	r3, [sp]
 8004d7c:	4581      	cmp	r9, r0
 8004d7e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004d82:	f84c 3b04 	str.w	r3, [ip], #4
 8004d86:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8004d8a:	d2db      	bcs.n	8004d44 <quorem+0x44>
 8004d8c:	f855 300b 	ldr.w	r3, [r5, fp]
 8004d90:	b92b      	cbnz	r3, 8004d9e <quorem+0x9e>
 8004d92:	9b01      	ldr	r3, [sp, #4]
 8004d94:	3b04      	subs	r3, #4
 8004d96:	429d      	cmp	r5, r3
 8004d98:	461a      	mov	r2, r3
 8004d9a:	d32e      	bcc.n	8004dfa <quorem+0xfa>
 8004d9c:	613c      	str	r4, [r7, #16]
 8004d9e:	4638      	mov	r0, r7
 8004da0:	f001 f8c4 	bl	8005f2c <__mcmp>
 8004da4:	2800      	cmp	r0, #0
 8004da6:	db24      	blt.n	8004df2 <quorem+0xf2>
 8004da8:	3601      	adds	r6, #1
 8004daa:	4628      	mov	r0, r5
 8004dac:	f04f 0c00 	mov.w	ip, #0
 8004db0:	f858 2b04 	ldr.w	r2, [r8], #4
 8004db4:	f8d0 e000 	ldr.w	lr, [r0]
 8004db8:	b293      	uxth	r3, r2
 8004dba:	ebac 0303 	sub.w	r3, ip, r3
 8004dbe:	0c12      	lsrs	r2, r2, #16
 8004dc0:	fa13 f38e 	uxtah	r3, r3, lr
 8004dc4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8004dc8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004dcc:	b29b      	uxth	r3, r3
 8004dce:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004dd2:	45c1      	cmp	r9, r8
 8004dd4:	f840 3b04 	str.w	r3, [r0], #4
 8004dd8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8004ddc:	d2e8      	bcs.n	8004db0 <quorem+0xb0>
 8004dde:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004de2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004de6:	b922      	cbnz	r2, 8004df2 <quorem+0xf2>
 8004de8:	3b04      	subs	r3, #4
 8004dea:	429d      	cmp	r5, r3
 8004dec:	461a      	mov	r2, r3
 8004dee:	d30a      	bcc.n	8004e06 <quorem+0x106>
 8004df0:	613c      	str	r4, [r7, #16]
 8004df2:	4630      	mov	r0, r6
 8004df4:	b003      	add	sp, #12
 8004df6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004dfa:	6812      	ldr	r2, [r2, #0]
 8004dfc:	3b04      	subs	r3, #4
 8004dfe:	2a00      	cmp	r2, #0
 8004e00:	d1cc      	bne.n	8004d9c <quorem+0x9c>
 8004e02:	3c01      	subs	r4, #1
 8004e04:	e7c7      	b.n	8004d96 <quorem+0x96>
 8004e06:	6812      	ldr	r2, [r2, #0]
 8004e08:	3b04      	subs	r3, #4
 8004e0a:	2a00      	cmp	r2, #0
 8004e0c:	d1f0      	bne.n	8004df0 <quorem+0xf0>
 8004e0e:	3c01      	subs	r4, #1
 8004e10:	e7eb      	b.n	8004dea <quorem+0xea>
 8004e12:	2000      	movs	r0, #0
 8004e14:	e7ee      	b.n	8004df4 <quorem+0xf4>
	...

08004e18 <_dtoa_r>:
 8004e18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e1c:	ed2d 8b04 	vpush	{d8-d9}
 8004e20:	ec57 6b10 	vmov	r6, r7, d0
 8004e24:	b093      	sub	sp, #76	; 0x4c
 8004e26:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8004e28:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8004e2c:	9106      	str	r1, [sp, #24]
 8004e2e:	ee10 aa10 	vmov	sl, s0
 8004e32:	4604      	mov	r4, r0
 8004e34:	9209      	str	r2, [sp, #36]	; 0x24
 8004e36:	930c      	str	r3, [sp, #48]	; 0x30
 8004e38:	46bb      	mov	fp, r7
 8004e3a:	b975      	cbnz	r5, 8004e5a <_dtoa_r+0x42>
 8004e3c:	2010      	movs	r0, #16
 8004e3e:	f000 fddd 	bl	80059fc <malloc>
 8004e42:	4602      	mov	r2, r0
 8004e44:	6260      	str	r0, [r4, #36]	; 0x24
 8004e46:	b920      	cbnz	r0, 8004e52 <_dtoa_r+0x3a>
 8004e48:	4ba7      	ldr	r3, [pc, #668]	; (80050e8 <_dtoa_r+0x2d0>)
 8004e4a:	21ea      	movs	r1, #234	; 0xea
 8004e4c:	48a7      	ldr	r0, [pc, #668]	; (80050ec <_dtoa_r+0x2d4>)
 8004e4e:	f001 fa75 	bl	800633c <__assert_func>
 8004e52:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8004e56:	6005      	str	r5, [r0, #0]
 8004e58:	60c5      	str	r5, [r0, #12]
 8004e5a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004e5c:	6819      	ldr	r1, [r3, #0]
 8004e5e:	b151      	cbz	r1, 8004e76 <_dtoa_r+0x5e>
 8004e60:	685a      	ldr	r2, [r3, #4]
 8004e62:	604a      	str	r2, [r1, #4]
 8004e64:	2301      	movs	r3, #1
 8004e66:	4093      	lsls	r3, r2
 8004e68:	608b      	str	r3, [r1, #8]
 8004e6a:	4620      	mov	r0, r4
 8004e6c:	f000 fe1c 	bl	8005aa8 <_Bfree>
 8004e70:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004e72:	2200      	movs	r2, #0
 8004e74:	601a      	str	r2, [r3, #0]
 8004e76:	1e3b      	subs	r3, r7, #0
 8004e78:	bfaa      	itet	ge
 8004e7a:	2300      	movge	r3, #0
 8004e7c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8004e80:	f8c8 3000 	strge.w	r3, [r8]
 8004e84:	4b9a      	ldr	r3, [pc, #616]	; (80050f0 <_dtoa_r+0x2d8>)
 8004e86:	bfbc      	itt	lt
 8004e88:	2201      	movlt	r2, #1
 8004e8a:	f8c8 2000 	strlt.w	r2, [r8]
 8004e8e:	ea33 030b 	bics.w	r3, r3, fp
 8004e92:	d11b      	bne.n	8004ecc <_dtoa_r+0xb4>
 8004e94:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004e96:	f242 730f 	movw	r3, #9999	; 0x270f
 8004e9a:	6013      	str	r3, [r2, #0]
 8004e9c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8004ea0:	4333      	orrs	r3, r6
 8004ea2:	f000 8592 	beq.w	80059ca <_dtoa_r+0xbb2>
 8004ea6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004ea8:	b963      	cbnz	r3, 8004ec4 <_dtoa_r+0xac>
 8004eaa:	4b92      	ldr	r3, [pc, #584]	; (80050f4 <_dtoa_r+0x2dc>)
 8004eac:	e022      	b.n	8004ef4 <_dtoa_r+0xdc>
 8004eae:	4b92      	ldr	r3, [pc, #584]	; (80050f8 <_dtoa_r+0x2e0>)
 8004eb0:	9301      	str	r3, [sp, #4]
 8004eb2:	3308      	adds	r3, #8
 8004eb4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8004eb6:	6013      	str	r3, [r2, #0]
 8004eb8:	9801      	ldr	r0, [sp, #4]
 8004eba:	b013      	add	sp, #76	; 0x4c
 8004ebc:	ecbd 8b04 	vpop	{d8-d9}
 8004ec0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004ec4:	4b8b      	ldr	r3, [pc, #556]	; (80050f4 <_dtoa_r+0x2dc>)
 8004ec6:	9301      	str	r3, [sp, #4]
 8004ec8:	3303      	adds	r3, #3
 8004eca:	e7f3      	b.n	8004eb4 <_dtoa_r+0x9c>
 8004ecc:	2200      	movs	r2, #0
 8004ece:	2300      	movs	r3, #0
 8004ed0:	4650      	mov	r0, sl
 8004ed2:	4659      	mov	r1, fp
 8004ed4:	f7fb fe00 	bl	8000ad8 <__aeabi_dcmpeq>
 8004ed8:	ec4b ab19 	vmov	d9, sl, fp
 8004edc:	4680      	mov	r8, r0
 8004ede:	b158      	cbz	r0, 8004ef8 <_dtoa_r+0xe0>
 8004ee0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004ee2:	2301      	movs	r3, #1
 8004ee4:	6013      	str	r3, [r2, #0]
 8004ee6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	f000 856b 	beq.w	80059c4 <_dtoa_r+0xbac>
 8004eee:	4883      	ldr	r0, [pc, #524]	; (80050fc <_dtoa_r+0x2e4>)
 8004ef0:	6018      	str	r0, [r3, #0]
 8004ef2:	1e43      	subs	r3, r0, #1
 8004ef4:	9301      	str	r3, [sp, #4]
 8004ef6:	e7df      	b.n	8004eb8 <_dtoa_r+0xa0>
 8004ef8:	ec4b ab10 	vmov	d0, sl, fp
 8004efc:	aa10      	add	r2, sp, #64	; 0x40
 8004efe:	a911      	add	r1, sp, #68	; 0x44
 8004f00:	4620      	mov	r0, r4
 8004f02:	f001 f8b9 	bl	8006078 <__d2b>
 8004f06:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8004f0a:	ee08 0a10 	vmov	s16, r0
 8004f0e:	2d00      	cmp	r5, #0
 8004f10:	f000 8084 	beq.w	800501c <_dtoa_r+0x204>
 8004f14:	ee19 3a90 	vmov	r3, s19
 8004f18:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004f1c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8004f20:	4656      	mov	r6, sl
 8004f22:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8004f26:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8004f2a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8004f2e:	4b74      	ldr	r3, [pc, #464]	; (8005100 <_dtoa_r+0x2e8>)
 8004f30:	2200      	movs	r2, #0
 8004f32:	4630      	mov	r0, r6
 8004f34:	4639      	mov	r1, r7
 8004f36:	f7fb f9af 	bl	8000298 <__aeabi_dsub>
 8004f3a:	a365      	add	r3, pc, #404	; (adr r3, 80050d0 <_dtoa_r+0x2b8>)
 8004f3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f40:	f7fb fb62 	bl	8000608 <__aeabi_dmul>
 8004f44:	a364      	add	r3, pc, #400	; (adr r3, 80050d8 <_dtoa_r+0x2c0>)
 8004f46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f4a:	f7fb f9a7 	bl	800029c <__adddf3>
 8004f4e:	4606      	mov	r6, r0
 8004f50:	4628      	mov	r0, r5
 8004f52:	460f      	mov	r7, r1
 8004f54:	f7fb faee 	bl	8000534 <__aeabi_i2d>
 8004f58:	a361      	add	r3, pc, #388	; (adr r3, 80050e0 <_dtoa_r+0x2c8>)
 8004f5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f5e:	f7fb fb53 	bl	8000608 <__aeabi_dmul>
 8004f62:	4602      	mov	r2, r0
 8004f64:	460b      	mov	r3, r1
 8004f66:	4630      	mov	r0, r6
 8004f68:	4639      	mov	r1, r7
 8004f6a:	f7fb f997 	bl	800029c <__adddf3>
 8004f6e:	4606      	mov	r6, r0
 8004f70:	460f      	mov	r7, r1
 8004f72:	f7fb fdf9 	bl	8000b68 <__aeabi_d2iz>
 8004f76:	2200      	movs	r2, #0
 8004f78:	9000      	str	r0, [sp, #0]
 8004f7a:	2300      	movs	r3, #0
 8004f7c:	4630      	mov	r0, r6
 8004f7e:	4639      	mov	r1, r7
 8004f80:	f7fb fdb4 	bl	8000aec <__aeabi_dcmplt>
 8004f84:	b150      	cbz	r0, 8004f9c <_dtoa_r+0x184>
 8004f86:	9800      	ldr	r0, [sp, #0]
 8004f88:	f7fb fad4 	bl	8000534 <__aeabi_i2d>
 8004f8c:	4632      	mov	r2, r6
 8004f8e:	463b      	mov	r3, r7
 8004f90:	f7fb fda2 	bl	8000ad8 <__aeabi_dcmpeq>
 8004f94:	b910      	cbnz	r0, 8004f9c <_dtoa_r+0x184>
 8004f96:	9b00      	ldr	r3, [sp, #0]
 8004f98:	3b01      	subs	r3, #1
 8004f9a:	9300      	str	r3, [sp, #0]
 8004f9c:	9b00      	ldr	r3, [sp, #0]
 8004f9e:	2b16      	cmp	r3, #22
 8004fa0:	d85a      	bhi.n	8005058 <_dtoa_r+0x240>
 8004fa2:	9a00      	ldr	r2, [sp, #0]
 8004fa4:	4b57      	ldr	r3, [pc, #348]	; (8005104 <_dtoa_r+0x2ec>)
 8004fa6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004faa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fae:	ec51 0b19 	vmov	r0, r1, d9
 8004fb2:	f7fb fd9b 	bl	8000aec <__aeabi_dcmplt>
 8004fb6:	2800      	cmp	r0, #0
 8004fb8:	d050      	beq.n	800505c <_dtoa_r+0x244>
 8004fba:	9b00      	ldr	r3, [sp, #0]
 8004fbc:	3b01      	subs	r3, #1
 8004fbe:	9300      	str	r3, [sp, #0]
 8004fc0:	2300      	movs	r3, #0
 8004fc2:	930b      	str	r3, [sp, #44]	; 0x2c
 8004fc4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8004fc6:	1b5d      	subs	r5, r3, r5
 8004fc8:	1e6b      	subs	r3, r5, #1
 8004fca:	9305      	str	r3, [sp, #20]
 8004fcc:	bf45      	ittet	mi
 8004fce:	f1c5 0301 	rsbmi	r3, r5, #1
 8004fd2:	9304      	strmi	r3, [sp, #16]
 8004fd4:	2300      	movpl	r3, #0
 8004fd6:	2300      	movmi	r3, #0
 8004fd8:	bf4c      	ite	mi
 8004fda:	9305      	strmi	r3, [sp, #20]
 8004fdc:	9304      	strpl	r3, [sp, #16]
 8004fde:	9b00      	ldr	r3, [sp, #0]
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	db3d      	blt.n	8005060 <_dtoa_r+0x248>
 8004fe4:	9b05      	ldr	r3, [sp, #20]
 8004fe6:	9a00      	ldr	r2, [sp, #0]
 8004fe8:	920a      	str	r2, [sp, #40]	; 0x28
 8004fea:	4413      	add	r3, r2
 8004fec:	9305      	str	r3, [sp, #20]
 8004fee:	2300      	movs	r3, #0
 8004ff0:	9307      	str	r3, [sp, #28]
 8004ff2:	9b06      	ldr	r3, [sp, #24]
 8004ff4:	2b09      	cmp	r3, #9
 8004ff6:	f200 8089 	bhi.w	800510c <_dtoa_r+0x2f4>
 8004ffa:	2b05      	cmp	r3, #5
 8004ffc:	bfc4      	itt	gt
 8004ffe:	3b04      	subgt	r3, #4
 8005000:	9306      	strgt	r3, [sp, #24]
 8005002:	9b06      	ldr	r3, [sp, #24]
 8005004:	f1a3 0302 	sub.w	r3, r3, #2
 8005008:	bfcc      	ite	gt
 800500a:	2500      	movgt	r5, #0
 800500c:	2501      	movle	r5, #1
 800500e:	2b03      	cmp	r3, #3
 8005010:	f200 8087 	bhi.w	8005122 <_dtoa_r+0x30a>
 8005014:	e8df f003 	tbb	[pc, r3]
 8005018:	59383a2d 	.word	0x59383a2d
 800501c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8005020:	441d      	add	r5, r3
 8005022:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8005026:	2b20      	cmp	r3, #32
 8005028:	bfc1      	itttt	gt
 800502a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800502e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8005032:	fa0b f303 	lslgt.w	r3, fp, r3
 8005036:	fa26 f000 	lsrgt.w	r0, r6, r0
 800503a:	bfda      	itte	le
 800503c:	f1c3 0320 	rsble	r3, r3, #32
 8005040:	fa06 f003 	lslle.w	r0, r6, r3
 8005044:	4318      	orrgt	r0, r3
 8005046:	f7fb fa65 	bl	8000514 <__aeabi_ui2d>
 800504a:	2301      	movs	r3, #1
 800504c:	4606      	mov	r6, r0
 800504e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8005052:	3d01      	subs	r5, #1
 8005054:	930e      	str	r3, [sp, #56]	; 0x38
 8005056:	e76a      	b.n	8004f2e <_dtoa_r+0x116>
 8005058:	2301      	movs	r3, #1
 800505a:	e7b2      	b.n	8004fc2 <_dtoa_r+0x1aa>
 800505c:	900b      	str	r0, [sp, #44]	; 0x2c
 800505e:	e7b1      	b.n	8004fc4 <_dtoa_r+0x1ac>
 8005060:	9b04      	ldr	r3, [sp, #16]
 8005062:	9a00      	ldr	r2, [sp, #0]
 8005064:	1a9b      	subs	r3, r3, r2
 8005066:	9304      	str	r3, [sp, #16]
 8005068:	4253      	negs	r3, r2
 800506a:	9307      	str	r3, [sp, #28]
 800506c:	2300      	movs	r3, #0
 800506e:	930a      	str	r3, [sp, #40]	; 0x28
 8005070:	e7bf      	b.n	8004ff2 <_dtoa_r+0x1da>
 8005072:	2300      	movs	r3, #0
 8005074:	9308      	str	r3, [sp, #32]
 8005076:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005078:	2b00      	cmp	r3, #0
 800507a:	dc55      	bgt.n	8005128 <_dtoa_r+0x310>
 800507c:	2301      	movs	r3, #1
 800507e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8005082:	461a      	mov	r2, r3
 8005084:	9209      	str	r2, [sp, #36]	; 0x24
 8005086:	e00c      	b.n	80050a2 <_dtoa_r+0x28a>
 8005088:	2301      	movs	r3, #1
 800508a:	e7f3      	b.n	8005074 <_dtoa_r+0x25c>
 800508c:	2300      	movs	r3, #0
 800508e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005090:	9308      	str	r3, [sp, #32]
 8005092:	9b00      	ldr	r3, [sp, #0]
 8005094:	4413      	add	r3, r2
 8005096:	9302      	str	r3, [sp, #8]
 8005098:	3301      	adds	r3, #1
 800509a:	2b01      	cmp	r3, #1
 800509c:	9303      	str	r3, [sp, #12]
 800509e:	bfb8      	it	lt
 80050a0:	2301      	movlt	r3, #1
 80050a2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80050a4:	2200      	movs	r2, #0
 80050a6:	6042      	str	r2, [r0, #4]
 80050a8:	2204      	movs	r2, #4
 80050aa:	f102 0614 	add.w	r6, r2, #20
 80050ae:	429e      	cmp	r6, r3
 80050b0:	6841      	ldr	r1, [r0, #4]
 80050b2:	d93d      	bls.n	8005130 <_dtoa_r+0x318>
 80050b4:	4620      	mov	r0, r4
 80050b6:	f000 fcb7 	bl	8005a28 <_Balloc>
 80050ba:	9001      	str	r0, [sp, #4]
 80050bc:	2800      	cmp	r0, #0
 80050be:	d13b      	bne.n	8005138 <_dtoa_r+0x320>
 80050c0:	4b11      	ldr	r3, [pc, #68]	; (8005108 <_dtoa_r+0x2f0>)
 80050c2:	4602      	mov	r2, r0
 80050c4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80050c8:	e6c0      	b.n	8004e4c <_dtoa_r+0x34>
 80050ca:	2301      	movs	r3, #1
 80050cc:	e7df      	b.n	800508e <_dtoa_r+0x276>
 80050ce:	bf00      	nop
 80050d0:	636f4361 	.word	0x636f4361
 80050d4:	3fd287a7 	.word	0x3fd287a7
 80050d8:	8b60c8b3 	.word	0x8b60c8b3
 80050dc:	3fc68a28 	.word	0x3fc68a28
 80050e0:	509f79fb 	.word	0x509f79fb
 80050e4:	3fd34413 	.word	0x3fd34413
 80050e8:	08006ecd 	.word	0x08006ecd
 80050ec:	08006ee4 	.word	0x08006ee4
 80050f0:	7ff00000 	.word	0x7ff00000
 80050f4:	08006ec9 	.word	0x08006ec9
 80050f8:	08006ec0 	.word	0x08006ec0
 80050fc:	08006e9d 	.word	0x08006e9d
 8005100:	3ff80000 	.word	0x3ff80000
 8005104:	08006fd8 	.word	0x08006fd8
 8005108:	08006f3f 	.word	0x08006f3f
 800510c:	2501      	movs	r5, #1
 800510e:	2300      	movs	r3, #0
 8005110:	9306      	str	r3, [sp, #24]
 8005112:	9508      	str	r5, [sp, #32]
 8005114:	f04f 33ff 	mov.w	r3, #4294967295
 8005118:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800511c:	2200      	movs	r2, #0
 800511e:	2312      	movs	r3, #18
 8005120:	e7b0      	b.n	8005084 <_dtoa_r+0x26c>
 8005122:	2301      	movs	r3, #1
 8005124:	9308      	str	r3, [sp, #32]
 8005126:	e7f5      	b.n	8005114 <_dtoa_r+0x2fc>
 8005128:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800512a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800512e:	e7b8      	b.n	80050a2 <_dtoa_r+0x28a>
 8005130:	3101      	adds	r1, #1
 8005132:	6041      	str	r1, [r0, #4]
 8005134:	0052      	lsls	r2, r2, #1
 8005136:	e7b8      	b.n	80050aa <_dtoa_r+0x292>
 8005138:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800513a:	9a01      	ldr	r2, [sp, #4]
 800513c:	601a      	str	r2, [r3, #0]
 800513e:	9b03      	ldr	r3, [sp, #12]
 8005140:	2b0e      	cmp	r3, #14
 8005142:	f200 809d 	bhi.w	8005280 <_dtoa_r+0x468>
 8005146:	2d00      	cmp	r5, #0
 8005148:	f000 809a 	beq.w	8005280 <_dtoa_r+0x468>
 800514c:	9b00      	ldr	r3, [sp, #0]
 800514e:	2b00      	cmp	r3, #0
 8005150:	dd32      	ble.n	80051b8 <_dtoa_r+0x3a0>
 8005152:	4ab7      	ldr	r2, [pc, #732]	; (8005430 <_dtoa_r+0x618>)
 8005154:	f003 030f 	and.w	r3, r3, #15
 8005158:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800515c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005160:	9b00      	ldr	r3, [sp, #0]
 8005162:	05d8      	lsls	r0, r3, #23
 8005164:	ea4f 1723 	mov.w	r7, r3, asr #4
 8005168:	d516      	bpl.n	8005198 <_dtoa_r+0x380>
 800516a:	4bb2      	ldr	r3, [pc, #712]	; (8005434 <_dtoa_r+0x61c>)
 800516c:	ec51 0b19 	vmov	r0, r1, d9
 8005170:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005174:	f7fb fb72 	bl	800085c <__aeabi_ddiv>
 8005178:	f007 070f 	and.w	r7, r7, #15
 800517c:	4682      	mov	sl, r0
 800517e:	468b      	mov	fp, r1
 8005180:	2503      	movs	r5, #3
 8005182:	4eac      	ldr	r6, [pc, #688]	; (8005434 <_dtoa_r+0x61c>)
 8005184:	b957      	cbnz	r7, 800519c <_dtoa_r+0x384>
 8005186:	4642      	mov	r2, r8
 8005188:	464b      	mov	r3, r9
 800518a:	4650      	mov	r0, sl
 800518c:	4659      	mov	r1, fp
 800518e:	f7fb fb65 	bl	800085c <__aeabi_ddiv>
 8005192:	4682      	mov	sl, r0
 8005194:	468b      	mov	fp, r1
 8005196:	e028      	b.n	80051ea <_dtoa_r+0x3d2>
 8005198:	2502      	movs	r5, #2
 800519a:	e7f2      	b.n	8005182 <_dtoa_r+0x36a>
 800519c:	07f9      	lsls	r1, r7, #31
 800519e:	d508      	bpl.n	80051b2 <_dtoa_r+0x39a>
 80051a0:	4640      	mov	r0, r8
 80051a2:	4649      	mov	r1, r9
 80051a4:	e9d6 2300 	ldrd	r2, r3, [r6]
 80051a8:	f7fb fa2e 	bl	8000608 <__aeabi_dmul>
 80051ac:	3501      	adds	r5, #1
 80051ae:	4680      	mov	r8, r0
 80051b0:	4689      	mov	r9, r1
 80051b2:	107f      	asrs	r7, r7, #1
 80051b4:	3608      	adds	r6, #8
 80051b6:	e7e5      	b.n	8005184 <_dtoa_r+0x36c>
 80051b8:	f000 809b 	beq.w	80052f2 <_dtoa_r+0x4da>
 80051bc:	9b00      	ldr	r3, [sp, #0]
 80051be:	4f9d      	ldr	r7, [pc, #628]	; (8005434 <_dtoa_r+0x61c>)
 80051c0:	425e      	negs	r6, r3
 80051c2:	4b9b      	ldr	r3, [pc, #620]	; (8005430 <_dtoa_r+0x618>)
 80051c4:	f006 020f 	and.w	r2, r6, #15
 80051c8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80051cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051d0:	ec51 0b19 	vmov	r0, r1, d9
 80051d4:	f7fb fa18 	bl	8000608 <__aeabi_dmul>
 80051d8:	1136      	asrs	r6, r6, #4
 80051da:	4682      	mov	sl, r0
 80051dc:	468b      	mov	fp, r1
 80051de:	2300      	movs	r3, #0
 80051e0:	2502      	movs	r5, #2
 80051e2:	2e00      	cmp	r6, #0
 80051e4:	d17a      	bne.n	80052dc <_dtoa_r+0x4c4>
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d1d3      	bne.n	8005192 <_dtoa_r+0x37a>
 80051ea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	f000 8082 	beq.w	80052f6 <_dtoa_r+0x4de>
 80051f2:	4b91      	ldr	r3, [pc, #580]	; (8005438 <_dtoa_r+0x620>)
 80051f4:	2200      	movs	r2, #0
 80051f6:	4650      	mov	r0, sl
 80051f8:	4659      	mov	r1, fp
 80051fa:	f7fb fc77 	bl	8000aec <__aeabi_dcmplt>
 80051fe:	2800      	cmp	r0, #0
 8005200:	d079      	beq.n	80052f6 <_dtoa_r+0x4de>
 8005202:	9b03      	ldr	r3, [sp, #12]
 8005204:	2b00      	cmp	r3, #0
 8005206:	d076      	beq.n	80052f6 <_dtoa_r+0x4de>
 8005208:	9b02      	ldr	r3, [sp, #8]
 800520a:	2b00      	cmp	r3, #0
 800520c:	dd36      	ble.n	800527c <_dtoa_r+0x464>
 800520e:	9b00      	ldr	r3, [sp, #0]
 8005210:	4650      	mov	r0, sl
 8005212:	4659      	mov	r1, fp
 8005214:	1e5f      	subs	r7, r3, #1
 8005216:	2200      	movs	r2, #0
 8005218:	4b88      	ldr	r3, [pc, #544]	; (800543c <_dtoa_r+0x624>)
 800521a:	f7fb f9f5 	bl	8000608 <__aeabi_dmul>
 800521e:	9e02      	ldr	r6, [sp, #8]
 8005220:	4682      	mov	sl, r0
 8005222:	468b      	mov	fp, r1
 8005224:	3501      	adds	r5, #1
 8005226:	4628      	mov	r0, r5
 8005228:	f7fb f984 	bl	8000534 <__aeabi_i2d>
 800522c:	4652      	mov	r2, sl
 800522e:	465b      	mov	r3, fp
 8005230:	f7fb f9ea 	bl	8000608 <__aeabi_dmul>
 8005234:	4b82      	ldr	r3, [pc, #520]	; (8005440 <_dtoa_r+0x628>)
 8005236:	2200      	movs	r2, #0
 8005238:	f7fb f830 	bl	800029c <__adddf3>
 800523c:	46d0      	mov	r8, sl
 800523e:	46d9      	mov	r9, fp
 8005240:	4682      	mov	sl, r0
 8005242:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8005246:	2e00      	cmp	r6, #0
 8005248:	d158      	bne.n	80052fc <_dtoa_r+0x4e4>
 800524a:	4b7e      	ldr	r3, [pc, #504]	; (8005444 <_dtoa_r+0x62c>)
 800524c:	2200      	movs	r2, #0
 800524e:	4640      	mov	r0, r8
 8005250:	4649      	mov	r1, r9
 8005252:	f7fb f821 	bl	8000298 <__aeabi_dsub>
 8005256:	4652      	mov	r2, sl
 8005258:	465b      	mov	r3, fp
 800525a:	4680      	mov	r8, r0
 800525c:	4689      	mov	r9, r1
 800525e:	f7fb fc63 	bl	8000b28 <__aeabi_dcmpgt>
 8005262:	2800      	cmp	r0, #0
 8005264:	f040 8295 	bne.w	8005792 <_dtoa_r+0x97a>
 8005268:	4652      	mov	r2, sl
 800526a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800526e:	4640      	mov	r0, r8
 8005270:	4649      	mov	r1, r9
 8005272:	f7fb fc3b 	bl	8000aec <__aeabi_dcmplt>
 8005276:	2800      	cmp	r0, #0
 8005278:	f040 8289 	bne.w	800578e <_dtoa_r+0x976>
 800527c:	ec5b ab19 	vmov	sl, fp, d9
 8005280:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005282:	2b00      	cmp	r3, #0
 8005284:	f2c0 8148 	blt.w	8005518 <_dtoa_r+0x700>
 8005288:	9a00      	ldr	r2, [sp, #0]
 800528a:	2a0e      	cmp	r2, #14
 800528c:	f300 8144 	bgt.w	8005518 <_dtoa_r+0x700>
 8005290:	4b67      	ldr	r3, [pc, #412]	; (8005430 <_dtoa_r+0x618>)
 8005292:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005296:	e9d3 8900 	ldrd	r8, r9, [r3]
 800529a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800529c:	2b00      	cmp	r3, #0
 800529e:	f280 80d5 	bge.w	800544c <_dtoa_r+0x634>
 80052a2:	9b03      	ldr	r3, [sp, #12]
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	f300 80d1 	bgt.w	800544c <_dtoa_r+0x634>
 80052aa:	f040 826f 	bne.w	800578c <_dtoa_r+0x974>
 80052ae:	4b65      	ldr	r3, [pc, #404]	; (8005444 <_dtoa_r+0x62c>)
 80052b0:	2200      	movs	r2, #0
 80052b2:	4640      	mov	r0, r8
 80052b4:	4649      	mov	r1, r9
 80052b6:	f7fb f9a7 	bl	8000608 <__aeabi_dmul>
 80052ba:	4652      	mov	r2, sl
 80052bc:	465b      	mov	r3, fp
 80052be:	f7fb fc29 	bl	8000b14 <__aeabi_dcmpge>
 80052c2:	9e03      	ldr	r6, [sp, #12]
 80052c4:	4637      	mov	r7, r6
 80052c6:	2800      	cmp	r0, #0
 80052c8:	f040 8245 	bne.w	8005756 <_dtoa_r+0x93e>
 80052cc:	9d01      	ldr	r5, [sp, #4]
 80052ce:	2331      	movs	r3, #49	; 0x31
 80052d0:	f805 3b01 	strb.w	r3, [r5], #1
 80052d4:	9b00      	ldr	r3, [sp, #0]
 80052d6:	3301      	adds	r3, #1
 80052d8:	9300      	str	r3, [sp, #0]
 80052da:	e240      	b.n	800575e <_dtoa_r+0x946>
 80052dc:	07f2      	lsls	r2, r6, #31
 80052de:	d505      	bpl.n	80052ec <_dtoa_r+0x4d4>
 80052e0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80052e4:	f7fb f990 	bl	8000608 <__aeabi_dmul>
 80052e8:	3501      	adds	r5, #1
 80052ea:	2301      	movs	r3, #1
 80052ec:	1076      	asrs	r6, r6, #1
 80052ee:	3708      	adds	r7, #8
 80052f0:	e777      	b.n	80051e2 <_dtoa_r+0x3ca>
 80052f2:	2502      	movs	r5, #2
 80052f4:	e779      	b.n	80051ea <_dtoa_r+0x3d2>
 80052f6:	9f00      	ldr	r7, [sp, #0]
 80052f8:	9e03      	ldr	r6, [sp, #12]
 80052fa:	e794      	b.n	8005226 <_dtoa_r+0x40e>
 80052fc:	9901      	ldr	r1, [sp, #4]
 80052fe:	4b4c      	ldr	r3, [pc, #304]	; (8005430 <_dtoa_r+0x618>)
 8005300:	4431      	add	r1, r6
 8005302:	910d      	str	r1, [sp, #52]	; 0x34
 8005304:	9908      	ldr	r1, [sp, #32]
 8005306:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800530a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800530e:	2900      	cmp	r1, #0
 8005310:	d043      	beq.n	800539a <_dtoa_r+0x582>
 8005312:	494d      	ldr	r1, [pc, #308]	; (8005448 <_dtoa_r+0x630>)
 8005314:	2000      	movs	r0, #0
 8005316:	f7fb faa1 	bl	800085c <__aeabi_ddiv>
 800531a:	4652      	mov	r2, sl
 800531c:	465b      	mov	r3, fp
 800531e:	f7fa ffbb 	bl	8000298 <__aeabi_dsub>
 8005322:	9d01      	ldr	r5, [sp, #4]
 8005324:	4682      	mov	sl, r0
 8005326:	468b      	mov	fp, r1
 8005328:	4649      	mov	r1, r9
 800532a:	4640      	mov	r0, r8
 800532c:	f7fb fc1c 	bl	8000b68 <__aeabi_d2iz>
 8005330:	4606      	mov	r6, r0
 8005332:	f7fb f8ff 	bl	8000534 <__aeabi_i2d>
 8005336:	4602      	mov	r2, r0
 8005338:	460b      	mov	r3, r1
 800533a:	4640      	mov	r0, r8
 800533c:	4649      	mov	r1, r9
 800533e:	f7fa ffab 	bl	8000298 <__aeabi_dsub>
 8005342:	3630      	adds	r6, #48	; 0x30
 8005344:	f805 6b01 	strb.w	r6, [r5], #1
 8005348:	4652      	mov	r2, sl
 800534a:	465b      	mov	r3, fp
 800534c:	4680      	mov	r8, r0
 800534e:	4689      	mov	r9, r1
 8005350:	f7fb fbcc 	bl	8000aec <__aeabi_dcmplt>
 8005354:	2800      	cmp	r0, #0
 8005356:	d163      	bne.n	8005420 <_dtoa_r+0x608>
 8005358:	4642      	mov	r2, r8
 800535a:	464b      	mov	r3, r9
 800535c:	4936      	ldr	r1, [pc, #216]	; (8005438 <_dtoa_r+0x620>)
 800535e:	2000      	movs	r0, #0
 8005360:	f7fa ff9a 	bl	8000298 <__aeabi_dsub>
 8005364:	4652      	mov	r2, sl
 8005366:	465b      	mov	r3, fp
 8005368:	f7fb fbc0 	bl	8000aec <__aeabi_dcmplt>
 800536c:	2800      	cmp	r0, #0
 800536e:	f040 80b5 	bne.w	80054dc <_dtoa_r+0x6c4>
 8005372:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005374:	429d      	cmp	r5, r3
 8005376:	d081      	beq.n	800527c <_dtoa_r+0x464>
 8005378:	4b30      	ldr	r3, [pc, #192]	; (800543c <_dtoa_r+0x624>)
 800537a:	2200      	movs	r2, #0
 800537c:	4650      	mov	r0, sl
 800537e:	4659      	mov	r1, fp
 8005380:	f7fb f942 	bl	8000608 <__aeabi_dmul>
 8005384:	4b2d      	ldr	r3, [pc, #180]	; (800543c <_dtoa_r+0x624>)
 8005386:	4682      	mov	sl, r0
 8005388:	468b      	mov	fp, r1
 800538a:	4640      	mov	r0, r8
 800538c:	4649      	mov	r1, r9
 800538e:	2200      	movs	r2, #0
 8005390:	f7fb f93a 	bl	8000608 <__aeabi_dmul>
 8005394:	4680      	mov	r8, r0
 8005396:	4689      	mov	r9, r1
 8005398:	e7c6      	b.n	8005328 <_dtoa_r+0x510>
 800539a:	4650      	mov	r0, sl
 800539c:	4659      	mov	r1, fp
 800539e:	f7fb f933 	bl	8000608 <__aeabi_dmul>
 80053a2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80053a4:	9d01      	ldr	r5, [sp, #4]
 80053a6:	930f      	str	r3, [sp, #60]	; 0x3c
 80053a8:	4682      	mov	sl, r0
 80053aa:	468b      	mov	fp, r1
 80053ac:	4649      	mov	r1, r9
 80053ae:	4640      	mov	r0, r8
 80053b0:	f7fb fbda 	bl	8000b68 <__aeabi_d2iz>
 80053b4:	4606      	mov	r6, r0
 80053b6:	f7fb f8bd 	bl	8000534 <__aeabi_i2d>
 80053ba:	3630      	adds	r6, #48	; 0x30
 80053bc:	4602      	mov	r2, r0
 80053be:	460b      	mov	r3, r1
 80053c0:	4640      	mov	r0, r8
 80053c2:	4649      	mov	r1, r9
 80053c4:	f7fa ff68 	bl	8000298 <__aeabi_dsub>
 80053c8:	f805 6b01 	strb.w	r6, [r5], #1
 80053cc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80053ce:	429d      	cmp	r5, r3
 80053d0:	4680      	mov	r8, r0
 80053d2:	4689      	mov	r9, r1
 80053d4:	f04f 0200 	mov.w	r2, #0
 80053d8:	d124      	bne.n	8005424 <_dtoa_r+0x60c>
 80053da:	4b1b      	ldr	r3, [pc, #108]	; (8005448 <_dtoa_r+0x630>)
 80053dc:	4650      	mov	r0, sl
 80053de:	4659      	mov	r1, fp
 80053e0:	f7fa ff5c 	bl	800029c <__adddf3>
 80053e4:	4602      	mov	r2, r0
 80053e6:	460b      	mov	r3, r1
 80053e8:	4640      	mov	r0, r8
 80053ea:	4649      	mov	r1, r9
 80053ec:	f7fb fb9c 	bl	8000b28 <__aeabi_dcmpgt>
 80053f0:	2800      	cmp	r0, #0
 80053f2:	d173      	bne.n	80054dc <_dtoa_r+0x6c4>
 80053f4:	4652      	mov	r2, sl
 80053f6:	465b      	mov	r3, fp
 80053f8:	4913      	ldr	r1, [pc, #76]	; (8005448 <_dtoa_r+0x630>)
 80053fa:	2000      	movs	r0, #0
 80053fc:	f7fa ff4c 	bl	8000298 <__aeabi_dsub>
 8005400:	4602      	mov	r2, r0
 8005402:	460b      	mov	r3, r1
 8005404:	4640      	mov	r0, r8
 8005406:	4649      	mov	r1, r9
 8005408:	f7fb fb70 	bl	8000aec <__aeabi_dcmplt>
 800540c:	2800      	cmp	r0, #0
 800540e:	f43f af35 	beq.w	800527c <_dtoa_r+0x464>
 8005412:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8005414:	1e6b      	subs	r3, r5, #1
 8005416:	930f      	str	r3, [sp, #60]	; 0x3c
 8005418:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800541c:	2b30      	cmp	r3, #48	; 0x30
 800541e:	d0f8      	beq.n	8005412 <_dtoa_r+0x5fa>
 8005420:	9700      	str	r7, [sp, #0]
 8005422:	e049      	b.n	80054b8 <_dtoa_r+0x6a0>
 8005424:	4b05      	ldr	r3, [pc, #20]	; (800543c <_dtoa_r+0x624>)
 8005426:	f7fb f8ef 	bl	8000608 <__aeabi_dmul>
 800542a:	4680      	mov	r8, r0
 800542c:	4689      	mov	r9, r1
 800542e:	e7bd      	b.n	80053ac <_dtoa_r+0x594>
 8005430:	08006fd8 	.word	0x08006fd8
 8005434:	08006fb0 	.word	0x08006fb0
 8005438:	3ff00000 	.word	0x3ff00000
 800543c:	40240000 	.word	0x40240000
 8005440:	401c0000 	.word	0x401c0000
 8005444:	40140000 	.word	0x40140000
 8005448:	3fe00000 	.word	0x3fe00000
 800544c:	9d01      	ldr	r5, [sp, #4]
 800544e:	4656      	mov	r6, sl
 8005450:	465f      	mov	r7, fp
 8005452:	4642      	mov	r2, r8
 8005454:	464b      	mov	r3, r9
 8005456:	4630      	mov	r0, r6
 8005458:	4639      	mov	r1, r7
 800545a:	f7fb f9ff 	bl	800085c <__aeabi_ddiv>
 800545e:	f7fb fb83 	bl	8000b68 <__aeabi_d2iz>
 8005462:	4682      	mov	sl, r0
 8005464:	f7fb f866 	bl	8000534 <__aeabi_i2d>
 8005468:	4642      	mov	r2, r8
 800546a:	464b      	mov	r3, r9
 800546c:	f7fb f8cc 	bl	8000608 <__aeabi_dmul>
 8005470:	4602      	mov	r2, r0
 8005472:	460b      	mov	r3, r1
 8005474:	4630      	mov	r0, r6
 8005476:	4639      	mov	r1, r7
 8005478:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800547c:	f7fa ff0c 	bl	8000298 <__aeabi_dsub>
 8005480:	f805 6b01 	strb.w	r6, [r5], #1
 8005484:	9e01      	ldr	r6, [sp, #4]
 8005486:	9f03      	ldr	r7, [sp, #12]
 8005488:	1bae      	subs	r6, r5, r6
 800548a:	42b7      	cmp	r7, r6
 800548c:	4602      	mov	r2, r0
 800548e:	460b      	mov	r3, r1
 8005490:	d135      	bne.n	80054fe <_dtoa_r+0x6e6>
 8005492:	f7fa ff03 	bl	800029c <__adddf3>
 8005496:	4642      	mov	r2, r8
 8005498:	464b      	mov	r3, r9
 800549a:	4606      	mov	r6, r0
 800549c:	460f      	mov	r7, r1
 800549e:	f7fb fb43 	bl	8000b28 <__aeabi_dcmpgt>
 80054a2:	b9d0      	cbnz	r0, 80054da <_dtoa_r+0x6c2>
 80054a4:	4642      	mov	r2, r8
 80054a6:	464b      	mov	r3, r9
 80054a8:	4630      	mov	r0, r6
 80054aa:	4639      	mov	r1, r7
 80054ac:	f7fb fb14 	bl	8000ad8 <__aeabi_dcmpeq>
 80054b0:	b110      	cbz	r0, 80054b8 <_dtoa_r+0x6a0>
 80054b2:	f01a 0f01 	tst.w	sl, #1
 80054b6:	d110      	bne.n	80054da <_dtoa_r+0x6c2>
 80054b8:	4620      	mov	r0, r4
 80054ba:	ee18 1a10 	vmov	r1, s16
 80054be:	f000 faf3 	bl	8005aa8 <_Bfree>
 80054c2:	2300      	movs	r3, #0
 80054c4:	9800      	ldr	r0, [sp, #0]
 80054c6:	702b      	strb	r3, [r5, #0]
 80054c8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80054ca:	3001      	adds	r0, #1
 80054cc:	6018      	str	r0, [r3, #0]
 80054ce:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	f43f acf1 	beq.w	8004eb8 <_dtoa_r+0xa0>
 80054d6:	601d      	str	r5, [r3, #0]
 80054d8:	e4ee      	b.n	8004eb8 <_dtoa_r+0xa0>
 80054da:	9f00      	ldr	r7, [sp, #0]
 80054dc:	462b      	mov	r3, r5
 80054de:	461d      	mov	r5, r3
 80054e0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80054e4:	2a39      	cmp	r2, #57	; 0x39
 80054e6:	d106      	bne.n	80054f6 <_dtoa_r+0x6de>
 80054e8:	9a01      	ldr	r2, [sp, #4]
 80054ea:	429a      	cmp	r2, r3
 80054ec:	d1f7      	bne.n	80054de <_dtoa_r+0x6c6>
 80054ee:	9901      	ldr	r1, [sp, #4]
 80054f0:	2230      	movs	r2, #48	; 0x30
 80054f2:	3701      	adds	r7, #1
 80054f4:	700a      	strb	r2, [r1, #0]
 80054f6:	781a      	ldrb	r2, [r3, #0]
 80054f8:	3201      	adds	r2, #1
 80054fa:	701a      	strb	r2, [r3, #0]
 80054fc:	e790      	b.n	8005420 <_dtoa_r+0x608>
 80054fe:	4ba6      	ldr	r3, [pc, #664]	; (8005798 <_dtoa_r+0x980>)
 8005500:	2200      	movs	r2, #0
 8005502:	f7fb f881 	bl	8000608 <__aeabi_dmul>
 8005506:	2200      	movs	r2, #0
 8005508:	2300      	movs	r3, #0
 800550a:	4606      	mov	r6, r0
 800550c:	460f      	mov	r7, r1
 800550e:	f7fb fae3 	bl	8000ad8 <__aeabi_dcmpeq>
 8005512:	2800      	cmp	r0, #0
 8005514:	d09d      	beq.n	8005452 <_dtoa_r+0x63a>
 8005516:	e7cf      	b.n	80054b8 <_dtoa_r+0x6a0>
 8005518:	9a08      	ldr	r2, [sp, #32]
 800551a:	2a00      	cmp	r2, #0
 800551c:	f000 80d7 	beq.w	80056ce <_dtoa_r+0x8b6>
 8005520:	9a06      	ldr	r2, [sp, #24]
 8005522:	2a01      	cmp	r2, #1
 8005524:	f300 80ba 	bgt.w	800569c <_dtoa_r+0x884>
 8005528:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800552a:	2a00      	cmp	r2, #0
 800552c:	f000 80b2 	beq.w	8005694 <_dtoa_r+0x87c>
 8005530:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8005534:	9e07      	ldr	r6, [sp, #28]
 8005536:	9d04      	ldr	r5, [sp, #16]
 8005538:	9a04      	ldr	r2, [sp, #16]
 800553a:	441a      	add	r2, r3
 800553c:	9204      	str	r2, [sp, #16]
 800553e:	9a05      	ldr	r2, [sp, #20]
 8005540:	2101      	movs	r1, #1
 8005542:	441a      	add	r2, r3
 8005544:	4620      	mov	r0, r4
 8005546:	9205      	str	r2, [sp, #20]
 8005548:	f000 fb66 	bl	8005c18 <__i2b>
 800554c:	4607      	mov	r7, r0
 800554e:	2d00      	cmp	r5, #0
 8005550:	dd0c      	ble.n	800556c <_dtoa_r+0x754>
 8005552:	9b05      	ldr	r3, [sp, #20]
 8005554:	2b00      	cmp	r3, #0
 8005556:	dd09      	ble.n	800556c <_dtoa_r+0x754>
 8005558:	42ab      	cmp	r3, r5
 800555a:	9a04      	ldr	r2, [sp, #16]
 800555c:	bfa8      	it	ge
 800555e:	462b      	movge	r3, r5
 8005560:	1ad2      	subs	r2, r2, r3
 8005562:	9204      	str	r2, [sp, #16]
 8005564:	9a05      	ldr	r2, [sp, #20]
 8005566:	1aed      	subs	r5, r5, r3
 8005568:	1ad3      	subs	r3, r2, r3
 800556a:	9305      	str	r3, [sp, #20]
 800556c:	9b07      	ldr	r3, [sp, #28]
 800556e:	b31b      	cbz	r3, 80055b8 <_dtoa_r+0x7a0>
 8005570:	9b08      	ldr	r3, [sp, #32]
 8005572:	2b00      	cmp	r3, #0
 8005574:	f000 80af 	beq.w	80056d6 <_dtoa_r+0x8be>
 8005578:	2e00      	cmp	r6, #0
 800557a:	dd13      	ble.n	80055a4 <_dtoa_r+0x78c>
 800557c:	4639      	mov	r1, r7
 800557e:	4632      	mov	r2, r6
 8005580:	4620      	mov	r0, r4
 8005582:	f000 fc09 	bl	8005d98 <__pow5mult>
 8005586:	ee18 2a10 	vmov	r2, s16
 800558a:	4601      	mov	r1, r0
 800558c:	4607      	mov	r7, r0
 800558e:	4620      	mov	r0, r4
 8005590:	f000 fb58 	bl	8005c44 <__multiply>
 8005594:	ee18 1a10 	vmov	r1, s16
 8005598:	4680      	mov	r8, r0
 800559a:	4620      	mov	r0, r4
 800559c:	f000 fa84 	bl	8005aa8 <_Bfree>
 80055a0:	ee08 8a10 	vmov	s16, r8
 80055a4:	9b07      	ldr	r3, [sp, #28]
 80055a6:	1b9a      	subs	r2, r3, r6
 80055a8:	d006      	beq.n	80055b8 <_dtoa_r+0x7a0>
 80055aa:	ee18 1a10 	vmov	r1, s16
 80055ae:	4620      	mov	r0, r4
 80055b0:	f000 fbf2 	bl	8005d98 <__pow5mult>
 80055b4:	ee08 0a10 	vmov	s16, r0
 80055b8:	2101      	movs	r1, #1
 80055ba:	4620      	mov	r0, r4
 80055bc:	f000 fb2c 	bl	8005c18 <__i2b>
 80055c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	4606      	mov	r6, r0
 80055c6:	f340 8088 	ble.w	80056da <_dtoa_r+0x8c2>
 80055ca:	461a      	mov	r2, r3
 80055cc:	4601      	mov	r1, r0
 80055ce:	4620      	mov	r0, r4
 80055d0:	f000 fbe2 	bl	8005d98 <__pow5mult>
 80055d4:	9b06      	ldr	r3, [sp, #24]
 80055d6:	2b01      	cmp	r3, #1
 80055d8:	4606      	mov	r6, r0
 80055da:	f340 8081 	ble.w	80056e0 <_dtoa_r+0x8c8>
 80055de:	f04f 0800 	mov.w	r8, #0
 80055e2:	6933      	ldr	r3, [r6, #16]
 80055e4:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80055e8:	6918      	ldr	r0, [r3, #16]
 80055ea:	f000 fac5 	bl	8005b78 <__hi0bits>
 80055ee:	f1c0 0020 	rsb	r0, r0, #32
 80055f2:	9b05      	ldr	r3, [sp, #20]
 80055f4:	4418      	add	r0, r3
 80055f6:	f010 001f 	ands.w	r0, r0, #31
 80055fa:	f000 8092 	beq.w	8005722 <_dtoa_r+0x90a>
 80055fe:	f1c0 0320 	rsb	r3, r0, #32
 8005602:	2b04      	cmp	r3, #4
 8005604:	f340 808a 	ble.w	800571c <_dtoa_r+0x904>
 8005608:	f1c0 001c 	rsb	r0, r0, #28
 800560c:	9b04      	ldr	r3, [sp, #16]
 800560e:	4403      	add	r3, r0
 8005610:	9304      	str	r3, [sp, #16]
 8005612:	9b05      	ldr	r3, [sp, #20]
 8005614:	4403      	add	r3, r0
 8005616:	4405      	add	r5, r0
 8005618:	9305      	str	r3, [sp, #20]
 800561a:	9b04      	ldr	r3, [sp, #16]
 800561c:	2b00      	cmp	r3, #0
 800561e:	dd07      	ble.n	8005630 <_dtoa_r+0x818>
 8005620:	ee18 1a10 	vmov	r1, s16
 8005624:	461a      	mov	r2, r3
 8005626:	4620      	mov	r0, r4
 8005628:	f000 fc10 	bl	8005e4c <__lshift>
 800562c:	ee08 0a10 	vmov	s16, r0
 8005630:	9b05      	ldr	r3, [sp, #20]
 8005632:	2b00      	cmp	r3, #0
 8005634:	dd05      	ble.n	8005642 <_dtoa_r+0x82a>
 8005636:	4631      	mov	r1, r6
 8005638:	461a      	mov	r2, r3
 800563a:	4620      	mov	r0, r4
 800563c:	f000 fc06 	bl	8005e4c <__lshift>
 8005640:	4606      	mov	r6, r0
 8005642:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005644:	2b00      	cmp	r3, #0
 8005646:	d06e      	beq.n	8005726 <_dtoa_r+0x90e>
 8005648:	ee18 0a10 	vmov	r0, s16
 800564c:	4631      	mov	r1, r6
 800564e:	f000 fc6d 	bl	8005f2c <__mcmp>
 8005652:	2800      	cmp	r0, #0
 8005654:	da67      	bge.n	8005726 <_dtoa_r+0x90e>
 8005656:	9b00      	ldr	r3, [sp, #0]
 8005658:	3b01      	subs	r3, #1
 800565a:	ee18 1a10 	vmov	r1, s16
 800565e:	9300      	str	r3, [sp, #0]
 8005660:	220a      	movs	r2, #10
 8005662:	2300      	movs	r3, #0
 8005664:	4620      	mov	r0, r4
 8005666:	f000 fa41 	bl	8005aec <__multadd>
 800566a:	9b08      	ldr	r3, [sp, #32]
 800566c:	ee08 0a10 	vmov	s16, r0
 8005670:	2b00      	cmp	r3, #0
 8005672:	f000 81b1 	beq.w	80059d8 <_dtoa_r+0xbc0>
 8005676:	2300      	movs	r3, #0
 8005678:	4639      	mov	r1, r7
 800567a:	220a      	movs	r2, #10
 800567c:	4620      	mov	r0, r4
 800567e:	f000 fa35 	bl	8005aec <__multadd>
 8005682:	9b02      	ldr	r3, [sp, #8]
 8005684:	2b00      	cmp	r3, #0
 8005686:	4607      	mov	r7, r0
 8005688:	f300 808e 	bgt.w	80057a8 <_dtoa_r+0x990>
 800568c:	9b06      	ldr	r3, [sp, #24]
 800568e:	2b02      	cmp	r3, #2
 8005690:	dc51      	bgt.n	8005736 <_dtoa_r+0x91e>
 8005692:	e089      	b.n	80057a8 <_dtoa_r+0x990>
 8005694:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005696:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800569a:	e74b      	b.n	8005534 <_dtoa_r+0x71c>
 800569c:	9b03      	ldr	r3, [sp, #12]
 800569e:	1e5e      	subs	r6, r3, #1
 80056a0:	9b07      	ldr	r3, [sp, #28]
 80056a2:	42b3      	cmp	r3, r6
 80056a4:	bfbf      	itttt	lt
 80056a6:	9b07      	ldrlt	r3, [sp, #28]
 80056a8:	9607      	strlt	r6, [sp, #28]
 80056aa:	1af2      	sublt	r2, r6, r3
 80056ac:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80056ae:	bfb6      	itet	lt
 80056b0:	189b      	addlt	r3, r3, r2
 80056b2:	1b9e      	subge	r6, r3, r6
 80056b4:	930a      	strlt	r3, [sp, #40]	; 0x28
 80056b6:	9b03      	ldr	r3, [sp, #12]
 80056b8:	bfb8      	it	lt
 80056ba:	2600      	movlt	r6, #0
 80056bc:	2b00      	cmp	r3, #0
 80056be:	bfb7      	itett	lt
 80056c0:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 80056c4:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 80056c8:	1a9d      	sublt	r5, r3, r2
 80056ca:	2300      	movlt	r3, #0
 80056cc:	e734      	b.n	8005538 <_dtoa_r+0x720>
 80056ce:	9e07      	ldr	r6, [sp, #28]
 80056d0:	9d04      	ldr	r5, [sp, #16]
 80056d2:	9f08      	ldr	r7, [sp, #32]
 80056d4:	e73b      	b.n	800554e <_dtoa_r+0x736>
 80056d6:	9a07      	ldr	r2, [sp, #28]
 80056d8:	e767      	b.n	80055aa <_dtoa_r+0x792>
 80056da:	9b06      	ldr	r3, [sp, #24]
 80056dc:	2b01      	cmp	r3, #1
 80056de:	dc18      	bgt.n	8005712 <_dtoa_r+0x8fa>
 80056e0:	f1ba 0f00 	cmp.w	sl, #0
 80056e4:	d115      	bne.n	8005712 <_dtoa_r+0x8fa>
 80056e6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80056ea:	b993      	cbnz	r3, 8005712 <_dtoa_r+0x8fa>
 80056ec:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80056f0:	0d1b      	lsrs	r3, r3, #20
 80056f2:	051b      	lsls	r3, r3, #20
 80056f4:	b183      	cbz	r3, 8005718 <_dtoa_r+0x900>
 80056f6:	9b04      	ldr	r3, [sp, #16]
 80056f8:	3301      	adds	r3, #1
 80056fa:	9304      	str	r3, [sp, #16]
 80056fc:	9b05      	ldr	r3, [sp, #20]
 80056fe:	3301      	adds	r3, #1
 8005700:	9305      	str	r3, [sp, #20]
 8005702:	f04f 0801 	mov.w	r8, #1
 8005706:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005708:	2b00      	cmp	r3, #0
 800570a:	f47f af6a 	bne.w	80055e2 <_dtoa_r+0x7ca>
 800570e:	2001      	movs	r0, #1
 8005710:	e76f      	b.n	80055f2 <_dtoa_r+0x7da>
 8005712:	f04f 0800 	mov.w	r8, #0
 8005716:	e7f6      	b.n	8005706 <_dtoa_r+0x8ee>
 8005718:	4698      	mov	r8, r3
 800571a:	e7f4      	b.n	8005706 <_dtoa_r+0x8ee>
 800571c:	f43f af7d 	beq.w	800561a <_dtoa_r+0x802>
 8005720:	4618      	mov	r0, r3
 8005722:	301c      	adds	r0, #28
 8005724:	e772      	b.n	800560c <_dtoa_r+0x7f4>
 8005726:	9b03      	ldr	r3, [sp, #12]
 8005728:	2b00      	cmp	r3, #0
 800572a:	dc37      	bgt.n	800579c <_dtoa_r+0x984>
 800572c:	9b06      	ldr	r3, [sp, #24]
 800572e:	2b02      	cmp	r3, #2
 8005730:	dd34      	ble.n	800579c <_dtoa_r+0x984>
 8005732:	9b03      	ldr	r3, [sp, #12]
 8005734:	9302      	str	r3, [sp, #8]
 8005736:	9b02      	ldr	r3, [sp, #8]
 8005738:	b96b      	cbnz	r3, 8005756 <_dtoa_r+0x93e>
 800573a:	4631      	mov	r1, r6
 800573c:	2205      	movs	r2, #5
 800573e:	4620      	mov	r0, r4
 8005740:	f000 f9d4 	bl	8005aec <__multadd>
 8005744:	4601      	mov	r1, r0
 8005746:	4606      	mov	r6, r0
 8005748:	ee18 0a10 	vmov	r0, s16
 800574c:	f000 fbee 	bl	8005f2c <__mcmp>
 8005750:	2800      	cmp	r0, #0
 8005752:	f73f adbb 	bgt.w	80052cc <_dtoa_r+0x4b4>
 8005756:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005758:	9d01      	ldr	r5, [sp, #4]
 800575a:	43db      	mvns	r3, r3
 800575c:	9300      	str	r3, [sp, #0]
 800575e:	f04f 0800 	mov.w	r8, #0
 8005762:	4631      	mov	r1, r6
 8005764:	4620      	mov	r0, r4
 8005766:	f000 f99f 	bl	8005aa8 <_Bfree>
 800576a:	2f00      	cmp	r7, #0
 800576c:	f43f aea4 	beq.w	80054b8 <_dtoa_r+0x6a0>
 8005770:	f1b8 0f00 	cmp.w	r8, #0
 8005774:	d005      	beq.n	8005782 <_dtoa_r+0x96a>
 8005776:	45b8      	cmp	r8, r7
 8005778:	d003      	beq.n	8005782 <_dtoa_r+0x96a>
 800577a:	4641      	mov	r1, r8
 800577c:	4620      	mov	r0, r4
 800577e:	f000 f993 	bl	8005aa8 <_Bfree>
 8005782:	4639      	mov	r1, r7
 8005784:	4620      	mov	r0, r4
 8005786:	f000 f98f 	bl	8005aa8 <_Bfree>
 800578a:	e695      	b.n	80054b8 <_dtoa_r+0x6a0>
 800578c:	2600      	movs	r6, #0
 800578e:	4637      	mov	r7, r6
 8005790:	e7e1      	b.n	8005756 <_dtoa_r+0x93e>
 8005792:	9700      	str	r7, [sp, #0]
 8005794:	4637      	mov	r7, r6
 8005796:	e599      	b.n	80052cc <_dtoa_r+0x4b4>
 8005798:	40240000 	.word	0x40240000
 800579c:	9b08      	ldr	r3, [sp, #32]
 800579e:	2b00      	cmp	r3, #0
 80057a0:	f000 80ca 	beq.w	8005938 <_dtoa_r+0xb20>
 80057a4:	9b03      	ldr	r3, [sp, #12]
 80057a6:	9302      	str	r3, [sp, #8]
 80057a8:	2d00      	cmp	r5, #0
 80057aa:	dd05      	ble.n	80057b8 <_dtoa_r+0x9a0>
 80057ac:	4639      	mov	r1, r7
 80057ae:	462a      	mov	r2, r5
 80057b0:	4620      	mov	r0, r4
 80057b2:	f000 fb4b 	bl	8005e4c <__lshift>
 80057b6:	4607      	mov	r7, r0
 80057b8:	f1b8 0f00 	cmp.w	r8, #0
 80057bc:	d05b      	beq.n	8005876 <_dtoa_r+0xa5e>
 80057be:	6879      	ldr	r1, [r7, #4]
 80057c0:	4620      	mov	r0, r4
 80057c2:	f000 f931 	bl	8005a28 <_Balloc>
 80057c6:	4605      	mov	r5, r0
 80057c8:	b928      	cbnz	r0, 80057d6 <_dtoa_r+0x9be>
 80057ca:	4b87      	ldr	r3, [pc, #540]	; (80059e8 <_dtoa_r+0xbd0>)
 80057cc:	4602      	mov	r2, r0
 80057ce:	f240 21ea 	movw	r1, #746	; 0x2ea
 80057d2:	f7ff bb3b 	b.w	8004e4c <_dtoa_r+0x34>
 80057d6:	693a      	ldr	r2, [r7, #16]
 80057d8:	3202      	adds	r2, #2
 80057da:	0092      	lsls	r2, r2, #2
 80057dc:	f107 010c 	add.w	r1, r7, #12
 80057e0:	300c      	adds	r0, #12
 80057e2:	f000 f913 	bl	8005a0c <memcpy>
 80057e6:	2201      	movs	r2, #1
 80057e8:	4629      	mov	r1, r5
 80057ea:	4620      	mov	r0, r4
 80057ec:	f000 fb2e 	bl	8005e4c <__lshift>
 80057f0:	9b01      	ldr	r3, [sp, #4]
 80057f2:	f103 0901 	add.w	r9, r3, #1
 80057f6:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 80057fa:	4413      	add	r3, r2
 80057fc:	9305      	str	r3, [sp, #20]
 80057fe:	f00a 0301 	and.w	r3, sl, #1
 8005802:	46b8      	mov	r8, r7
 8005804:	9304      	str	r3, [sp, #16]
 8005806:	4607      	mov	r7, r0
 8005808:	4631      	mov	r1, r6
 800580a:	ee18 0a10 	vmov	r0, s16
 800580e:	f7ff fa77 	bl	8004d00 <quorem>
 8005812:	4641      	mov	r1, r8
 8005814:	9002      	str	r0, [sp, #8]
 8005816:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800581a:	ee18 0a10 	vmov	r0, s16
 800581e:	f000 fb85 	bl	8005f2c <__mcmp>
 8005822:	463a      	mov	r2, r7
 8005824:	9003      	str	r0, [sp, #12]
 8005826:	4631      	mov	r1, r6
 8005828:	4620      	mov	r0, r4
 800582a:	f000 fb9b 	bl	8005f64 <__mdiff>
 800582e:	68c2      	ldr	r2, [r0, #12]
 8005830:	f109 3bff 	add.w	fp, r9, #4294967295
 8005834:	4605      	mov	r5, r0
 8005836:	bb02      	cbnz	r2, 800587a <_dtoa_r+0xa62>
 8005838:	4601      	mov	r1, r0
 800583a:	ee18 0a10 	vmov	r0, s16
 800583e:	f000 fb75 	bl	8005f2c <__mcmp>
 8005842:	4602      	mov	r2, r0
 8005844:	4629      	mov	r1, r5
 8005846:	4620      	mov	r0, r4
 8005848:	9207      	str	r2, [sp, #28]
 800584a:	f000 f92d 	bl	8005aa8 <_Bfree>
 800584e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8005852:	ea43 0102 	orr.w	r1, r3, r2
 8005856:	9b04      	ldr	r3, [sp, #16]
 8005858:	430b      	orrs	r3, r1
 800585a:	464d      	mov	r5, r9
 800585c:	d10f      	bne.n	800587e <_dtoa_r+0xa66>
 800585e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8005862:	d02a      	beq.n	80058ba <_dtoa_r+0xaa2>
 8005864:	9b03      	ldr	r3, [sp, #12]
 8005866:	2b00      	cmp	r3, #0
 8005868:	dd02      	ble.n	8005870 <_dtoa_r+0xa58>
 800586a:	9b02      	ldr	r3, [sp, #8]
 800586c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8005870:	f88b a000 	strb.w	sl, [fp]
 8005874:	e775      	b.n	8005762 <_dtoa_r+0x94a>
 8005876:	4638      	mov	r0, r7
 8005878:	e7ba      	b.n	80057f0 <_dtoa_r+0x9d8>
 800587a:	2201      	movs	r2, #1
 800587c:	e7e2      	b.n	8005844 <_dtoa_r+0xa2c>
 800587e:	9b03      	ldr	r3, [sp, #12]
 8005880:	2b00      	cmp	r3, #0
 8005882:	db04      	blt.n	800588e <_dtoa_r+0xa76>
 8005884:	9906      	ldr	r1, [sp, #24]
 8005886:	430b      	orrs	r3, r1
 8005888:	9904      	ldr	r1, [sp, #16]
 800588a:	430b      	orrs	r3, r1
 800588c:	d122      	bne.n	80058d4 <_dtoa_r+0xabc>
 800588e:	2a00      	cmp	r2, #0
 8005890:	ddee      	ble.n	8005870 <_dtoa_r+0xa58>
 8005892:	ee18 1a10 	vmov	r1, s16
 8005896:	2201      	movs	r2, #1
 8005898:	4620      	mov	r0, r4
 800589a:	f000 fad7 	bl	8005e4c <__lshift>
 800589e:	4631      	mov	r1, r6
 80058a0:	ee08 0a10 	vmov	s16, r0
 80058a4:	f000 fb42 	bl	8005f2c <__mcmp>
 80058a8:	2800      	cmp	r0, #0
 80058aa:	dc03      	bgt.n	80058b4 <_dtoa_r+0xa9c>
 80058ac:	d1e0      	bne.n	8005870 <_dtoa_r+0xa58>
 80058ae:	f01a 0f01 	tst.w	sl, #1
 80058b2:	d0dd      	beq.n	8005870 <_dtoa_r+0xa58>
 80058b4:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80058b8:	d1d7      	bne.n	800586a <_dtoa_r+0xa52>
 80058ba:	2339      	movs	r3, #57	; 0x39
 80058bc:	f88b 3000 	strb.w	r3, [fp]
 80058c0:	462b      	mov	r3, r5
 80058c2:	461d      	mov	r5, r3
 80058c4:	3b01      	subs	r3, #1
 80058c6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80058ca:	2a39      	cmp	r2, #57	; 0x39
 80058cc:	d071      	beq.n	80059b2 <_dtoa_r+0xb9a>
 80058ce:	3201      	adds	r2, #1
 80058d0:	701a      	strb	r2, [r3, #0]
 80058d2:	e746      	b.n	8005762 <_dtoa_r+0x94a>
 80058d4:	2a00      	cmp	r2, #0
 80058d6:	dd07      	ble.n	80058e8 <_dtoa_r+0xad0>
 80058d8:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80058dc:	d0ed      	beq.n	80058ba <_dtoa_r+0xaa2>
 80058de:	f10a 0301 	add.w	r3, sl, #1
 80058e2:	f88b 3000 	strb.w	r3, [fp]
 80058e6:	e73c      	b.n	8005762 <_dtoa_r+0x94a>
 80058e8:	9b05      	ldr	r3, [sp, #20]
 80058ea:	f809 ac01 	strb.w	sl, [r9, #-1]
 80058ee:	4599      	cmp	r9, r3
 80058f0:	d047      	beq.n	8005982 <_dtoa_r+0xb6a>
 80058f2:	ee18 1a10 	vmov	r1, s16
 80058f6:	2300      	movs	r3, #0
 80058f8:	220a      	movs	r2, #10
 80058fa:	4620      	mov	r0, r4
 80058fc:	f000 f8f6 	bl	8005aec <__multadd>
 8005900:	45b8      	cmp	r8, r7
 8005902:	ee08 0a10 	vmov	s16, r0
 8005906:	f04f 0300 	mov.w	r3, #0
 800590a:	f04f 020a 	mov.w	r2, #10
 800590e:	4641      	mov	r1, r8
 8005910:	4620      	mov	r0, r4
 8005912:	d106      	bne.n	8005922 <_dtoa_r+0xb0a>
 8005914:	f000 f8ea 	bl	8005aec <__multadd>
 8005918:	4680      	mov	r8, r0
 800591a:	4607      	mov	r7, r0
 800591c:	f109 0901 	add.w	r9, r9, #1
 8005920:	e772      	b.n	8005808 <_dtoa_r+0x9f0>
 8005922:	f000 f8e3 	bl	8005aec <__multadd>
 8005926:	4639      	mov	r1, r7
 8005928:	4680      	mov	r8, r0
 800592a:	2300      	movs	r3, #0
 800592c:	220a      	movs	r2, #10
 800592e:	4620      	mov	r0, r4
 8005930:	f000 f8dc 	bl	8005aec <__multadd>
 8005934:	4607      	mov	r7, r0
 8005936:	e7f1      	b.n	800591c <_dtoa_r+0xb04>
 8005938:	9b03      	ldr	r3, [sp, #12]
 800593a:	9302      	str	r3, [sp, #8]
 800593c:	9d01      	ldr	r5, [sp, #4]
 800593e:	ee18 0a10 	vmov	r0, s16
 8005942:	4631      	mov	r1, r6
 8005944:	f7ff f9dc 	bl	8004d00 <quorem>
 8005948:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800594c:	9b01      	ldr	r3, [sp, #4]
 800594e:	f805 ab01 	strb.w	sl, [r5], #1
 8005952:	1aea      	subs	r2, r5, r3
 8005954:	9b02      	ldr	r3, [sp, #8]
 8005956:	4293      	cmp	r3, r2
 8005958:	dd09      	ble.n	800596e <_dtoa_r+0xb56>
 800595a:	ee18 1a10 	vmov	r1, s16
 800595e:	2300      	movs	r3, #0
 8005960:	220a      	movs	r2, #10
 8005962:	4620      	mov	r0, r4
 8005964:	f000 f8c2 	bl	8005aec <__multadd>
 8005968:	ee08 0a10 	vmov	s16, r0
 800596c:	e7e7      	b.n	800593e <_dtoa_r+0xb26>
 800596e:	9b02      	ldr	r3, [sp, #8]
 8005970:	2b00      	cmp	r3, #0
 8005972:	bfc8      	it	gt
 8005974:	461d      	movgt	r5, r3
 8005976:	9b01      	ldr	r3, [sp, #4]
 8005978:	bfd8      	it	le
 800597a:	2501      	movle	r5, #1
 800597c:	441d      	add	r5, r3
 800597e:	f04f 0800 	mov.w	r8, #0
 8005982:	ee18 1a10 	vmov	r1, s16
 8005986:	2201      	movs	r2, #1
 8005988:	4620      	mov	r0, r4
 800598a:	f000 fa5f 	bl	8005e4c <__lshift>
 800598e:	4631      	mov	r1, r6
 8005990:	ee08 0a10 	vmov	s16, r0
 8005994:	f000 faca 	bl	8005f2c <__mcmp>
 8005998:	2800      	cmp	r0, #0
 800599a:	dc91      	bgt.n	80058c0 <_dtoa_r+0xaa8>
 800599c:	d102      	bne.n	80059a4 <_dtoa_r+0xb8c>
 800599e:	f01a 0f01 	tst.w	sl, #1
 80059a2:	d18d      	bne.n	80058c0 <_dtoa_r+0xaa8>
 80059a4:	462b      	mov	r3, r5
 80059a6:	461d      	mov	r5, r3
 80059a8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80059ac:	2a30      	cmp	r2, #48	; 0x30
 80059ae:	d0fa      	beq.n	80059a6 <_dtoa_r+0xb8e>
 80059b0:	e6d7      	b.n	8005762 <_dtoa_r+0x94a>
 80059b2:	9a01      	ldr	r2, [sp, #4]
 80059b4:	429a      	cmp	r2, r3
 80059b6:	d184      	bne.n	80058c2 <_dtoa_r+0xaaa>
 80059b8:	9b00      	ldr	r3, [sp, #0]
 80059ba:	3301      	adds	r3, #1
 80059bc:	9300      	str	r3, [sp, #0]
 80059be:	2331      	movs	r3, #49	; 0x31
 80059c0:	7013      	strb	r3, [r2, #0]
 80059c2:	e6ce      	b.n	8005762 <_dtoa_r+0x94a>
 80059c4:	4b09      	ldr	r3, [pc, #36]	; (80059ec <_dtoa_r+0xbd4>)
 80059c6:	f7ff ba95 	b.w	8004ef4 <_dtoa_r+0xdc>
 80059ca:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	f47f aa6e 	bne.w	8004eae <_dtoa_r+0x96>
 80059d2:	4b07      	ldr	r3, [pc, #28]	; (80059f0 <_dtoa_r+0xbd8>)
 80059d4:	f7ff ba8e 	b.w	8004ef4 <_dtoa_r+0xdc>
 80059d8:	9b02      	ldr	r3, [sp, #8]
 80059da:	2b00      	cmp	r3, #0
 80059dc:	dcae      	bgt.n	800593c <_dtoa_r+0xb24>
 80059de:	9b06      	ldr	r3, [sp, #24]
 80059e0:	2b02      	cmp	r3, #2
 80059e2:	f73f aea8 	bgt.w	8005736 <_dtoa_r+0x91e>
 80059e6:	e7a9      	b.n	800593c <_dtoa_r+0xb24>
 80059e8:	08006f3f 	.word	0x08006f3f
 80059ec:	08006e9c 	.word	0x08006e9c
 80059f0:	08006ec0 	.word	0x08006ec0

080059f4 <_localeconv_r>:
 80059f4:	4800      	ldr	r0, [pc, #0]	; (80059f8 <_localeconv_r+0x4>)
 80059f6:	4770      	bx	lr
 80059f8:	20000160 	.word	0x20000160

080059fc <malloc>:
 80059fc:	4b02      	ldr	r3, [pc, #8]	; (8005a08 <malloc+0xc>)
 80059fe:	4601      	mov	r1, r0
 8005a00:	6818      	ldr	r0, [r3, #0]
 8005a02:	f000 bc17 	b.w	8006234 <_malloc_r>
 8005a06:	bf00      	nop
 8005a08:	2000000c 	.word	0x2000000c

08005a0c <memcpy>:
 8005a0c:	440a      	add	r2, r1
 8005a0e:	4291      	cmp	r1, r2
 8005a10:	f100 33ff 	add.w	r3, r0, #4294967295
 8005a14:	d100      	bne.n	8005a18 <memcpy+0xc>
 8005a16:	4770      	bx	lr
 8005a18:	b510      	push	{r4, lr}
 8005a1a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005a1e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005a22:	4291      	cmp	r1, r2
 8005a24:	d1f9      	bne.n	8005a1a <memcpy+0xe>
 8005a26:	bd10      	pop	{r4, pc}

08005a28 <_Balloc>:
 8005a28:	b570      	push	{r4, r5, r6, lr}
 8005a2a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8005a2c:	4604      	mov	r4, r0
 8005a2e:	460d      	mov	r5, r1
 8005a30:	b976      	cbnz	r6, 8005a50 <_Balloc+0x28>
 8005a32:	2010      	movs	r0, #16
 8005a34:	f7ff ffe2 	bl	80059fc <malloc>
 8005a38:	4602      	mov	r2, r0
 8005a3a:	6260      	str	r0, [r4, #36]	; 0x24
 8005a3c:	b920      	cbnz	r0, 8005a48 <_Balloc+0x20>
 8005a3e:	4b18      	ldr	r3, [pc, #96]	; (8005aa0 <_Balloc+0x78>)
 8005a40:	4818      	ldr	r0, [pc, #96]	; (8005aa4 <_Balloc+0x7c>)
 8005a42:	2166      	movs	r1, #102	; 0x66
 8005a44:	f000 fc7a 	bl	800633c <__assert_func>
 8005a48:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005a4c:	6006      	str	r6, [r0, #0]
 8005a4e:	60c6      	str	r6, [r0, #12]
 8005a50:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8005a52:	68f3      	ldr	r3, [r6, #12]
 8005a54:	b183      	cbz	r3, 8005a78 <_Balloc+0x50>
 8005a56:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005a58:	68db      	ldr	r3, [r3, #12]
 8005a5a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8005a5e:	b9b8      	cbnz	r0, 8005a90 <_Balloc+0x68>
 8005a60:	2101      	movs	r1, #1
 8005a62:	fa01 f605 	lsl.w	r6, r1, r5
 8005a66:	1d72      	adds	r2, r6, #5
 8005a68:	0092      	lsls	r2, r2, #2
 8005a6a:	4620      	mov	r0, r4
 8005a6c:	f000 fb60 	bl	8006130 <_calloc_r>
 8005a70:	b160      	cbz	r0, 8005a8c <_Balloc+0x64>
 8005a72:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8005a76:	e00e      	b.n	8005a96 <_Balloc+0x6e>
 8005a78:	2221      	movs	r2, #33	; 0x21
 8005a7a:	2104      	movs	r1, #4
 8005a7c:	4620      	mov	r0, r4
 8005a7e:	f000 fb57 	bl	8006130 <_calloc_r>
 8005a82:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005a84:	60f0      	str	r0, [r6, #12]
 8005a86:	68db      	ldr	r3, [r3, #12]
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d1e4      	bne.n	8005a56 <_Balloc+0x2e>
 8005a8c:	2000      	movs	r0, #0
 8005a8e:	bd70      	pop	{r4, r5, r6, pc}
 8005a90:	6802      	ldr	r2, [r0, #0]
 8005a92:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8005a96:	2300      	movs	r3, #0
 8005a98:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005a9c:	e7f7      	b.n	8005a8e <_Balloc+0x66>
 8005a9e:	bf00      	nop
 8005aa0:	08006ecd 	.word	0x08006ecd
 8005aa4:	08006f50 	.word	0x08006f50

08005aa8 <_Bfree>:
 8005aa8:	b570      	push	{r4, r5, r6, lr}
 8005aaa:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8005aac:	4605      	mov	r5, r0
 8005aae:	460c      	mov	r4, r1
 8005ab0:	b976      	cbnz	r6, 8005ad0 <_Bfree+0x28>
 8005ab2:	2010      	movs	r0, #16
 8005ab4:	f7ff ffa2 	bl	80059fc <malloc>
 8005ab8:	4602      	mov	r2, r0
 8005aba:	6268      	str	r0, [r5, #36]	; 0x24
 8005abc:	b920      	cbnz	r0, 8005ac8 <_Bfree+0x20>
 8005abe:	4b09      	ldr	r3, [pc, #36]	; (8005ae4 <_Bfree+0x3c>)
 8005ac0:	4809      	ldr	r0, [pc, #36]	; (8005ae8 <_Bfree+0x40>)
 8005ac2:	218a      	movs	r1, #138	; 0x8a
 8005ac4:	f000 fc3a 	bl	800633c <__assert_func>
 8005ac8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005acc:	6006      	str	r6, [r0, #0]
 8005ace:	60c6      	str	r6, [r0, #12]
 8005ad0:	b13c      	cbz	r4, 8005ae2 <_Bfree+0x3a>
 8005ad2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005ad4:	6862      	ldr	r2, [r4, #4]
 8005ad6:	68db      	ldr	r3, [r3, #12]
 8005ad8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005adc:	6021      	str	r1, [r4, #0]
 8005ade:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8005ae2:	bd70      	pop	{r4, r5, r6, pc}
 8005ae4:	08006ecd 	.word	0x08006ecd
 8005ae8:	08006f50 	.word	0x08006f50

08005aec <__multadd>:
 8005aec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005af0:	690d      	ldr	r5, [r1, #16]
 8005af2:	4607      	mov	r7, r0
 8005af4:	460c      	mov	r4, r1
 8005af6:	461e      	mov	r6, r3
 8005af8:	f101 0c14 	add.w	ip, r1, #20
 8005afc:	2000      	movs	r0, #0
 8005afe:	f8dc 3000 	ldr.w	r3, [ip]
 8005b02:	b299      	uxth	r1, r3
 8005b04:	fb02 6101 	mla	r1, r2, r1, r6
 8005b08:	0c1e      	lsrs	r6, r3, #16
 8005b0a:	0c0b      	lsrs	r3, r1, #16
 8005b0c:	fb02 3306 	mla	r3, r2, r6, r3
 8005b10:	b289      	uxth	r1, r1
 8005b12:	3001      	adds	r0, #1
 8005b14:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8005b18:	4285      	cmp	r5, r0
 8005b1a:	f84c 1b04 	str.w	r1, [ip], #4
 8005b1e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8005b22:	dcec      	bgt.n	8005afe <__multadd+0x12>
 8005b24:	b30e      	cbz	r6, 8005b6a <__multadd+0x7e>
 8005b26:	68a3      	ldr	r3, [r4, #8]
 8005b28:	42ab      	cmp	r3, r5
 8005b2a:	dc19      	bgt.n	8005b60 <__multadd+0x74>
 8005b2c:	6861      	ldr	r1, [r4, #4]
 8005b2e:	4638      	mov	r0, r7
 8005b30:	3101      	adds	r1, #1
 8005b32:	f7ff ff79 	bl	8005a28 <_Balloc>
 8005b36:	4680      	mov	r8, r0
 8005b38:	b928      	cbnz	r0, 8005b46 <__multadd+0x5a>
 8005b3a:	4602      	mov	r2, r0
 8005b3c:	4b0c      	ldr	r3, [pc, #48]	; (8005b70 <__multadd+0x84>)
 8005b3e:	480d      	ldr	r0, [pc, #52]	; (8005b74 <__multadd+0x88>)
 8005b40:	21b5      	movs	r1, #181	; 0xb5
 8005b42:	f000 fbfb 	bl	800633c <__assert_func>
 8005b46:	6922      	ldr	r2, [r4, #16]
 8005b48:	3202      	adds	r2, #2
 8005b4a:	f104 010c 	add.w	r1, r4, #12
 8005b4e:	0092      	lsls	r2, r2, #2
 8005b50:	300c      	adds	r0, #12
 8005b52:	f7ff ff5b 	bl	8005a0c <memcpy>
 8005b56:	4621      	mov	r1, r4
 8005b58:	4638      	mov	r0, r7
 8005b5a:	f7ff ffa5 	bl	8005aa8 <_Bfree>
 8005b5e:	4644      	mov	r4, r8
 8005b60:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8005b64:	3501      	adds	r5, #1
 8005b66:	615e      	str	r6, [r3, #20]
 8005b68:	6125      	str	r5, [r4, #16]
 8005b6a:	4620      	mov	r0, r4
 8005b6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005b70:	08006f3f 	.word	0x08006f3f
 8005b74:	08006f50 	.word	0x08006f50

08005b78 <__hi0bits>:
 8005b78:	0c03      	lsrs	r3, r0, #16
 8005b7a:	041b      	lsls	r3, r3, #16
 8005b7c:	b9d3      	cbnz	r3, 8005bb4 <__hi0bits+0x3c>
 8005b7e:	0400      	lsls	r0, r0, #16
 8005b80:	2310      	movs	r3, #16
 8005b82:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8005b86:	bf04      	itt	eq
 8005b88:	0200      	lsleq	r0, r0, #8
 8005b8a:	3308      	addeq	r3, #8
 8005b8c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8005b90:	bf04      	itt	eq
 8005b92:	0100      	lsleq	r0, r0, #4
 8005b94:	3304      	addeq	r3, #4
 8005b96:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8005b9a:	bf04      	itt	eq
 8005b9c:	0080      	lsleq	r0, r0, #2
 8005b9e:	3302      	addeq	r3, #2
 8005ba0:	2800      	cmp	r0, #0
 8005ba2:	db05      	blt.n	8005bb0 <__hi0bits+0x38>
 8005ba4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8005ba8:	f103 0301 	add.w	r3, r3, #1
 8005bac:	bf08      	it	eq
 8005bae:	2320      	moveq	r3, #32
 8005bb0:	4618      	mov	r0, r3
 8005bb2:	4770      	bx	lr
 8005bb4:	2300      	movs	r3, #0
 8005bb6:	e7e4      	b.n	8005b82 <__hi0bits+0xa>

08005bb8 <__lo0bits>:
 8005bb8:	6803      	ldr	r3, [r0, #0]
 8005bba:	f013 0207 	ands.w	r2, r3, #7
 8005bbe:	4601      	mov	r1, r0
 8005bc0:	d00b      	beq.n	8005bda <__lo0bits+0x22>
 8005bc2:	07da      	lsls	r2, r3, #31
 8005bc4:	d423      	bmi.n	8005c0e <__lo0bits+0x56>
 8005bc6:	0798      	lsls	r0, r3, #30
 8005bc8:	bf49      	itett	mi
 8005bca:	085b      	lsrmi	r3, r3, #1
 8005bcc:	089b      	lsrpl	r3, r3, #2
 8005bce:	2001      	movmi	r0, #1
 8005bd0:	600b      	strmi	r3, [r1, #0]
 8005bd2:	bf5c      	itt	pl
 8005bd4:	600b      	strpl	r3, [r1, #0]
 8005bd6:	2002      	movpl	r0, #2
 8005bd8:	4770      	bx	lr
 8005bda:	b298      	uxth	r0, r3
 8005bdc:	b9a8      	cbnz	r0, 8005c0a <__lo0bits+0x52>
 8005bde:	0c1b      	lsrs	r3, r3, #16
 8005be0:	2010      	movs	r0, #16
 8005be2:	b2da      	uxtb	r2, r3
 8005be4:	b90a      	cbnz	r2, 8005bea <__lo0bits+0x32>
 8005be6:	3008      	adds	r0, #8
 8005be8:	0a1b      	lsrs	r3, r3, #8
 8005bea:	071a      	lsls	r2, r3, #28
 8005bec:	bf04      	itt	eq
 8005bee:	091b      	lsreq	r3, r3, #4
 8005bf0:	3004      	addeq	r0, #4
 8005bf2:	079a      	lsls	r2, r3, #30
 8005bf4:	bf04      	itt	eq
 8005bf6:	089b      	lsreq	r3, r3, #2
 8005bf8:	3002      	addeq	r0, #2
 8005bfa:	07da      	lsls	r2, r3, #31
 8005bfc:	d403      	bmi.n	8005c06 <__lo0bits+0x4e>
 8005bfe:	085b      	lsrs	r3, r3, #1
 8005c00:	f100 0001 	add.w	r0, r0, #1
 8005c04:	d005      	beq.n	8005c12 <__lo0bits+0x5a>
 8005c06:	600b      	str	r3, [r1, #0]
 8005c08:	4770      	bx	lr
 8005c0a:	4610      	mov	r0, r2
 8005c0c:	e7e9      	b.n	8005be2 <__lo0bits+0x2a>
 8005c0e:	2000      	movs	r0, #0
 8005c10:	4770      	bx	lr
 8005c12:	2020      	movs	r0, #32
 8005c14:	4770      	bx	lr
	...

08005c18 <__i2b>:
 8005c18:	b510      	push	{r4, lr}
 8005c1a:	460c      	mov	r4, r1
 8005c1c:	2101      	movs	r1, #1
 8005c1e:	f7ff ff03 	bl	8005a28 <_Balloc>
 8005c22:	4602      	mov	r2, r0
 8005c24:	b928      	cbnz	r0, 8005c32 <__i2b+0x1a>
 8005c26:	4b05      	ldr	r3, [pc, #20]	; (8005c3c <__i2b+0x24>)
 8005c28:	4805      	ldr	r0, [pc, #20]	; (8005c40 <__i2b+0x28>)
 8005c2a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8005c2e:	f000 fb85 	bl	800633c <__assert_func>
 8005c32:	2301      	movs	r3, #1
 8005c34:	6144      	str	r4, [r0, #20]
 8005c36:	6103      	str	r3, [r0, #16]
 8005c38:	bd10      	pop	{r4, pc}
 8005c3a:	bf00      	nop
 8005c3c:	08006f3f 	.word	0x08006f3f
 8005c40:	08006f50 	.word	0x08006f50

08005c44 <__multiply>:
 8005c44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c48:	4691      	mov	r9, r2
 8005c4a:	690a      	ldr	r2, [r1, #16]
 8005c4c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8005c50:	429a      	cmp	r2, r3
 8005c52:	bfb8      	it	lt
 8005c54:	460b      	movlt	r3, r1
 8005c56:	460c      	mov	r4, r1
 8005c58:	bfbc      	itt	lt
 8005c5a:	464c      	movlt	r4, r9
 8005c5c:	4699      	movlt	r9, r3
 8005c5e:	6927      	ldr	r7, [r4, #16]
 8005c60:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8005c64:	68a3      	ldr	r3, [r4, #8]
 8005c66:	6861      	ldr	r1, [r4, #4]
 8005c68:	eb07 060a 	add.w	r6, r7, sl
 8005c6c:	42b3      	cmp	r3, r6
 8005c6e:	b085      	sub	sp, #20
 8005c70:	bfb8      	it	lt
 8005c72:	3101      	addlt	r1, #1
 8005c74:	f7ff fed8 	bl	8005a28 <_Balloc>
 8005c78:	b930      	cbnz	r0, 8005c88 <__multiply+0x44>
 8005c7a:	4602      	mov	r2, r0
 8005c7c:	4b44      	ldr	r3, [pc, #272]	; (8005d90 <__multiply+0x14c>)
 8005c7e:	4845      	ldr	r0, [pc, #276]	; (8005d94 <__multiply+0x150>)
 8005c80:	f240 115d 	movw	r1, #349	; 0x15d
 8005c84:	f000 fb5a 	bl	800633c <__assert_func>
 8005c88:	f100 0514 	add.w	r5, r0, #20
 8005c8c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8005c90:	462b      	mov	r3, r5
 8005c92:	2200      	movs	r2, #0
 8005c94:	4543      	cmp	r3, r8
 8005c96:	d321      	bcc.n	8005cdc <__multiply+0x98>
 8005c98:	f104 0314 	add.w	r3, r4, #20
 8005c9c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8005ca0:	f109 0314 	add.w	r3, r9, #20
 8005ca4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8005ca8:	9202      	str	r2, [sp, #8]
 8005caa:	1b3a      	subs	r2, r7, r4
 8005cac:	3a15      	subs	r2, #21
 8005cae:	f022 0203 	bic.w	r2, r2, #3
 8005cb2:	3204      	adds	r2, #4
 8005cb4:	f104 0115 	add.w	r1, r4, #21
 8005cb8:	428f      	cmp	r7, r1
 8005cba:	bf38      	it	cc
 8005cbc:	2204      	movcc	r2, #4
 8005cbe:	9201      	str	r2, [sp, #4]
 8005cc0:	9a02      	ldr	r2, [sp, #8]
 8005cc2:	9303      	str	r3, [sp, #12]
 8005cc4:	429a      	cmp	r2, r3
 8005cc6:	d80c      	bhi.n	8005ce2 <__multiply+0x9e>
 8005cc8:	2e00      	cmp	r6, #0
 8005cca:	dd03      	ble.n	8005cd4 <__multiply+0x90>
 8005ccc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d05a      	beq.n	8005d8a <__multiply+0x146>
 8005cd4:	6106      	str	r6, [r0, #16]
 8005cd6:	b005      	add	sp, #20
 8005cd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005cdc:	f843 2b04 	str.w	r2, [r3], #4
 8005ce0:	e7d8      	b.n	8005c94 <__multiply+0x50>
 8005ce2:	f8b3 a000 	ldrh.w	sl, [r3]
 8005ce6:	f1ba 0f00 	cmp.w	sl, #0
 8005cea:	d024      	beq.n	8005d36 <__multiply+0xf2>
 8005cec:	f104 0e14 	add.w	lr, r4, #20
 8005cf0:	46a9      	mov	r9, r5
 8005cf2:	f04f 0c00 	mov.w	ip, #0
 8005cf6:	f85e 2b04 	ldr.w	r2, [lr], #4
 8005cfa:	f8d9 1000 	ldr.w	r1, [r9]
 8005cfe:	fa1f fb82 	uxth.w	fp, r2
 8005d02:	b289      	uxth	r1, r1
 8005d04:	fb0a 110b 	mla	r1, sl, fp, r1
 8005d08:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8005d0c:	f8d9 2000 	ldr.w	r2, [r9]
 8005d10:	4461      	add	r1, ip
 8005d12:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8005d16:	fb0a c20b 	mla	r2, sl, fp, ip
 8005d1a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8005d1e:	b289      	uxth	r1, r1
 8005d20:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8005d24:	4577      	cmp	r7, lr
 8005d26:	f849 1b04 	str.w	r1, [r9], #4
 8005d2a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8005d2e:	d8e2      	bhi.n	8005cf6 <__multiply+0xb2>
 8005d30:	9a01      	ldr	r2, [sp, #4]
 8005d32:	f845 c002 	str.w	ip, [r5, r2]
 8005d36:	9a03      	ldr	r2, [sp, #12]
 8005d38:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8005d3c:	3304      	adds	r3, #4
 8005d3e:	f1b9 0f00 	cmp.w	r9, #0
 8005d42:	d020      	beq.n	8005d86 <__multiply+0x142>
 8005d44:	6829      	ldr	r1, [r5, #0]
 8005d46:	f104 0c14 	add.w	ip, r4, #20
 8005d4a:	46ae      	mov	lr, r5
 8005d4c:	f04f 0a00 	mov.w	sl, #0
 8005d50:	f8bc b000 	ldrh.w	fp, [ip]
 8005d54:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8005d58:	fb09 220b 	mla	r2, r9, fp, r2
 8005d5c:	4492      	add	sl, r2
 8005d5e:	b289      	uxth	r1, r1
 8005d60:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8005d64:	f84e 1b04 	str.w	r1, [lr], #4
 8005d68:	f85c 2b04 	ldr.w	r2, [ip], #4
 8005d6c:	f8be 1000 	ldrh.w	r1, [lr]
 8005d70:	0c12      	lsrs	r2, r2, #16
 8005d72:	fb09 1102 	mla	r1, r9, r2, r1
 8005d76:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8005d7a:	4567      	cmp	r7, ip
 8005d7c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8005d80:	d8e6      	bhi.n	8005d50 <__multiply+0x10c>
 8005d82:	9a01      	ldr	r2, [sp, #4]
 8005d84:	50a9      	str	r1, [r5, r2]
 8005d86:	3504      	adds	r5, #4
 8005d88:	e79a      	b.n	8005cc0 <__multiply+0x7c>
 8005d8a:	3e01      	subs	r6, #1
 8005d8c:	e79c      	b.n	8005cc8 <__multiply+0x84>
 8005d8e:	bf00      	nop
 8005d90:	08006f3f 	.word	0x08006f3f
 8005d94:	08006f50 	.word	0x08006f50

08005d98 <__pow5mult>:
 8005d98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005d9c:	4615      	mov	r5, r2
 8005d9e:	f012 0203 	ands.w	r2, r2, #3
 8005da2:	4606      	mov	r6, r0
 8005da4:	460f      	mov	r7, r1
 8005da6:	d007      	beq.n	8005db8 <__pow5mult+0x20>
 8005da8:	4c25      	ldr	r4, [pc, #148]	; (8005e40 <__pow5mult+0xa8>)
 8005daa:	3a01      	subs	r2, #1
 8005dac:	2300      	movs	r3, #0
 8005dae:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8005db2:	f7ff fe9b 	bl	8005aec <__multadd>
 8005db6:	4607      	mov	r7, r0
 8005db8:	10ad      	asrs	r5, r5, #2
 8005dba:	d03d      	beq.n	8005e38 <__pow5mult+0xa0>
 8005dbc:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8005dbe:	b97c      	cbnz	r4, 8005de0 <__pow5mult+0x48>
 8005dc0:	2010      	movs	r0, #16
 8005dc2:	f7ff fe1b 	bl	80059fc <malloc>
 8005dc6:	4602      	mov	r2, r0
 8005dc8:	6270      	str	r0, [r6, #36]	; 0x24
 8005dca:	b928      	cbnz	r0, 8005dd8 <__pow5mult+0x40>
 8005dcc:	4b1d      	ldr	r3, [pc, #116]	; (8005e44 <__pow5mult+0xac>)
 8005dce:	481e      	ldr	r0, [pc, #120]	; (8005e48 <__pow5mult+0xb0>)
 8005dd0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8005dd4:	f000 fab2 	bl	800633c <__assert_func>
 8005dd8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005ddc:	6004      	str	r4, [r0, #0]
 8005dde:	60c4      	str	r4, [r0, #12]
 8005de0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8005de4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005de8:	b94c      	cbnz	r4, 8005dfe <__pow5mult+0x66>
 8005dea:	f240 2171 	movw	r1, #625	; 0x271
 8005dee:	4630      	mov	r0, r6
 8005df0:	f7ff ff12 	bl	8005c18 <__i2b>
 8005df4:	2300      	movs	r3, #0
 8005df6:	f8c8 0008 	str.w	r0, [r8, #8]
 8005dfa:	4604      	mov	r4, r0
 8005dfc:	6003      	str	r3, [r0, #0]
 8005dfe:	f04f 0900 	mov.w	r9, #0
 8005e02:	07eb      	lsls	r3, r5, #31
 8005e04:	d50a      	bpl.n	8005e1c <__pow5mult+0x84>
 8005e06:	4639      	mov	r1, r7
 8005e08:	4622      	mov	r2, r4
 8005e0a:	4630      	mov	r0, r6
 8005e0c:	f7ff ff1a 	bl	8005c44 <__multiply>
 8005e10:	4639      	mov	r1, r7
 8005e12:	4680      	mov	r8, r0
 8005e14:	4630      	mov	r0, r6
 8005e16:	f7ff fe47 	bl	8005aa8 <_Bfree>
 8005e1a:	4647      	mov	r7, r8
 8005e1c:	106d      	asrs	r5, r5, #1
 8005e1e:	d00b      	beq.n	8005e38 <__pow5mult+0xa0>
 8005e20:	6820      	ldr	r0, [r4, #0]
 8005e22:	b938      	cbnz	r0, 8005e34 <__pow5mult+0x9c>
 8005e24:	4622      	mov	r2, r4
 8005e26:	4621      	mov	r1, r4
 8005e28:	4630      	mov	r0, r6
 8005e2a:	f7ff ff0b 	bl	8005c44 <__multiply>
 8005e2e:	6020      	str	r0, [r4, #0]
 8005e30:	f8c0 9000 	str.w	r9, [r0]
 8005e34:	4604      	mov	r4, r0
 8005e36:	e7e4      	b.n	8005e02 <__pow5mult+0x6a>
 8005e38:	4638      	mov	r0, r7
 8005e3a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005e3e:	bf00      	nop
 8005e40:	080070a0 	.word	0x080070a0
 8005e44:	08006ecd 	.word	0x08006ecd
 8005e48:	08006f50 	.word	0x08006f50

08005e4c <__lshift>:
 8005e4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005e50:	460c      	mov	r4, r1
 8005e52:	6849      	ldr	r1, [r1, #4]
 8005e54:	6923      	ldr	r3, [r4, #16]
 8005e56:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8005e5a:	68a3      	ldr	r3, [r4, #8]
 8005e5c:	4607      	mov	r7, r0
 8005e5e:	4691      	mov	r9, r2
 8005e60:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8005e64:	f108 0601 	add.w	r6, r8, #1
 8005e68:	42b3      	cmp	r3, r6
 8005e6a:	db0b      	blt.n	8005e84 <__lshift+0x38>
 8005e6c:	4638      	mov	r0, r7
 8005e6e:	f7ff fddb 	bl	8005a28 <_Balloc>
 8005e72:	4605      	mov	r5, r0
 8005e74:	b948      	cbnz	r0, 8005e8a <__lshift+0x3e>
 8005e76:	4602      	mov	r2, r0
 8005e78:	4b2a      	ldr	r3, [pc, #168]	; (8005f24 <__lshift+0xd8>)
 8005e7a:	482b      	ldr	r0, [pc, #172]	; (8005f28 <__lshift+0xdc>)
 8005e7c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8005e80:	f000 fa5c 	bl	800633c <__assert_func>
 8005e84:	3101      	adds	r1, #1
 8005e86:	005b      	lsls	r3, r3, #1
 8005e88:	e7ee      	b.n	8005e68 <__lshift+0x1c>
 8005e8a:	2300      	movs	r3, #0
 8005e8c:	f100 0114 	add.w	r1, r0, #20
 8005e90:	f100 0210 	add.w	r2, r0, #16
 8005e94:	4618      	mov	r0, r3
 8005e96:	4553      	cmp	r3, sl
 8005e98:	db37      	blt.n	8005f0a <__lshift+0xbe>
 8005e9a:	6920      	ldr	r0, [r4, #16]
 8005e9c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005ea0:	f104 0314 	add.w	r3, r4, #20
 8005ea4:	f019 091f 	ands.w	r9, r9, #31
 8005ea8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8005eac:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8005eb0:	d02f      	beq.n	8005f12 <__lshift+0xc6>
 8005eb2:	f1c9 0e20 	rsb	lr, r9, #32
 8005eb6:	468a      	mov	sl, r1
 8005eb8:	f04f 0c00 	mov.w	ip, #0
 8005ebc:	681a      	ldr	r2, [r3, #0]
 8005ebe:	fa02 f209 	lsl.w	r2, r2, r9
 8005ec2:	ea42 020c 	orr.w	r2, r2, ip
 8005ec6:	f84a 2b04 	str.w	r2, [sl], #4
 8005eca:	f853 2b04 	ldr.w	r2, [r3], #4
 8005ece:	4298      	cmp	r0, r3
 8005ed0:	fa22 fc0e 	lsr.w	ip, r2, lr
 8005ed4:	d8f2      	bhi.n	8005ebc <__lshift+0x70>
 8005ed6:	1b03      	subs	r3, r0, r4
 8005ed8:	3b15      	subs	r3, #21
 8005eda:	f023 0303 	bic.w	r3, r3, #3
 8005ede:	3304      	adds	r3, #4
 8005ee0:	f104 0215 	add.w	r2, r4, #21
 8005ee4:	4290      	cmp	r0, r2
 8005ee6:	bf38      	it	cc
 8005ee8:	2304      	movcc	r3, #4
 8005eea:	f841 c003 	str.w	ip, [r1, r3]
 8005eee:	f1bc 0f00 	cmp.w	ip, #0
 8005ef2:	d001      	beq.n	8005ef8 <__lshift+0xac>
 8005ef4:	f108 0602 	add.w	r6, r8, #2
 8005ef8:	3e01      	subs	r6, #1
 8005efa:	4638      	mov	r0, r7
 8005efc:	612e      	str	r6, [r5, #16]
 8005efe:	4621      	mov	r1, r4
 8005f00:	f7ff fdd2 	bl	8005aa8 <_Bfree>
 8005f04:	4628      	mov	r0, r5
 8005f06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005f0a:	f842 0f04 	str.w	r0, [r2, #4]!
 8005f0e:	3301      	adds	r3, #1
 8005f10:	e7c1      	b.n	8005e96 <__lshift+0x4a>
 8005f12:	3904      	subs	r1, #4
 8005f14:	f853 2b04 	ldr.w	r2, [r3], #4
 8005f18:	f841 2f04 	str.w	r2, [r1, #4]!
 8005f1c:	4298      	cmp	r0, r3
 8005f1e:	d8f9      	bhi.n	8005f14 <__lshift+0xc8>
 8005f20:	e7ea      	b.n	8005ef8 <__lshift+0xac>
 8005f22:	bf00      	nop
 8005f24:	08006f3f 	.word	0x08006f3f
 8005f28:	08006f50 	.word	0x08006f50

08005f2c <__mcmp>:
 8005f2c:	b530      	push	{r4, r5, lr}
 8005f2e:	6902      	ldr	r2, [r0, #16]
 8005f30:	690c      	ldr	r4, [r1, #16]
 8005f32:	1b12      	subs	r2, r2, r4
 8005f34:	d10e      	bne.n	8005f54 <__mcmp+0x28>
 8005f36:	f100 0314 	add.w	r3, r0, #20
 8005f3a:	3114      	adds	r1, #20
 8005f3c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8005f40:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8005f44:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8005f48:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8005f4c:	42a5      	cmp	r5, r4
 8005f4e:	d003      	beq.n	8005f58 <__mcmp+0x2c>
 8005f50:	d305      	bcc.n	8005f5e <__mcmp+0x32>
 8005f52:	2201      	movs	r2, #1
 8005f54:	4610      	mov	r0, r2
 8005f56:	bd30      	pop	{r4, r5, pc}
 8005f58:	4283      	cmp	r3, r0
 8005f5a:	d3f3      	bcc.n	8005f44 <__mcmp+0x18>
 8005f5c:	e7fa      	b.n	8005f54 <__mcmp+0x28>
 8005f5e:	f04f 32ff 	mov.w	r2, #4294967295
 8005f62:	e7f7      	b.n	8005f54 <__mcmp+0x28>

08005f64 <__mdiff>:
 8005f64:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f68:	460c      	mov	r4, r1
 8005f6a:	4606      	mov	r6, r0
 8005f6c:	4611      	mov	r1, r2
 8005f6e:	4620      	mov	r0, r4
 8005f70:	4690      	mov	r8, r2
 8005f72:	f7ff ffdb 	bl	8005f2c <__mcmp>
 8005f76:	1e05      	subs	r5, r0, #0
 8005f78:	d110      	bne.n	8005f9c <__mdiff+0x38>
 8005f7a:	4629      	mov	r1, r5
 8005f7c:	4630      	mov	r0, r6
 8005f7e:	f7ff fd53 	bl	8005a28 <_Balloc>
 8005f82:	b930      	cbnz	r0, 8005f92 <__mdiff+0x2e>
 8005f84:	4b3a      	ldr	r3, [pc, #232]	; (8006070 <__mdiff+0x10c>)
 8005f86:	4602      	mov	r2, r0
 8005f88:	f240 2132 	movw	r1, #562	; 0x232
 8005f8c:	4839      	ldr	r0, [pc, #228]	; (8006074 <__mdiff+0x110>)
 8005f8e:	f000 f9d5 	bl	800633c <__assert_func>
 8005f92:	2301      	movs	r3, #1
 8005f94:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8005f98:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f9c:	bfa4      	itt	ge
 8005f9e:	4643      	movge	r3, r8
 8005fa0:	46a0      	movge	r8, r4
 8005fa2:	4630      	mov	r0, r6
 8005fa4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8005fa8:	bfa6      	itte	ge
 8005faa:	461c      	movge	r4, r3
 8005fac:	2500      	movge	r5, #0
 8005fae:	2501      	movlt	r5, #1
 8005fb0:	f7ff fd3a 	bl	8005a28 <_Balloc>
 8005fb4:	b920      	cbnz	r0, 8005fc0 <__mdiff+0x5c>
 8005fb6:	4b2e      	ldr	r3, [pc, #184]	; (8006070 <__mdiff+0x10c>)
 8005fb8:	4602      	mov	r2, r0
 8005fba:	f44f 7110 	mov.w	r1, #576	; 0x240
 8005fbe:	e7e5      	b.n	8005f8c <__mdiff+0x28>
 8005fc0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8005fc4:	6926      	ldr	r6, [r4, #16]
 8005fc6:	60c5      	str	r5, [r0, #12]
 8005fc8:	f104 0914 	add.w	r9, r4, #20
 8005fcc:	f108 0514 	add.w	r5, r8, #20
 8005fd0:	f100 0e14 	add.w	lr, r0, #20
 8005fd4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8005fd8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8005fdc:	f108 0210 	add.w	r2, r8, #16
 8005fe0:	46f2      	mov	sl, lr
 8005fe2:	2100      	movs	r1, #0
 8005fe4:	f859 3b04 	ldr.w	r3, [r9], #4
 8005fe8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8005fec:	fa1f f883 	uxth.w	r8, r3
 8005ff0:	fa11 f18b 	uxtah	r1, r1, fp
 8005ff4:	0c1b      	lsrs	r3, r3, #16
 8005ff6:	eba1 0808 	sub.w	r8, r1, r8
 8005ffa:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8005ffe:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8006002:	fa1f f888 	uxth.w	r8, r8
 8006006:	1419      	asrs	r1, r3, #16
 8006008:	454e      	cmp	r6, r9
 800600a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800600e:	f84a 3b04 	str.w	r3, [sl], #4
 8006012:	d8e7      	bhi.n	8005fe4 <__mdiff+0x80>
 8006014:	1b33      	subs	r3, r6, r4
 8006016:	3b15      	subs	r3, #21
 8006018:	f023 0303 	bic.w	r3, r3, #3
 800601c:	3304      	adds	r3, #4
 800601e:	3415      	adds	r4, #21
 8006020:	42a6      	cmp	r6, r4
 8006022:	bf38      	it	cc
 8006024:	2304      	movcc	r3, #4
 8006026:	441d      	add	r5, r3
 8006028:	4473      	add	r3, lr
 800602a:	469e      	mov	lr, r3
 800602c:	462e      	mov	r6, r5
 800602e:	4566      	cmp	r6, ip
 8006030:	d30e      	bcc.n	8006050 <__mdiff+0xec>
 8006032:	f10c 0203 	add.w	r2, ip, #3
 8006036:	1b52      	subs	r2, r2, r5
 8006038:	f022 0203 	bic.w	r2, r2, #3
 800603c:	3d03      	subs	r5, #3
 800603e:	45ac      	cmp	ip, r5
 8006040:	bf38      	it	cc
 8006042:	2200      	movcc	r2, #0
 8006044:	441a      	add	r2, r3
 8006046:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800604a:	b17b      	cbz	r3, 800606c <__mdiff+0x108>
 800604c:	6107      	str	r7, [r0, #16]
 800604e:	e7a3      	b.n	8005f98 <__mdiff+0x34>
 8006050:	f856 8b04 	ldr.w	r8, [r6], #4
 8006054:	fa11 f288 	uxtah	r2, r1, r8
 8006058:	1414      	asrs	r4, r2, #16
 800605a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800605e:	b292      	uxth	r2, r2
 8006060:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8006064:	f84e 2b04 	str.w	r2, [lr], #4
 8006068:	1421      	asrs	r1, r4, #16
 800606a:	e7e0      	b.n	800602e <__mdiff+0xca>
 800606c:	3f01      	subs	r7, #1
 800606e:	e7ea      	b.n	8006046 <__mdiff+0xe2>
 8006070:	08006f3f 	.word	0x08006f3f
 8006074:	08006f50 	.word	0x08006f50

08006078 <__d2b>:
 8006078:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800607c:	4689      	mov	r9, r1
 800607e:	2101      	movs	r1, #1
 8006080:	ec57 6b10 	vmov	r6, r7, d0
 8006084:	4690      	mov	r8, r2
 8006086:	f7ff fccf 	bl	8005a28 <_Balloc>
 800608a:	4604      	mov	r4, r0
 800608c:	b930      	cbnz	r0, 800609c <__d2b+0x24>
 800608e:	4602      	mov	r2, r0
 8006090:	4b25      	ldr	r3, [pc, #148]	; (8006128 <__d2b+0xb0>)
 8006092:	4826      	ldr	r0, [pc, #152]	; (800612c <__d2b+0xb4>)
 8006094:	f240 310a 	movw	r1, #778	; 0x30a
 8006098:	f000 f950 	bl	800633c <__assert_func>
 800609c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80060a0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80060a4:	bb35      	cbnz	r5, 80060f4 <__d2b+0x7c>
 80060a6:	2e00      	cmp	r6, #0
 80060a8:	9301      	str	r3, [sp, #4]
 80060aa:	d028      	beq.n	80060fe <__d2b+0x86>
 80060ac:	4668      	mov	r0, sp
 80060ae:	9600      	str	r6, [sp, #0]
 80060b0:	f7ff fd82 	bl	8005bb8 <__lo0bits>
 80060b4:	9900      	ldr	r1, [sp, #0]
 80060b6:	b300      	cbz	r0, 80060fa <__d2b+0x82>
 80060b8:	9a01      	ldr	r2, [sp, #4]
 80060ba:	f1c0 0320 	rsb	r3, r0, #32
 80060be:	fa02 f303 	lsl.w	r3, r2, r3
 80060c2:	430b      	orrs	r3, r1
 80060c4:	40c2      	lsrs	r2, r0
 80060c6:	6163      	str	r3, [r4, #20]
 80060c8:	9201      	str	r2, [sp, #4]
 80060ca:	9b01      	ldr	r3, [sp, #4]
 80060cc:	61a3      	str	r3, [r4, #24]
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	bf14      	ite	ne
 80060d2:	2202      	movne	r2, #2
 80060d4:	2201      	moveq	r2, #1
 80060d6:	6122      	str	r2, [r4, #16]
 80060d8:	b1d5      	cbz	r5, 8006110 <__d2b+0x98>
 80060da:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80060de:	4405      	add	r5, r0
 80060e0:	f8c9 5000 	str.w	r5, [r9]
 80060e4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80060e8:	f8c8 0000 	str.w	r0, [r8]
 80060ec:	4620      	mov	r0, r4
 80060ee:	b003      	add	sp, #12
 80060f0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80060f4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80060f8:	e7d5      	b.n	80060a6 <__d2b+0x2e>
 80060fa:	6161      	str	r1, [r4, #20]
 80060fc:	e7e5      	b.n	80060ca <__d2b+0x52>
 80060fe:	a801      	add	r0, sp, #4
 8006100:	f7ff fd5a 	bl	8005bb8 <__lo0bits>
 8006104:	9b01      	ldr	r3, [sp, #4]
 8006106:	6163      	str	r3, [r4, #20]
 8006108:	2201      	movs	r2, #1
 800610a:	6122      	str	r2, [r4, #16]
 800610c:	3020      	adds	r0, #32
 800610e:	e7e3      	b.n	80060d8 <__d2b+0x60>
 8006110:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8006114:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8006118:	f8c9 0000 	str.w	r0, [r9]
 800611c:	6918      	ldr	r0, [r3, #16]
 800611e:	f7ff fd2b 	bl	8005b78 <__hi0bits>
 8006122:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8006126:	e7df      	b.n	80060e8 <__d2b+0x70>
 8006128:	08006f3f 	.word	0x08006f3f
 800612c:	08006f50 	.word	0x08006f50

08006130 <_calloc_r>:
 8006130:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006132:	fba1 2402 	umull	r2, r4, r1, r2
 8006136:	b94c      	cbnz	r4, 800614c <_calloc_r+0x1c>
 8006138:	4611      	mov	r1, r2
 800613a:	9201      	str	r2, [sp, #4]
 800613c:	f000 f87a 	bl	8006234 <_malloc_r>
 8006140:	9a01      	ldr	r2, [sp, #4]
 8006142:	4605      	mov	r5, r0
 8006144:	b930      	cbnz	r0, 8006154 <_calloc_r+0x24>
 8006146:	4628      	mov	r0, r5
 8006148:	b003      	add	sp, #12
 800614a:	bd30      	pop	{r4, r5, pc}
 800614c:	220c      	movs	r2, #12
 800614e:	6002      	str	r2, [r0, #0]
 8006150:	2500      	movs	r5, #0
 8006152:	e7f8      	b.n	8006146 <_calloc_r+0x16>
 8006154:	4621      	mov	r1, r4
 8006156:	f7fe f961 	bl	800441c <memset>
 800615a:	e7f4      	b.n	8006146 <_calloc_r+0x16>

0800615c <_free_r>:
 800615c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800615e:	2900      	cmp	r1, #0
 8006160:	d044      	beq.n	80061ec <_free_r+0x90>
 8006162:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006166:	9001      	str	r0, [sp, #4]
 8006168:	2b00      	cmp	r3, #0
 800616a:	f1a1 0404 	sub.w	r4, r1, #4
 800616e:	bfb8      	it	lt
 8006170:	18e4      	addlt	r4, r4, r3
 8006172:	f000 f925 	bl	80063c0 <__malloc_lock>
 8006176:	4a1e      	ldr	r2, [pc, #120]	; (80061f0 <_free_r+0x94>)
 8006178:	9801      	ldr	r0, [sp, #4]
 800617a:	6813      	ldr	r3, [r2, #0]
 800617c:	b933      	cbnz	r3, 800618c <_free_r+0x30>
 800617e:	6063      	str	r3, [r4, #4]
 8006180:	6014      	str	r4, [r2, #0]
 8006182:	b003      	add	sp, #12
 8006184:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006188:	f000 b920 	b.w	80063cc <__malloc_unlock>
 800618c:	42a3      	cmp	r3, r4
 800618e:	d908      	bls.n	80061a2 <_free_r+0x46>
 8006190:	6825      	ldr	r5, [r4, #0]
 8006192:	1961      	adds	r1, r4, r5
 8006194:	428b      	cmp	r3, r1
 8006196:	bf01      	itttt	eq
 8006198:	6819      	ldreq	r1, [r3, #0]
 800619a:	685b      	ldreq	r3, [r3, #4]
 800619c:	1949      	addeq	r1, r1, r5
 800619e:	6021      	streq	r1, [r4, #0]
 80061a0:	e7ed      	b.n	800617e <_free_r+0x22>
 80061a2:	461a      	mov	r2, r3
 80061a4:	685b      	ldr	r3, [r3, #4]
 80061a6:	b10b      	cbz	r3, 80061ac <_free_r+0x50>
 80061a8:	42a3      	cmp	r3, r4
 80061aa:	d9fa      	bls.n	80061a2 <_free_r+0x46>
 80061ac:	6811      	ldr	r1, [r2, #0]
 80061ae:	1855      	adds	r5, r2, r1
 80061b0:	42a5      	cmp	r5, r4
 80061b2:	d10b      	bne.n	80061cc <_free_r+0x70>
 80061b4:	6824      	ldr	r4, [r4, #0]
 80061b6:	4421      	add	r1, r4
 80061b8:	1854      	adds	r4, r2, r1
 80061ba:	42a3      	cmp	r3, r4
 80061bc:	6011      	str	r1, [r2, #0]
 80061be:	d1e0      	bne.n	8006182 <_free_r+0x26>
 80061c0:	681c      	ldr	r4, [r3, #0]
 80061c2:	685b      	ldr	r3, [r3, #4]
 80061c4:	6053      	str	r3, [r2, #4]
 80061c6:	4421      	add	r1, r4
 80061c8:	6011      	str	r1, [r2, #0]
 80061ca:	e7da      	b.n	8006182 <_free_r+0x26>
 80061cc:	d902      	bls.n	80061d4 <_free_r+0x78>
 80061ce:	230c      	movs	r3, #12
 80061d0:	6003      	str	r3, [r0, #0]
 80061d2:	e7d6      	b.n	8006182 <_free_r+0x26>
 80061d4:	6825      	ldr	r5, [r4, #0]
 80061d6:	1961      	adds	r1, r4, r5
 80061d8:	428b      	cmp	r3, r1
 80061da:	bf04      	itt	eq
 80061dc:	6819      	ldreq	r1, [r3, #0]
 80061de:	685b      	ldreq	r3, [r3, #4]
 80061e0:	6063      	str	r3, [r4, #4]
 80061e2:	bf04      	itt	eq
 80061e4:	1949      	addeq	r1, r1, r5
 80061e6:	6021      	streq	r1, [r4, #0]
 80061e8:	6054      	str	r4, [r2, #4]
 80061ea:	e7ca      	b.n	8006182 <_free_r+0x26>
 80061ec:	b003      	add	sp, #12
 80061ee:	bd30      	pop	{r4, r5, pc}
 80061f0:	200002b4 	.word	0x200002b4

080061f4 <sbrk_aligned>:
 80061f4:	b570      	push	{r4, r5, r6, lr}
 80061f6:	4e0e      	ldr	r6, [pc, #56]	; (8006230 <sbrk_aligned+0x3c>)
 80061f8:	460c      	mov	r4, r1
 80061fa:	6831      	ldr	r1, [r6, #0]
 80061fc:	4605      	mov	r5, r0
 80061fe:	b911      	cbnz	r1, 8006206 <sbrk_aligned+0x12>
 8006200:	f000 f88c 	bl	800631c <_sbrk_r>
 8006204:	6030      	str	r0, [r6, #0]
 8006206:	4621      	mov	r1, r4
 8006208:	4628      	mov	r0, r5
 800620a:	f000 f887 	bl	800631c <_sbrk_r>
 800620e:	1c43      	adds	r3, r0, #1
 8006210:	d00a      	beq.n	8006228 <sbrk_aligned+0x34>
 8006212:	1cc4      	adds	r4, r0, #3
 8006214:	f024 0403 	bic.w	r4, r4, #3
 8006218:	42a0      	cmp	r0, r4
 800621a:	d007      	beq.n	800622c <sbrk_aligned+0x38>
 800621c:	1a21      	subs	r1, r4, r0
 800621e:	4628      	mov	r0, r5
 8006220:	f000 f87c 	bl	800631c <_sbrk_r>
 8006224:	3001      	adds	r0, #1
 8006226:	d101      	bne.n	800622c <sbrk_aligned+0x38>
 8006228:	f04f 34ff 	mov.w	r4, #4294967295
 800622c:	4620      	mov	r0, r4
 800622e:	bd70      	pop	{r4, r5, r6, pc}
 8006230:	200002b8 	.word	0x200002b8

08006234 <_malloc_r>:
 8006234:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006238:	1ccd      	adds	r5, r1, #3
 800623a:	f025 0503 	bic.w	r5, r5, #3
 800623e:	3508      	adds	r5, #8
 8006240:	2d0c      	cmp	r5, #12
 8006242:	bf38      	it	cc
 8006244:	250c      	movcc	r5, #12
 8006246:	2d00      	cmp	r5, #0
 8006248:	4607      	mov	r7, r0
 800624a:	db01      	blt.n	8006250 <_malloc_r+0x1c>
 800624c:	42a9      	cmp	r1, r5
 800624e:	d905      	bls.n	800625c <_malloc_r+0x28>
 8006250:	230c      	movs	r3, #12
 8006252:	603b      	str	r3, [r7, #0]
 8006254:	2600      	movs	r6, #0
 8006256:	4630      	mov	r0, r6
 8006258:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800625c:	4e2e      	ldr	r6, [pc, #184]	; (8006318 <_malloc_r+0xe4>)
 800625e:	f000 f8af 	bl	80063c0 <__malloc_lock>
 8006262:	6833      	ldr	r3, [r6, #0]
 8006264:	461c      	mov	r4, r3
 8006266:	bb34      	cbnz	r4, 80062b6 <_malloc_r+0x82>
 8006268:	4629      	mov	r1, r5
 800626a:	4638      	mov	r0, r7
 800626c:	f7ff ffc2 	bl	80061f4 <sbrk_aligned>
 8006270:	1c43      	adds	r3, r0, #1
 8006272:	4604      	mov	r4, r0
 8006274:	d14d      	bne.n	8006312 <_malloc_r+0xde>
 8006276:	6834      	ldr	r4, [r6, #0]
 8006278:	4626      	mov	r6, r4
 800627a:	2e00      	cmp	r6, #0
 800627c:	d140      	bne.n	8006300 <_malloc_r+0xcc>
 800627e:	6823      	ldr	r3, [r4, #0]
 8006280:	4631      	mov	r1, r6
 8006282:	4638      	mov	r0, r7
 8006284:	eb04 0803 	add.w	r8, r4, r3
 8006288:	f000 f848 	bl	800631c <_sbrk_r>
 800628c:	4580      	cmp	r8, r0
 800628e:	d13a      	bne.n	8006306 <_malloc_r+0xd2>
 8006290:	6821      	ldr	r1, [r4, #0]
 8006292:	3503      	adds	r5, #3
 8006294:	1a6d      	subs	r5, r5, r1
 8006296:	f025 0503 	bic.w	r5, r5, #3
 800629a:	3508      	adds	r5, #8
 800629c:	2d0c      	cmp	r5, #12
 800629e:	bf38      	it	cc
 80062a0:	250c      	movcc	r5, #12
 80062a2:	4629      	mov	r1, r5
 80062a4:	4638      	mov	r0, r7
 80062a6:	f7ff ffa5 	bl	80061f4 <sbrk_aligned>
 80062aa:	3001      	adds	r0, #1
 80062ac:	d02b      	beq.n	8006306 <_malloc_r+0xd2>
 80062ae:	6823      	ldr	r3, [r4, #0]
 80062b0:	442b      	add	r3, r5
 80062b2:	6023      	str	r3, [r4, #0]
 80062b4:	e00e      	b.n	80062d4 <_malloc_r+0xa0>
 80062b6:	6822      	ldr	r2, [r4, #0]
 80062b8:	1b52      	subs	r2, r2, r5
 80062ba:	d41e      	bmi.n	80062fa <_malloc_r+0xc6>
 80062bc:	2a0b      	cmp	r2, #11
 80062be:	d916      	bls.n	80062ee <_malloc_r+0xba>
 80062c0:	1961      	adds	r1, r4, r5
 80062c2:	42a3      	cmp	r3, r4
 80062c4:	6025      	str	r5, [r4, #0]
 80062c6:	bf18      	it	ne
 80062c8:	6059      	strne	r1, [r3, #4]
 80062ca:	6863      	ldr	r3, [r4, #4]
 80062cc:	bf08      	it	eq
 80062ce:	6031      	streq	r1, [r6, #0]
 80062d0:	5162      	str	r2, [r4, r5]
 80062d2:	604b      	str	r3, [r1, #4]
 80062d4:	4638      	mov	r0, r7
 80062d6:	f104 060b 	add.w	r6, r4, #11
 80062da:	f000 f877 	bl	80063cc <__malloc_unlock>
 80062de:	f026 0607 	bic.w	r6, r6, #7
 80062e2:	1d23      	adds	r3, r4, #4
 80062e4:	1af2      	subs	r2, r6, r3
 80062e6:	d0b6      	beq.n	8006256 <_malloc_r+0x22>
 80062e8:	1b9b      	subs	r3, r3, r6
 80062ea:	50a3      	str	r3, [r4, r2]
 80062ec:	e7b3      	b.n	8006256 <_malloc_r+0x22>
 80062ee:	6862      	ldr	r2, [r4, #4]
 80062f0:	42a3      	cmp	r3, r4
 80062f2:	bf0c      	ite	eq
 80062f4:	6032      	streq	r2, [r6, #0]
 80062f6:	605a      	strne	r2, [r3, #4]
 80062f8:	e7ec      	b.n	80062d4 <_malloc_r+0xa0>
 80062fa:	4623      	mov	r3, r4
 80062fc:	6864      	ldr	r4, [r4, #4]
 80062fe:	e7b2      	b.n	8006266 <_malloc_r+0x32>
 8006300:	4634      	mov	r4, r6
 8006302:	6876      	ldr	r6, [r6, #4]
 8006304:	e7b9      	b.n	800627a <_malloc_r+0x46>
 8006306:	230c      	movs	r3, #12
 8006308:	603b      	str	r3, [r7, #0]
 800630a:	4638      	mov	r0, r7
 800630c:	f000 f85e 	bl	80063cc <__malloc_unlock>
 8006310:	e7a1      	b.n	8006256 <_malloc_r+0x22>
 8006312:	6025      	str	r5, [r4, #0]
 8006314:	e7de      	b.n	80062d4 <_malloc_r+0xa0>
 8006316:	bf00      	nop
 8006318:	200002b4 	.word	0x200002b4

0800631c <_sbrk_r>:
 800631c:	b538      	push	{r3, r4, r5, lr}
 800631e:	4d06      	ldr	r5, [pc, #24]	; (8006338 <_sbrk_r+0x1c>)
 8006320:	2300      	movs	r3, #0
 8006322:	4604      	mov	r4, r0
 8006324:	4608      	mov	r0, r1
 8006326:	602b      	str	r3, [r5, #0]
 8006328:	f7fb f9f6 	bl	8001718 <_sbrk>
 800632c:	1c43      	adds	r3, r0, #1
 800632e:	d102      	bne.n	8006336 <_sbrk_r+0x1a>
 8006330:	682b      	ldr	r3, [r5, #0]
 8006332:	b103      	cbz	r3, 8006336 <_sbrk_r+0x1a>
 8006334:	6023      	str	r3, [r4, #0]
 8006336:	bd38      	pop	{r3, r4, r5, pc}
 8006338:	200002bc 	.word	0x200002bc

0800633c <__assert_func>:
 800633c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800633e:	4614      	mov	r4, r2
 8006340:	461a      	mov	r2, r3
 8006342:	4b09      	ldr	r3, [pc, #36]	; (8006368 <__assert_func+0x2c>)
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	4605      	mov	r5, r0
 8006348:	68d8      	ldr	r0, [r3, #12]
 800634a:	b14c      	cbz	r4, 8006360 <__assert_func+0x24>
 800634c:	4b07      	ldr	r3, [pc, #28]	; (800636c <__assert_func+0x30>)
 800634e:	9100      	str	r1, [sp, #0]
 8006350:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006354:	4906      	ldr	r1, [pc, #24]	; (8006370 <__assert_func+0x34>)
 8006356:	462b      	mov	r3, r5
 8006358:	f000 f80e 	bl	8006378 <fiprintf>
 800635c:	f000 fa64 	bl	8006828 <abort>
 8006360:	4b04      	ldr	r3, [pc, #16]	; (8006374 <__assert_func+0x38>)
 8006362:	461c      	mov	r4, r3
 8006364:	e7f3      	b.n	800634e <__assert_func+0x12>
 8006366:	bf00      	nop
 8006368:	2000000c 	.word	0x2000000c
 800636c:	080070ac 	.word	0x080070ac
 8006370:	080070b9 	.word	0x080070b9
 8006374:	080070e7 	.word	0x080070e7

08006378 <fiprintf>:
 8006378:	b40e      	push	{r1, r2, r3}
 800637a:	b503      	push	{r0, r1, lr}
 800637c:	4601      	mov	r1, r0
 800637e:	ab03      	add	r3, sp, #12
 8006380:	4805      	ldr	r0, [pc, #20]	; (8006398 <fiprintf+0x20>)
 8006382:	f853 2b04 	ldr.w	r2, [r3], #4
 8006386:	6800      	ldr	r0, [r0, #0]
 8006388:	9301      	str	r3, [sp, #4]
 800638a:	f000 f84f 	bl	800642c <_vfiprintf_r>
 800638e:	b002      	add	sp, #8
 8006390:	f85d eb04 	ldr.w	lr, [sp], #4
 8006394:	b003      	add	sp, #12
 8006396:	4770      	bx	lr
 8006398:	2000000c 	.word	0x2000000c

0800639c <__ascii_mbtowc>:
 800639c:	b082      	sub	sp, #8
 800639e:	b901      	cbnz	r1, 80063a2 <__ascii_mbtowc+0x6>
 80063a0:	a901      	add	r1, sp, #4
 80063a2:	b142      	cbz	r2, 80063b6 <__ascii_mbtowc+0x1a>
 80063a4:	b14b      	cbz	r3, 80063ba <__ascii_mbtowc+0x1e>
 80063a6:	7813      	ldrb	r3, [r2, #0]
 80063a8:	600b      	str	r3, [r1, #0]
 80063aa:	7812      	ldrb	r2, [r2, #0]
 80063ac:	1e10      	subs	r0, r2, #0
 80063ae:	bf18      	it	ne
 80063b0:	2001      	movne	r0, #1
 80063b2:	b002      	add	sp, #8
 80063b4:	4770      	bx	lr
 80063b6:	4610      	mov	r0, r2
 80063b8:	e7fb      	b.n	80063b2 <__ascii_mbtowc+0x16>
 80063ba:	f06f 0001 	mvn.w	r0, #1
 80063be:	e7f8      	b.n	80063b2 <__ascii_mbtowc+0x16>

080063c0 <__malloc_lock>:
 80063c0:	4801      	ldr	r0, [pc, #4]	; (80063c8 <__malloc_lock+0x8>)
 80063c2:	f000 bbf1 	b.w	8006ba8 <__retarget_lock_acquire_recursive>
 80063c6:	bf00      	nop
 80063c8:	200002c0 	.word	0x200002c0

080063cc <__malloc_unlock>:
 80063cc:	4801      	ldr	r0, [pc, #4]	; (80063d4 <__malloc_unlock+0x8>)
 80063ce:	f000 bbec 	b.w	8006baa <__retarget_lock_release_recursive>
 80063d2:	bf00      	nop
 80063d4:	200002c0 	.word	0x200002c0

080063d8 <__sfputc_r>:
 80063d8:	6893      	ldr	r3, [r2, #8]
 80063da:	3b01      	subs	r3, #1
 80063dc:	2b00      	cmp	r3, #0
 80063de:	b410      	push	{r4}
 80063e0:	6093      	str	r3, [r2, #8]
 80063e2:	da08      	bge.n	80063f6 <__sfputc_r+0x1e>
 80063e4:	6994      	ldr	r4, [r2, #24]
 80063e6:	42a3      	cmp	r3, r4
 80063e8:	db01      	blt.n	80063ee <__sfputc_r+0x16>
 80063ea:	290a      	cmp	r1, #10
 80063ec:	d103      	bne.n	80063f6 <__sfputc_r+0x1e>
 80063ee:	f85d 4b04 	ldr.w	r4, [sp], #4
 80063f2:	f000 b94b 	b.w	800668c <__swbuf_r>
 80063f6:	6813      	ldr	r3, [r2, #0]
 80063f8:	1c58      	adds	r0, r3, #1
 80063fa:	6010      	str	r0, [r2, #0]
 80063fc:	7019      	strb	r1, [r3, #0]
 80063fe:	4608      	mov	r0, r1
 8006400:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006404:	4770      	bx	lr

08006406 <__sfputs_r>:
 8006406:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006408:	4606      	mov	r6, r0
 800640a:	460f      	mov	r7, r1
 800640c:	4614      	mov	r4, r2
 800640e:	18d5      	adds	r5, r2, r3
 8006410:	42ac      	cmp	r4, r5
 8006412:	d101      	bne.n	8006418 <__sfputs_r+0x12>
 8006414:	2000      	movs	r0, #0
 8006416:	e007      	b.n	8006428 <__sfputs_r+0x22>
 8006418:	f814 1b01 	ldrb.w	r1, [r4], #1
 800641c:	463a      	mov	r2, r7
 800641e:	4630      	mov	r0, r6
 8006420:	f7ff ffda 	bl	80063d8 <__sfputc_r>
 8006424:	1c43      	adds	r3, r0, #1
 8006426:	d1f3      	bne.n	8006410 <__sfputs_r+0xa>
 8006428:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800642c <_vfiprintf_r>:
 800642c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006430:	460d      	mov	r5, r1
 8006432:	b09d      	sub	sp, #116	; 0x74
 8006434:	4614      	mov	r4, r2
 8006436:	4698      	mov	r8, r3
 8006438:	4606      	mov	r6, r0
 800643a:	b118      	cbz	r0, 8006444 <_vfiprintf_r+0x18>
 800643c:	6983      	ldr	r3, [r0, #24]
 800643e:	b90b      	cbnz	r3, 8006444 <_vfiprintf_r+0x18>
 8006440:	f000 fb14 	bl	8006a6c <__sinit>
 8006444:	4b89      	ldr	r3, [pc, #548]	; (800666c <_vfiprintf_r+0x240>)
 8006446:	429d      	cmp	r5, r3
 8006448:	d11b      	bne.n	8006482 <_vfiprintf_r+0x56>
 800644a:	6875      	ldr	r5, [r6, #4]
 800644c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800644e:	07d9      	lsls	r1, r3, #31
 8006450:	d405      	bmi.n	800645e <_vfiprintf_r+0x32>
 8006452:	89ab      	ldrh	r3, [r5, #12]
 8006454:	059a      	lsls	r2, r3, #22
 8006456:	d402      	bmi.n	800645e <_vfiprintf_r+0x32>
 8006458:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800645a:	f000 fba5 	bl	8006ba8 <__retarget_lock_acquire_recursive>
 800645e:	89ab      	ldrh	r3, [r5, #12]
 8006460:	071b      	lsls	r3, r3, #28
 8006462:	d501      	bpl.n	8006468 <_vfiprintf_r+0x3c>
 8006464:	692b      	ldr	r3, [r5, #16]
 8006466:	b9eb      	cbnz	r3, 80064a4 <_vfiprintf_r+0x78>
 8006468:	4629      	mov	r1, r5
 800646a:	4630      	mov	r0, r6
 800646c:	f000 f96e 	bl	800674c <__swsetup_r>
 8006470:	b1c0      	cbz	r0, 80064a4 <_vfiprintf_r+0x78>
 8006472:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006474:	07dc      	lsls	r4, r3, #31
 8006476:	d50e      	bpl.n	8006496 <_vfiprintf_r+0x6a>
 8006478:	f04f 30ff 	mov.w	r0, #4294967295
 800647c:	b01d      	add	sp, #116	; 0x74
 800647e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006482:	4b7b      	ldr	r3, [pc, #492]	; (8006670 <_vfiprintf_r+0x244>)
 8006484:	429d      	cmp	r5, r3
 8006486:	d101      	bne.n	800648c <_vfiprintf_r+0x60>
 8006488:	68b5      	ldr	r5, [r6, #8]
 800648a:	e7df      	b.n	800644c <_vfiprintf_r+0x20>
 800648c:	4b79      	ldr	r3, [pc, #484]	; (8006674 <_vfiprintf_r+0x248>)
 800648e:	429d      	cmp	r5, r3
 8006490:	bf08      	it	eq
 8006492:	68f5      	ldreq	r5, [r6, #12]
 8006494:	e7da      	b.n	800644c <_vfiprintf_r+0x20>
 8006496:	89ab      	ldrh	r3, [r5, #12]
 8006498:	0598      	lsls	r0, r3, #22
 800649a:	d4ed      	bmi.n	8006478 <_vfiprintf_r+0x4c>
 800649c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800649e:	f000 fb84 	bl	8006baa <__retarget_lock_release_recursive>
 80064a2:	e7e9      	b.n	8006478 <_vfiprintf_r+0x4c>
 80064a4:	2300      	movs	r3, #0
 80064a6:	9309      	str	r3, [sp, #36]	; 0x24
 80064a8:	2320      	movs	r3, #32
 80064aa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80064ae:	f8cd 800c 	str.w	r8, [sp, #12]
 80064b2:	2330      	movs	r3, #48	; 0x30
 80064b4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8006678 <_vfiprintf_r+0x24c>
 80064b8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80064bc:	f04f 0901 	mov.w	r9, #1
 80064c0:	4623      	mov	r3, r4
 80064c2:	469a      	mov	sl, r3
 80064c4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80064c8:	b10a      	cbz	r2, 80064ce <_vfiprintf_r+0xa2>
 80064ca:	2a25      	cmp	r2, #37	; 0x25
 80064cc:	d1f9      	bne.n	80064c2 <_vfiprintf_r+0x96>
 80064ce:	ebba 0b04 	subs.w	fp, sl, r4
 80064d2:	d00b      	beq.n	80064ec <_vfiprintf_r+0xc0>
 80064d4:	465b      	mov	r3, fp
 80064d6:	4622      	mov	r2, r4
 80064d8:	4629      	mov	r1, r5
 80064da:	4630      	mov	r0, r6
 80064dc:	f7ff ff93 	bl	8006406 <__sfputs_r>
 80064e0:	3001      	adds	r0, #1
 80064e2:	f000 80aa 	beq.w	800663a <_vfiprintf_r+0x20e>
 80064e6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80064e8:	445a      	add	r2, fp
 80064ea:	9209      	str	r2, [sp, #36]	; 0x24
 80064ec:	f89a 3000 	ldrb.w	r3, [sl]
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	f000 80a2 	beq.w	800663a <_vfiprintf_r+0x20e>
 80064f6:	2300      	movs	r3, #0
 80064f8:	f04f 32ff 	mov.w	r2, #4294967295
 80064fc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006500:	f10a 0a01 	add.w	sl, sl, #1
 8006504:	9304      	str	r3, [sp, #16]
 8006506:	9307      	str	r3, [sp, #28]
 8006508:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800650c:	931a      	str	r3, [sp, #104]	; 0x68
 800650e:	4654      	mov	r4, sl
 8006510:	2205      	movs	r2, #5
 8006512:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006516:	4858      	ldr	r0, [pc, #352]	; (8006678 <_vfiprintf_r+0x24c>)
 8006518:	f7f9 fe6a 	bl	80001f0 <memchr>
 800651c:	9a04      	ldr	r2, [sp, #16]
 800651e:	b9d8      	cbnz	r0, 8006558 <_vfiprintf_r+0x12c>
 8006520:	06d1      	lsls	r1, r2, #27
 8006522:	bf44      	itt	mi
 8006524:	2320      	movmi	r3, #32
 8006526:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800652a:	0713      	lsls	r3, r2, #28
 800652c:	bf44      	itt	mi
 800652e:	232b      	movmi	r3, #43	; 0x2b
 8006530:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006534:	f89a 3000 	ldrb.w	r3, [sl]
 8006538:	2b2a      	cmp	r3, #42	; 0x2a
 800653a:	d015      	beq.n	8006568 <_vfiprintf_r+0x13c>
 800653c:	9a07      	ldr	r2, [sp, #28]
 800653e:	4654      	mov	r4, sl
 8006540:	2000      	movs	r0, #0
 8006542:	f04f 0c0a 	mov.w	ip, #10
 8006546:	4621      	mov	r1, r4
 8006548:	f811 3b01 	ldrb.w	r3, [r1], #1
 800654c:	3b30      	subs	r3, #48	; 0x30
 800654e:	2b09      	cmp	r3, #9
 8006550:	d94e      	bls.n	80065f0 <_vfiprintf_r+0x1c4>
 8006552:	b1b0      	cbz	r0, 8006582 <_vfiprintf_r+0x156>
 8006554:	9207      	str	r2, [sp, #28]
 8006556:	e014      	b.n	8006582 <_vfiprintf_r+0x156>
 8006558:	eba0 0308 	sub.w	r3, r0, r8
 800655c:	fa09 f303 	lsl.w	r3, r9, r3
 8006560:	4313      	orrs	r3, r2
 8006562:	9304      	str	r3, [sp, #16]
 8006564:	46a2      	mov	sl, r4
 8006566:	e7d2      	b.n	800650e <_vfiprintf_r+0xe2>
 8006568:	9b03      	ldr	r3, [sp, #12]
 800656a:	1d19      	adds	r1, r3, #4
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	9103      	str	r1, [sp, #12]
 8006570:	2b00      	cmp	r3, #0
 8006572:	bfbb      	ittet	lt
 8006574:	425b      	neglt	r3, r3
 8006576:	f042 0202 	orrlt.w	r2, r2, #2
 800657a:	9307      	strge	r3, [sp, #28]
 800657c:	9307      	strlt	r3, [sp, #28]
 800657e:	bfb8      	it	lt
 8006580:	9204      	strlt	r2, [sp, #16]
 8006582:	7823      	ldrb	r3, [r4, #0]
 8006584:	2b2e      	cmp	r3, #46	; 0x2e
 8006586:	d10c      	bne.n	80065a2 <_vfiprintf_r+0x176>
 8006588:	7863      	ldrb	r3, [r4, #1]
 800658a:	2b2a      	cmp	r3, #42	; 0x2a
 800658c:	d135      	bne.n	80065fa <_vfiprintf_r+0x1ce>
 800658e:	9b03      	ldr	r3, [sp, #12]
 8006590:	1d1a      	adds	r2, r3, #4
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	9203      	str	r2, [sp, #12]
 8006596:	2b00      	cmp	r3, #0
 8006598:	bfb8      	it	lt
 800659a:	f04f 33ff 	movlt.w	r3, #4294967295
 800659e:	3402      	adds	r4, #2
 80065a0:	9305      	str	r3, [sp, #20]
 80065a2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8006688 <_vfiprintf_r+0x25c>
 80065a6:	7821      	ldrb	r1, [r4, #0]
 80065a8:	2203      	movs	r2, #3
 80065aa:	4650      	mov	r0, sl
 80065ac:	f7f9 fe20 	bl	80001f0 <memchr>
 80065b0:	b140      	cbz	r0, 80065c4 <_vfiprintf_r+0x198>
 80065b2:	2340      	movs	r3, #64	; 0x40
 80065b4:	eba0 000a 	sub.w	r0, r0, sl
 80065b8:	fa03 f000 	lsl.w	r0, r3, r0
 80065bc:	9b04      	ldr	r3, [sp, #16]
 80065be:	4303      	orrs	r3, r0
 80065c0:	3401      	adds	r4, #1
 80065c2:	9304      	str	r3, [sp, #16]
 80065c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80065c8:	482c      	ldr	r0, [pc, #176]	; (800667c <_vfiprintf_r+0x250>)
 80065ca:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80065ce:	2206      	movs	r2, #6
 80065d0:	f7f9 fe0e 	bl	80001f0 <memchr>
 80065d4:	2800      	cmp	r0, #0
 80065d6:	d03f      	beq.n	8006658 <_vfiprintf_r+0x22c>
 80065d8:	4b29      	ldr	r3, [pc, #164]	; (8006680 <_vfiprintf_r+0x254>)
 80065da:	bb1b      	cbnz	r3, 8006624 <_vfiprintf_r+0x1f8>
 80065dc:	9b03      	ldr	r3, [sp, #12]
 80065de:	3307      	adds	r3, #7
 80065e0:	f023 0307 	bic.w	r3, r3, #7
 80065e4:	3308      	adds	r3, #8
 80065e6:	9303      	str	r3, [sp, #12]
 80065e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80065ea:	443b      	add	r3, r7
 80065ec:	9309      	str	r3, [sp, #36]	; 0x24
 80065ee:	e767      	b.n	80064c0 <_vfiprintf_r+0x94>
 80065f0:	fb0c 3202 	mla	r2, ip, r2, r3
 80065f4:	460c      	mov	r4, r1
 80065f6:	2001      	movs	r0, #1
 80065f8:	e7a5      	b.n	8006546 <_vfiprintf_r+0x11a>
 80065fa:	2300      	movs	r3, #0
 80065fc:	3401      	adds	r4, #1
 80065fe:	9305      	str	r3, [sp, #20]
 8006600:	4619      	mov	r1, r3
 8006602:	f04f 0c0a 	mov.w	ip, #10
 8006606:	4620      	mov	r0, r4
 8006608:	f810 2b01 	ldrb.w	r2, [r0], #1
 800660c:	3a30      	subs	r2, #48	; 0x30
 800660e:	2a09      	cmp	r2, #9
 8006610:	d903      	bls.n	800661a <_vfiprintf_r+0x1ee>
 8006612:	2b00      	cmp	r3, #0
 8006614:	d0c5      	beq.n	80065a2 <_vfiprintf_r+0x176>
 8006616:	9105      	str	r1, [sp, #20]
 8006618:	e7c3      	b.n	80065a2 <_vfiprintf_r+0x176>
 800661a:	fb0c 2101 	mla	r1, ip, r1, r2
 800661e:	4604      	mov	r4, r0
 8006620:	2301      	movs	r3, #1
 8006622:	e7f0      	b.n	8006606 <_vfiprintf_r+0x1da>
 8006624:	ab03      	add	r3, sp, #12
 8006626:	9300      	str	r3, [sp, #0]
 8006628:	462a      	mov	r2, r5
 800662a:	4b16      	ldr	r3, [pc, #88]	; (8006684 <_vfiprintf_r+0x258>)
 800662c:	a904      	add	r1, sp, #16
 800662e:	4630      	mov	r0, r6
 8006630:	f7fd ff9c 	bl	800456c <_printf_float>
 8006634:	4607      	mov	r7, r0
 8006636:	1c78      	adds	r0, r7, #1
 8006638:	d1d6      	bne.n	80065e8 <_vfiprintf_r+0x1bc>
 800663a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800663c:	07d9      	lsls	r1, r3, #31
 800663e:	d405      	bmi.n	800664c <_vfiprintf_r+0x220>
 8006640:	89ab      	ldrh	r3, [r5, #12]
 8006642:	059a      	lsls	r2, r3, #22
 8006644:	d402      	bmi.n	800664c <_vfiprintf_r+0x220>
 8006646:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006648:	f000 faaf 	bl	8006baa <__retarget_lock_release_recursive>
 800664c:	89ab      	ldrh	r3, [r5, #12]
 800664e:	065b      	lsls	r3, r3, #25
 8006650:	f53f af12 	bmi.w	8006478 <_vfiprintf_r+0x4c>
 8006654:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006656:	e711      	b.n	800647c <_vfiprintf_r+0x50>
 8006658:	ab03      	add	r3, sp, #12
 800665a:	9300      	str	r3, [sp, #0]
 800665c:	462a      	mov	r2, r5
 800665e:	4b09      	ldr	r3, [pc, #36]	; (8006684 <_vfiprintf_r+0x258>)
 8006660:	a904      	add	r1, sp, #16
 8006662:	4630      	mov	r0, r6
 8006664:	f7fe fa26 	bl	8004ab4 <_printf_i>
 8006668:	e7e4      	b.n	8006634 <_vfiprintf_r+0x208>
 800666a:	bf00      	nop
 800666c:	08007224 	.word	0x08007224
 8006670:	08007244 	.word	0x08007244
 8006674:	08007204 	.word	0x08007204
 8006678:	080070f2 	.word	0x080070f2
 800667c:	080070fc 	.word	0x080070fc
 8006680:	0800456d 	.word	0x0800456d
 8006684:	08006407 	.word	0x08006407
 8006688:	080070f8 	.word	0x080070f8

0800668c <__swbuf_r>:
 800668c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800668e:	460e      	mov	r6, r1
 8006690:	4614      	mov	r4, r2
 8006692:	4605      	mov	r5, r0
 8006694:	b118      	cbz	r0, 800669e <__swbuf_r+0x12>
 8006696:	6983      	ldr	r3, [r0, #24]
 8006698:	b90b      	cbnz	r3, 800669e <__swbuf_r+0x12>
 800669a:	f000 f9e7 	bl	8006a6c <__sinit>
 800669e:	4b21      	ldr	r3, [pc, #132]	; (8006724 <__swbuf_r+0x98>)
 80066a0:	429c      	cmp	r4, r3
 80066a2:	d12b      	bne.n	80066fc <__swbuf_r+0x70>
 80066a4:	686c      	ldr	r4, [r5, #4]
 80066a6:	69a3      	ldr	r3, [r4, #24]
 80066a8:	60a3      	str	r3, [r4, #8]
 80066aa:	89a3      	ldrh	r3, [r4, #12]
 80066ac:	071a      	lsls	r2, r3, #28
 80066ae:	d52f      	bpl.n	8006710 <__swbuf_r+0x84>
 80066b0:	6923      	ldr	r3, [r4, #16]
 80066b2:	b36b      	cbz	r3, 8006710 <__swbuf_r+0x84>
 80066b4:	6923      	ldr	r3, [r4, #16]
 80066b6:	6820      	ldr	r0, [r4, #0]
 80066b8:	1ac0      	subs	r0, r0, r3
 80066ba:	6963      	ldr	r3, [r4, #20]
 80066bc:	b2f6      	uxtb	r6, r6
 80066be:	4283      	cmp	r3, r0
 80066c0:	4637      	mov	r7, r6
 80066c2:	dc04      	bgt.n	80066ce <__swbuf_r+0x42>
 80066c4:	4621      	mov	r1, r4
 80066c6:	4628      	mov	r0, r5
 80066c8:	f000 f93c 	bl	8006944 <_fflush_r>
 80066cc:	bb30      	cbnz	r0, 800671c <__swbuf_r+0x90>
 80066ce:	68a3      	ldr	r3, [r4, #8]
 80066d0:	3b01      	subs	r3, #1
 80066d2:	60a3      	str	r3, [r4, #8]
 80066d4:	6823      	ldr	r3, [r4, #0]
 80066d6:	1c5a      	adds	r2, r3, #1
 80066d8:	6022      	str	r2, [r4, #0]
 80066da:	701e      	strb	r6, [r3, #0]
 80066dc:	6963      	ldr	r3, [r4, #20]
 80066de:	3001      	adds	r0, #1
 80066e0:	4283      	cmp	r3, r0
 80066e2:	d004      	beq.n	80066ee <__swbuf_r+0x62>
 80066e4:	89a3      	ldrh	r3, [r4, #12]
 80066e6:	07db      	lsls	r3, r3, #31
 80066e8:	d506      	bpl.n	80066f8 <__swbuf_r+0x6c>
 80066ea:	2e0a      	cmp	r6, #10
 80066ec:	d104      	bne.n	80066f8 <__swbuf_r+0x6c>
 80066ee:	4621      	mov	r1, r4
 80066f0:	4628      	mov	r0, r5
 80066f2:	f000 f927 	bl	8006944 <_fflush_r>
 80066f6:	b988      	cbnz	r0, 800671c <__swbuf_r+0x90>
 80066f8:	4638      	mov	r0, r7
 80066fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80066fc:	4b0a      	ldr	r3, [pc, #40]	; (8006728 <__swbuf_r+0x9c>)
 80066fe:	429c      	cmp	r4, r3
 8006700:	d101      	bne.n	8006706 <__swbuf_r+0x7a>
 8006702:	68ac      	ldr	r4, [r5, #8]
 8006704:	e7cf      	b.n	80066a6 <__swbuf_r+0x1a>
 8006706:	4b09      	ldr	r3, [pc, #36]	; (800672c <__swbuf_r+0xa0>)
 8006708:	429c      	cmp	r4, r3
 800670a:	bf08      	it	eq
 800670c:	68ec      	ldreq	r4, [r5, #12]
 800670e:	e7ca      	b.n	80066a6 <__swbuf_r+0x1a>
 8006710:	4621      	mov	r1, r4
 8006712:	4628      	mov	r0, r5
 8006714:	f000 f81a 	bl	800674c <__swsetup_r>
 8006718:	2800      	cmp	r0, #0
 800671a:	d0cb      	beq.n	80066b4 <__swbuf_r+0x28>
 800671c:	f04f 37ff 	mov.w	r7, #4294967295
 8006720:	e7ea      	b.n	80066f8 <__swbuf_r+0x6c>
 8006722:	bf00      	nop
 8006724:	08007224 	.word	0x08007224
 8006728:	08007244 	.word	0x08007244
 800672c:	08007204 	.word	0x08007204

08006730 <__ascii_wctomb>:
 8006730:	b149      	cbz	r1, 8006746 <__ascii_wctomb+0x16>
 8006732:	2aff      	cmp	r2, #255	; 0xff
 8006734:	bf85      	ittet	hi
 8006736:	238a      	movhi	r3, #138	; 0x8a
 8006738:	6003      	strhi	r3, [r0, #0]
 800673a:	700a      	strbls	r2, [r1, #0]
 800673c:	f04f 30ff 	movhi.w	r0, #4294967295
 8006740:	bf98      	it	ls
 8006742:	2001      	movls	r0, #1
 8006744:	4770      	bx	lr
 8006746:	4608      	mov	r0, r1
 8006748:	4770      	bx	lr
	...

0800674c <__swsetup_r>:
 800674c:	4b32      	ldr	r3, [pc, #200]	; (8006818 <__swsetup_r+0xcc>)
 800674e:	b570      	push	{r4, r5, r6, lr}
 8006750:	681d      	ldr	r5, [r3, #0]
 8006752:	4606      	mov	r6, r0
 8006754:	460c      	mov	r4, r1
 8006756:	b125      	cbz	r5, 8006762 <__swsetup_r+0x16>
 8006758:	69ab      	ldr	r3, [r5, #24]
 800675a:	b913      	cbnz	r3, 8006762 <__swsetup_r+0x16>
 800675c:	4628      	mov	r0, r5
 800675e:	f000 f985 	bl	8006a6c <__sinit>
 8006762:	4b2e      	ldr	r3, [pc, #184]	; (800681c <__swsetup_r+0xd0>)
 8006764:	429c      	cmp	r4, r3
 8006766:	d10f      	bne.n	8006788 <__swsetup_r+0x3c>
 8006768:	686c      	ldr	r4, [r5, #4]
 800676a:	89a3      	ldrh	r3, [r4, #12]
 800676c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006770:	0719      	lsls	r1, r3, #28
 8006772:	d42c      	bmi.n	80067ce <__swsetup_r+0x82>
 8006774:	06dd      	lsls	r5, r3, #27
 8006776:	d411      	bmi.n	800679c <__swsetup_r+0x50>
 8006778:	2309      	movs	r3, #9
 800677a:	6033      	str	r3, [r6, #0]
 800677c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006780:	81a3      	strh	r3, [r4, #12]
 8006782:	f04f 30ff 	mov.w	r0, #4294967295
 8006786:	e03e      	b.n	8006806 <__swsetup_r+0xba>
 8006788:	4b25      	ldr	r3, [pc, #148]	; (8006820 <__swsetup_r+0xd4>)
 800678a:	429c      	cmp	r4, r3
 800678c:	d101      	bne.n	8006792 <__swsetup_r+0x46>
 800678e:	68ac      	ldr	r4, [r5, #8]
 8006790:	e7eb      	b.n	800676a <__swsetup_r+0x1e>
 8006792:	4b24      	ldr	r3, [pc, #144]	; (8006824 <__swsetup_r+0xd8>)
 8006794:	429c      	cmp	r4, r3
 8006796:	bf08      	it	eq
 8006798:	68ec      	ldreq	r4, [r5, #12]
 800679a:	e7e6      	b.n	800676a <__swsetup_r+0x1e>
 800679c:	0758      	lsls	r0, r3, #29
 800679e:	d512      	bpl.n	80067c6 <__swsetup_r+0x7a>
 80067a0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80067a2:	b141      	cbz	r1, 80067b6 <__swsetup_r+0x6a>
 80067a4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80067a8:	4299      	cmp	r1, r3
 80067aa:	d002      	beq.n	80067b2 <__swsetup_r+0x66>
 80067ac:	4630      	mov	r0, r6
 80067ae:	f7ff fcd5 	bl	800615c <_free_r>
 80067b2:	2300      	movs	r3, #0
 80067b4:	6363      	str	r3, [r4, #52]	; 0x34
 80067b6:	89a3      	ldrh	r3, [r4, #12]
 80067b8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80067bc:	81a3      	strh	r3, [r4, #12]
 80067be:	2300      	movs	r3, #0
 80067c0:	6063      	str	r3, [r4, #4]
 80067c2:	6923      	ldr	r3, [r4, #16]
 80067c4:	6023      	str	r3, [r4, #0]
 80067c6:	89a3      	ldrh	r3, [r4, #12]
 80067c8:	f043 0308 	orr.w	r3, r3, #8
 80067cc:	81a3      	strh	r3, [r4, #12]
 80067ce:	6923      	ldr	r3, [r4, #16]
 80067d0:	b94b      	cbnz	r3, 80067e6 <__swsetup_r+0x9a>
 80067d2:	89a3      	ldrh	r3, [r4, #12]
 80067d4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80067d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80067dc:	d003      	beq.n	80067e6 <__swsetup_r+0x9a>
 80067de:	4621      	mov	r1, r4
 80067e0:	4630      	mov	r0, r6
 80067e2:	f000 fa09 	bl	8006bf8 <__smakebuf_r>
 80067e6:	89a0      	ldrh	r0, [r4, #12]
 80067e8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80067ec:	f010 0301 	ands.w	r3, r0, #1
 80067f0:	d00a      	beq.n	8006808 <__swsetup_r+0xbc>
 80067f2:	2300      	movs	r3, #0
 80067f4:	60a3      	str	r3, [r4, #8]
 80067f6:	6963      	ldr	r3, [r4, #20]
 80067f8:	425b      	negs	r3, r3
 80067fa:	61a3      	str	r3, [r4, #24]
 80067fc:	6923      	ldr	r3, [r4, #16]
 80067fe:	b943      	cbnz	r3, 8006812 <__swsetup_r+0xc6>
 8006800:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006804:	d1ba      	bne.n	800677c <__swsetup_r+0x30>
 8006806:	bd70      	pop	{r4, r5, r6, pc}
 8006808:	0781      	lsls	r1, r0, #30
 800680a:	bf58      	it	pl
 800680c:	6963      	ldrpl	r3, [r4, #20]
 800680e:	60a3      	str	r3, [r4, #8]
 8006810:	e7f4      	b.n	80067fc <__swsetup_r+0xb0>
 8006812:	2000      	movs	r0, #0
 8006814:	e7f7      	b.n	8006806 <__swsetup_r+0xba>
 8006816:	bf00      	nop
 8006818:	2000000c 	.word	0x2000000c
 800681c:	08007224 	.word	0x08007224
 8006820:	08007244 	.word	0x08007244
 8006824:	08007204 	.word	0x08007204

08006828 <abort>:
 8006828:	b508      	push	{r3, lr}
 800682a:	2006      	movs	r0, #6
 800682c:	f000 fa4c 	bl	8006cc8 <raise>
 8006830:	2001      	movs	r0, #1
 8006832:	f7fa fef9 	bl	8001628 <_exit>
	...

08006838 <__sflush_r>:
 8006838:	898a      	ldrh	r2, [r1, #12]
 800683a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800683e:	4605      	mov	r5, r0
 8006840:	0710      	lsls	r0, r2, #28
 8006842:	460c      	mov	r4, r1
 8006844:	d458      	bmi.n	80068f8 <__sflush_r+0xc0>
 8006846:	684b      	ldr	r3, [r1, #4]
 8006848:	2b00      	cmp	r3, #0
 800684a:	dc05      	bgt.n	8006858 <__sflush_r+0x20>
 800684c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800684e:	2b00      	cmp	r3, #0
 8006850:	dc02      	bgt.n	8006858 <__sflush_r+0x20>
 8006852:	2000      	movs	r0, #0
 8006854:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006858:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800685a:	2e00      	cmp	r6, #0
 800685c:	d0f9      	beq.n	8006852 <__sflush_r+0x1a>
 800685e:	2300      	movs	r3, #0
 8006860:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006864:	682f      	ldr	r7, [r5, #0]
 8006866:	602b      	str	r3, [r5, #0]
 8006868:	d032      	beq.n	80068d0 <__sflush_r+0x98>
 800686a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800686c:	89a3      	ldrh	r3, [r4, #12]
 800686e:	075a      	lsls	r2, r3, #29
 8006870:	d505      	bpl.n	800687e <__sflush_r+0x46>
 8006872:	6863      	ldr	r3, [r4, #4]
 8006874:	1ac0      	subs	r0, r0, r3
 8006876:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006878:	b10b      	cbz	r3, 800687e <__sflush_r+0x46>
 800687a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800687c:	1ac0      	subs	r0, r0, r3
 800687e:	2300      	movs	r3, #0
 8006880:	4602      	mov	r2, r0
 8006882:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006884:	6a21      	ldr	r1, [r4, #32]
 8006886:	4628      	mov	r0, r5
 8006888:	47b0      	blx	r6
 800688a:	1c43      	adds	r3, r0, #1
 800688c:	89a3      	ldrh	r3, [r4, #12]
 800688e:	d106      	bne.n	800689e <__sflush_r+0x66>
 8006890:	6829      	ldr	r1, [r5, #0]
 8006892:	291d      	cmp	r1, #29
 8006894:	d82c      	bhi.n	80068f0 <__sflush_r+0xb8>
 8006896:	4a2a      	ldr	r2, [pc, #168]	; (8006940 <__sflush_r+0x108>)
 8006898:	40ca      	lsrs	r2, r1
 800689a:	07d6      	lsls	r6, r2, #31
 800689c:	d528      	bpl.n	80068f0 <__sflush_r+0xb8>
 800689e:	2200      	movs	r2, #0
 80068a0:	6062      	str	r2, [r4, #4]
 80068a2:	04d9      	lsls	r1, r3, #19
 80068a4:	6922      	ldr	r2, [r4, #16]
 80068a6:	6022      	str	r2, [r4, #0]
 80068a8:	d504      	bpl.n	80068b4 <__sflush_r+0x7c>
 80068aa:	1c42      	adds	r2, r0, #1
 80068ac:	d101      	bne.n	80068b2 <__sflush_r+0x7a>
 80068ae:	682b      	ldr	r3, [r5, #0]
 80068b0:	b903      	cbnz	r3, 80068b4 <__sflush_r+0x7c>
 80068b2:	6560      	str	r0, [r4, #84]	; 0x54
 80068b4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80068b6:	602f      	str	r7, [r5, #0]
 80068b8:	2900      	cmp	r1, #0
 80068ba:	d0ca      	beq.n	8006852 <__sflush_r+0x1a>
 80068bc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80068c0:	4299      	cmp	r1, r3
 80068c2:	d002      	beq.n	80068ca <__sflush_r+0x92>
 80068c4:	4628      	mov	r0, r5
 80068c6:	f7ff fc49 	bl	800615c <_free_r>
 80068ca:	2000      	movs	r0, #0
 80068cc:	6360      	str	r0, [r4, #52]	; 0x34
 80068ce:	e7c1      	b.n	8006854 <__sflush_r+0x1c>
 80068d0:	6a21      	ldr	r1, [r4, #32]
 80068d2:	2301      	movs	r3, #1
 80068d4:	4628      	mov	r0, r5
 80068d6:	47b0      	blx	r6
 80068d8:	1c41      	adds	r1, r0, #1
 80068da:	d1c7      	bne.n	800686c <__sflush_r+0x34>
 80068dc:	682b      	ldr	r3, [r5, #0]
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d0c4      	beq.n	800686c <__sflush_r+0x34>
 80068e2:	2b1d      	cmp	r3, #29
 80068e4:	d001      	beq.n	80068ea <__sflush_r+0xb2>
 80068e6:	2b16      	cmp	r3, #22
 80068e8:	d101      	bne.n	80068ee <__sflush_r+0xb6>
 80068ea:	602f      	str	r7, [r5, #0]
 80068ec:	e7b1      	b.n	8006852 <__sflush_r+0x1a>
 80068ee:	89a3      	ldrh	r3, [r4, #12]
 80068f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80068f4:	81a3      	strh	r3, [r4, #12]
 80068f6:	e7ad      	b.n	8006854 <__sflush_r+0x1c>
 80068f8:	690f      	ldr	r7, [r1, #16]
 80068fa:	2f00      	cmp	r7, #0
 80068fc:	d0a9      	beq.n	8006852 <__sflush_r+0x1a>
 80068fe:	0793      	lsls	r3, r2, #30
 8006900:	680e      	ldr	r6, [r1, #0]
 8006902:	bf08      	it	eq
 8006904:	694b      	ldreq	r3, [r1, #20]
 8006906:	600f      	str	r7, [r1, #0]
 8006908:	bf18      	it	ne
 800690a:	2300      	movne	r3, #0
 800690c:	eba6 0807 	sub.w	r8, r6, r7
 8006910:	608b      	str	r3, [r1, #8]
 8006912:	f1b8 0f00 	cmp.w	r8, #0
 8006916:	dd9c      	ble.n	8006852 <__sflush_r+0x1a>
 8006918:	6a21      	ldr	r1, [r4, #32]
 800691a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800691c:	4643      	mov	r3, r8
 800691e:	463a      	mov	r2, r7
 8006920:	4628      	mov	r0, r5
 8006922:	47b0      	blx	r6
 8006924:	2800      	cmp	r0, #0
 8006926:	dc06      	bgt.n	8006936 <__sflush_r+0xfe>
 8006928:	89a3      	ldrh	r3, [r4, #12]
 800692a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800692e:	81a3      	strh	r3, [r4, #12]
 8006930:	f04f 30ff 	mov.w	r0, #4294967295
 8006934:	e78e      	b.n	8006854 <__sflush_r+0x1c>
 8006936:	4407      	add	r7, r0
 8006938:	eba8 0800 	sub.w	r8, r8, r0
 800693c:	e7e9      	b.n	8006912 <__sflush_r+0xda>
 800693e:	bf00      	nop
 8006940:	20400001 	.word	0x20400001

08006944 <_fflush_r>:
 8006944:	b538      	push	{r3, r4, r5, lr}
 8006946:	690b      	ldr	r3, [r1, #16]
 8006948:	4605      	mov	r5, r0
 800694a:	460c      	mov	r4, r1
 800694c:	b913      	cbnz	r3, 8006954 <_fflush_r+0x10>
 800694e:	2500      	movs	r5, #0
 8006950:	4628      	mov	r0, r5
 8006952:	bd38      	pop	{r3, r4, r5, pc}
 8006954:	b118      	cbz	r0, 800695e <_fflush_r+0x1a>
 8006956:	6983      	ldr	r3, [r0, #24]
 8006958:	b90b      	cbnz	r3, 800695e <_fflush_r+0x1a>
 800695a:	f000 f887 	bl	8006a6c <__sinit>
 800695e:	4b14      	ldr	r3, [pc, #80]	; (80069b0 <_fflush_r+0x6c>)
 8006960:	429c      	cmp	r4, r3
 8006962:	d11b      	bne.n	800699c <_fflush_r+0x58>
 8006964:	686c      	ldr	r4, [r5, #4]
 8006966:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800696a:	2b00      	cmp	r3, #0
 800696c:	d0ef      	beq.n	800694e <_fflush_r+0xa>
 800696e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006970:	07d0      	lsls	r0, r2, #31
 8006972:	d404      	bmi.n	800697e <_fflush_r+0x3a>
 8006974:	0599      	lsls	r1, r3, #22
 8006976:	d402      	bmi.n	800697e <_fflush_r+0x3a>
 8006978:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800697a:	f000 f915 	bl	8006ba8 <__retarget_lock_acquire_recursive>
 800697e:	4628      	mov	r0, r5
 8006980:	4621      	mov	r1, r4
 8006982:	f7ff ff59 	bl	8006838 <__sflush_r>
 8006986:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006988:	07da      	lsls	r2, r3, #31
 800698a:	4605      	mov	r5, r0
 800698c:	d4e0      	bmi.n	8006950 <_fflush_r+0xc>
 800698e:	89a3      	ldrh	r3, [r4, #12]
 8006990:	059b      	lsls	r3, r3, #22
 8006992:	d4dd      	bmi.n	8006950 <_fflush_r+0xc>
 8006994:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006996:	f000 f908 	bl	8006baa <__retarget_lock_release_recursive>
 800699a:	e7d9      	b.n	8006950 <_fflush_r+0xc>
 800699c:	4b05      	ldr	r3, [pc, #20]	; (80069b4 <_fflush_r+0x70>)
 800699e:	429c      	cmp	r4, r3
 80069a0:	d101      	bne.n	80069a6 <_fflush_r+0x62>
 80069a2:	68ac      	ldr	r4, [r5, #8]
 80069a4:	e7df      	b.n	8006966 <_fflush_r+0x22>
 80069a6:	4b04      	ldr	r3, [pc, #16]	; (80069b8 <_fflush_r+0x74>)
 80069a8:	429c      	cmp	r4, r3
 80069aa:	bf08      	it	eq
 80069ac:	68ec      	ldreq	r4, [r5, #12]
 80069ae:	e7da      	b.n	8006966 <_fflush_r+0x22>
 80069b0:	08007224 	.word	0x08007224
 80069b4:	08007244 	.word	0x08007244
 80069b8:	08007204 	.word	0x08007204

080069bc <std>:
 80069bc:	2300      	movs	r3, #0
 80069be:	b510      	push	{r4, lr}
 80069c0:	4604      	mov	r4, r0
 80069c2:	e9c0 3300 	strd	r3, r3, [r0]
 80069c6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80069ca:	6083      	str	r3, [r0, #8]
 80069cc:	8181      	strh	r1, [r0, #12]
 80069ce:	6643      	str	r3, [r0, #100]	; 0x64
 80069d0:	81c2      	strh	r2, [r0, #14]
 80069d2:	6183      	str	r3, [r0, #24]
 80069d4:	4619      	mov	r1, r3
 80069d6:	2208      	movs	r2, #8
 80069d8:	305c      	adds	r0, #92	; 0x5c
 80069da:	f7fd fd1f 	bl	800441c <memset>
 80069de:	4b05      	ldr	r3, [pc, #20]	; (80069f4 <std+0x38>)
 80069e0:	6263      	str	r3, [r4, #36]	; 0x24
 80069e2:	4b05      	ldr	r3, [pc, #20]	; (80069f8 <std+0x3c>)
 80069e4:	62a3      	str	r3, [r4, #40]	; 0x28
 80069e6:	4b05      	ldr	r3, [pc, #20]	; (80069fc <std+0x40>)
 80069e8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80069ea:	4b05      	ldr	r3, [pc, #20]	; (8006a00 <std+0x44>)
 80069ec:	6224      	str	r4, [r4, #32]
 80069ee:	6323      	str	r3, [r4, #48]	; 0x30
 80069f0:	bd10      	pop	{r4, pc}
 80069f2:	bf00      	nop
 80069f4:	08006d01 	.word	0x08006d01
 80069f8:	08006d23 	.word	0x08006d23
 80069fc:	08006d5b 	.word	0x08006d5b
 8006a00:	08006d7f 	.word	0x08006d7f

08006a04 <_cleanup_r>:
 8006a04:	4901      	ldr	r1, [pc, #4]	; (8006a0c <_cleanup_r+0x8>)
 8006a06:	f000 b8af 	b.w	8006b68 <_fwalk_reent>
 8006a0a:	bf00      	nop
 8006a0c:	08006945 	.word	0x08006945

08006a10 <__sfmoreglue>:
 8006a10:	b570      	push	{r4, r5, r6, lr}
 8006a12:	2268      	movs	r2, #104	; 0x68
 8006a14:	1e4d      	subs	r5, r1, #1
 8006a16:	4355      	muls	r5, r2
 8006a18:	460e      	mov	r6, r1
 8006a1a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006a1e:	f7ff fc09 	bl	8006234 <_malloc_r>
 8006a22:	4604      	mov	r4, r0
 8006a24:	b140      	cbz	r0, 8006a38 <__sfmoreglue+0x28>
 8006a26:	2100      	movs	r1, #0
 8006a28:	e9c0 1600 	strd	r1, r6, [r0]
 8006a2c:	300c      	adds	r0, #12
 8006a2e:	60a0      	str	r0, [r4, #8]
 8006a30:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006a34:	f7fd fcf2 	bl	800441c <memset>
 8006a38:	4620      	mov	r0, r4
 8006a3a:	bd70      	pop	{r4, r5, r6, pc}

08006a3c <__sfp_lock_acquire>:
 8006a3c:	4801      	ldr	r0, [pc, #4]	; (8006a44 <__sfp_lock_acquire+0x8>)
 8006a3e:	f000 b8b3 	b.w	8006ba8 <__retarget_lock_acquire_recursive>
 8006a42:	bf00      	nop
 8006a44:	200002c1 	.word	0x200002c1

08006a48 <__sfp_lock_release>:
 8006a48:	4801      	ldr	r0, [pc, #4]	; (8006a50 <__sfp_lock_release+0x8>)
 8006a4a:	f000 b8ae 	b.w	8006baa <__retarget_lock_release_recursive>
 8006a4e:	bf00      	nop
 8006a50:	200002c1 	.word	0x200002c1

08006a54 <__sinit_lock_acquire>:
 8006a54:	4801      	ldr	r0, [pc, #4]	; (8006a5c <__sinit_lock_acquire+0x8>)
 8006a56:	f000 b8a7 	b.w	8006ba8 <__retarget_lock_acquire_recursive>
 8006a5a:	bf00      	nop
 8006a5c:	200002c2 	.word	0x200002c2

08006a60 <__sinit_lock_release>:
 8006a60:	4801      	ldr	r0, [pc, #4]	; (8006a68 <__sinit_lock_release+0x8>)
 8006a62:	f000 b8a2 	b.w	8006baa <__retarget_lock_release_recursive>
 8006a66:	bf00      	nop
 8006a68:	200002c2 	.word	0x200002c2

08006a6c <__sinit>:
 8006a6c:	b510      	push	{r4, lr}
 8006a6e:	4604      	mov	r4, r0
 8006a70:	f7ff fff0 	bl	8006a54 <__sinit_lock_acquire>
 8006a74:	69a3      	ldr	r3, [r4, #24]
 8006a76:	b11b      	cbz	r3, 8006a80 <__sinit+0x14>
 8006a78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006a7c:	f7ff bff0 	b.w	8006a60 <__sinit_lock_release>
 8006a80:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006a84:	6523      	str	r3, [r4, #80]	; 0x50
 8006a86:	4b13      	ldr	r3, [pc, #76]	; (8006ad4 <__sinit+0x68>)
 8006a88:	4a13      	ldr	r2, [pc, #76]	; (8006ad8 <__sinit+0x6c>)
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	62a2      	str	r2, [r4, #40]	; 0x28
 8006a8e:	42a3      	cmp	r3, r4
 8006a90:	bf04      	itt	eq
 8006a92:	2301      	moveq	r3, #1
 8006a94:	61a3      	streq	r3, [r4, #24]
 8006a96:	4620      	mov	r0, r4
 8006a98:	f000 f820 	bl	8006adc <__sfp>
 8006a9c:	6060      	str	r0, [r4, #4]
 8006a9e:	4620      	mov	r0, r4
 8006aa0:	f000 f81c 	bl	8006adc <__sfp>
 8006aa4:	60a0      	str	r0, [r4, #8]
 8006aa6:	4620      	mov	r0, r4
 8006aa8:	f000 f818 	bl	8006adc <__sfp>
 8006aac:	2200      	movs	r2, #0
 8006aae:	60e0      	str	r0, [r4, #12]
 8006ab0:	2104      	movs	r1, #4
 8006ab2:	6860      	ldr	r0, [r4, #4]
 8006ab4:	f7ff ff82 	bl	80069bc <std>
 8006ab8:	68a0      	ldr	r0, [r4, #8]
 8006aba:	2201      	movs	r2, #1
 8006abc:	2109      	movs	r1, #9
 8006abe:	f7ff ff7d 	bl	80069bc <std>
 8006ac2:	68e0      	ldr	r0, [r4, #12]
 8006ac4:	2202      	movs	r2, #2
 8006ac6:	2112      	movs	r1, #18
 8006ac8:	f7ff ff78 	bl	80069bc <std>
 8006acc:	2301      	movs	r3, #1
 8006ace:	61a3      	str	r3, [r4, #24]
 8006ad0:	e7d2      	b.n	8006a78 <__sinit+0xc>
 8006ad2:	bf00      	nop
 8006ad4:	08006e88 	.word	0x08006e88
 8006ad8:	08006a05 	.word	0x08006a05

08006adc <__sfp>:
 8006adc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ade:	4607      	mov	r7, r0
 8006ae0:	f7ff ffac 	bl	8006a3c <__sfp_lock_acquire>
 8006ae4:	4b1e      	ldr	r3, [pc, #120]	; (8006b60 <__sfp+0x84>)
 8006ae6:	681e      	ldr	r6, [r3, #0]
 8006ae8:	69b3      	ldr	r3, [r6, #24]
 8006aea:	b913      	cbnz	r3, 8006af2 <__sfp+0x16>
 8006aec:	4630      	mov	r0, r6
 8006aee:	f7ff ffbd 	bl	8006a6c <__sinit>
 8006af2:	3648      	adds	r6, #72	; 0x48
 8006af4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006af8:	3b01      	subs	r3, #1
 8006afa:	d503      	bpl.n	8006b04 <__sfp+0x28>
 8006afc:	6833      	ldr	r3, [r6, #0]
 8006afe:	b30b      	cbz	r3, 8006b44 <__sfp+0x68>
 8006b00:	6836      	ldr	r6, [r6, #0]
 8006b02:	e7f7      	b.n	8006af4 <__sfp+0x18>
 8006b04:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006b08:	b9d5      	cbnz	r5, 8006b40 <__sfp+0x64>
 8006b0a:	4b16      	ldr	r3, [pc, #88]	; (8006b64 <__sfp+0x88>)
 8006b0c:	60e3      	str	r3, [r4, #12]
 8006b0e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006b12:	6665      	str	r5, [r4, #100]	; 0x64
 8006b14:	f000 f847 	bl	8006ba6 <__retarget_lock_init_recursive>
 8006b18:	f7ff ff96 	bl	8006a48 <__sfp_lock_release>
 8006b1c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006b20:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006b24:	6025      	str	r5, [r4, #0]
 8006b26:	61a5      	str	r5, [r4, #24]
 8006b28:	2208      	movs	r2, #8
 8006b2a:	4629      	mov	r1, r5
 8006b2c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006b30:	f7fd fc74 	bl	800441c <memset>
 8006b34:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006b38:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006b3c:	4620      	mov	r0, r4
 8006b3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006b40:	3468      	adds	r4, #104	; 0x68
 8006b42:	e7d9      	b.n	8006af8 <__sfp+0x1c>
 8006b44:	2104      	movs	r1, #4
 8006b46:	4638      	mov	r0, r7
 8006b48:	f7ff ff62 	bl	8006a10 <__sfmoreglue>
 8006b4c:	4604      	mov	r4, r0
 8006b4e:	6030      	str	r0, [r6, #0]
 8006b50:	2800      	cmp	r0, #0
 8006b52:	d1d5      	bne.n	8006b00 <__sfp+0x24>
 8006b54:	f7ff ff78 	bl	8006a48 <__sfp_lock_release>
 8006b58:	230c      	movs	r3, #12
 8006b5a:	603b      	str	r3, [r7, #0]
 8006b5c:	e7ee      	b.n	8006b3c <__sfp+0x60>
 8006b5e:	bf00      	nop
 8006b60:	08006e88 	.word	0x08006e88
 8006b64:	ffff0001 	.word	0xffff0001

08006b68 <_fwalk_reent>:
 8006b68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006b6c:	4606      	mov	r6, r0
 8006b6e:	4688      	mov	r8, r1
 8006b70:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006b74:	2700      	movs	r7, #0
 8006b76:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006b7a:	f1b9 0901 	subs.w	r9, r9, #1
 8006b7e:	d505      	bpl.n	8006b8c <_fwalk_reent+0x24>
 8006b80:	6824      	ldr	r4, [r4, #0]
 8006b82:	2c00      	cmp	r4, #0
 8006b84:	d1f7      	bne.n	8006b76 <_fwalk_reent+0xe>
 8006b86:	4638      	mov	r0, r7
 8006b88:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006b8c:	89ab      	ldrh	r3, [r5, #12]
 8006b8e:	2b01      	cmp	r3, #1
 8006b90:	d907      	bls.n	8006ba2 <_fwalk_reent+0x3a>
 8006b92:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006b96:	3301      	adds	r3, #1
 8006b98:	d003      	beq.n	8006ba2 <_fwalk_reent+0x3a>
 8006b9a:	4629      	mov	r1, r5
 8006b9c:	4630      	mov	r0, r6
 8006b9e:	47c0      	blx	r8
 8006ba0:	4307      	orrs	r7, r0
 8006ba2:	3568      	adds	r5, #104	; 0x68
 8006ba4:	e7e9      	b.n	8006b7a <_fwalk_reent+0x12>

08006ba6 <__retarget_lock_init_recursive>:
 8006ba6:	4770      	bx	lr

08006ba8 <__retarget_lock_acquire_recursive>:
 8006ba8:	4770      	bx	lr

08006baa <__retarget_lock_release_recursive>:
 8006baa:	4770      	bx	lr

08006bac <__swhatbuf_r>:
 8006bac:	b570      	push	{r4, r5, r6, lr}
 8006bae:	460e      	mov	r6, r1
 8006bb0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006bb4:	2900      	cmp	r1, #0
 8006bb6:	b096      	sub	sp, #88	; 0x58
 8006bb8:	4614      	mov	r4, r2
 8006bba:	461d      	mov	r5, r3
 8006bbc:	da08      	bge.n	8006bd0 <__swhatbuf_r+0x24>
 8006bbe:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8006bc2:	2200      	movs	r2, #0
 8006bc4:	602a      	str	r2, [r5, #0]
 8006bc6:	061a      	lsls	r2, r3, #24
 8006bc8:	d410      	bmi.n	8006bec <__swhatbuf_r+0x40>
 8006bca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006bce:	e00e      	b.n	8006bee <__swhatbuf_r+0x42>
 8006bd0:	466a      	mov	r2, sp
 8006bd2:	f000 f8fb 	bl	8006dcc <_fstat_r>
 8006bd6:	2800      	cmp	r0, #0
 8006bd8:	dbf1      	blt.n	8006bbe <__swhatbuf_r+0x12>
 8006bda:	9a01      	ldr	r2, [sp, #4]
 8006bdc:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006be0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006be4:	425a      	negs	r2, r3
 8006be6:	415a      	adcs	r2, r3
 8006be8:	602a      	str	r2, [r5, #0]
 8006bea:	e7ee      	b.n	8006bca <__swhatbuf_r+0x1e>
 8006bec:	2340      	movs	r3, #64	; 0x40
 8006bee:	2000      	movs	r0, #0
 8006bf0:	6023      	str	r3, [r4, #0]
 8006bf2:	b016      	add	sp, #88	; 0x58
 8006bf4:	bd70      	pop	{r4, r5, r6, pc}
	...

08006bf8 <__smakebuf_r>:
 8006bf8:	898b      	ldrh	r3, [r1, #12]
 8006bfa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006bfc:	079d      	lsls	r5, r3, #30
 8006bfe:	4606      	mov	r6, r0
 8006c00:	460c      	mov	r4, r1
 8006c02:	d507      	bpl.n	8006c14 <__smakebuf_r+0x1c>
 8006c04:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006c08:	6023      	str	r3, [r4, #0]
 8006c0a:	6123      	str	r3, [r4, #16]
 8006c0c:	2301      	movs	r3, #1
 8006c0e:	6163      	str	r3, [r4, #20]
 8006c10:	b002      	add	sp, #8
 8006c12:	bd70      	pop	{r4, r5, r6, pc}
 8006c14:	ab01      	add	r3, sp, #4
 8006c16:	466a      	mov	r2, sp
 8006c18:	f7ff ffc8 	bl	8006bac <__swhatbuf_r>
 8006c1c:	9900      	ldr	r1, [sp, #0]
 8006c1e:	4605      	mov	r5, r0
 8006c20:	4630      	mov	r0, r6
 8006c22:	f7ff fb07 	bl	8006234 <_malloc_r>
 8006c26:	b948      	cbnz	r0, 8006c3c <__smakebuf_r+0x44>
 8006c28:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006c2c:	059a      	lsls	r2, r3, #22
 8006c2e:	d4ef      	bmi.n	8006c10 <__smakebuf_r+0x18>
 8006c30:	f023 0303 	bic.w	r3, r3, #3
 8006c34:	f043 0302 	orr.w	r3, r3, #2
 8006c38:	81a3      	strh	r3, [r4, #12]
 8006c3a:	e7e3      	b.n	8006c04 <__smakebuf_r+0xc>
 8006c3c:	4b0d      	ldr	r3, [pc, #52]	; (8006c74 <__smakebuf_r+0x7c>)
 8006c3e:	62b3      	str	r3, [r6, #40]	; 0x28
 8006c40:	89a3      	ldrh	r3, [r4, #12]
 8006c42:	6020      	str	r0, [r4, #0]
 8006c44:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006c48:	81a3      	strh	r3, [r4, #12]
 8006c4a:	9b00      	ldr	r3, [sp, #0]
 8006c4c:	6163      	str	r3, [r4, #20]
 8006c4e:	9b01      	ldr	r3, [sp, #4]
 8006c50:	6120      	str	r0, [r4, #16]
 8006c52:	b15b      	cbz	r3, 8006c6c <__smakebuf_r+0x74>
 8006c54:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006c58:	4630      	mov	r0, r6
 8006c5a:	f000 f8c9 	bl	8006df0 <_isatty_r>
 8006c5e:	b128      	cbz	r0, 8006c6c <__smakebuf_r+0x74>
 8006c60:	89a3      	ldrh	r3, [r4, #12]
 8006c62:	f023 0303 	bic.w	r3, r3, #3
 8006c66:	f043 0301 	orr.w	r3, r3, #1
 8006c6a:	81a3      	strh	r3, [r4, #12]
 8006c6c:	89a0      	ldrh	r0, [r4, #12]
 8006c6e:	4305      	orrs	r5, r0
 8006c70:	81a5      	strh	r5, [r4, #12]
 8006c72:	e7cd      	b.n	8006c10 <__smakebuf_r+0x18>
 8006c74:	08006a05 	.word	0x08006a05

08006c78 <_raise_r>:
 8006c78:	291f      	cmp	r1, #31
 8006c7a:	b538      	push	{r3, r4, r5, lr}
 8006c7c:	4604      	mov	r4, r0
 8006c7e:	460d      	mov	r5, r1
 8006c80:	d904      	bls.n	8006c8c <_raise_r+0x14>
 8006c82:	2316      	movs	r3, #22
 8006c84:	6003      	str	r3, [r0, #0]
 8006c86:	f04f 30ff 	mov.w	r0, #4294967295
 8006c8a:	bd38      	pop	{r3, r4, r5, pc}
 8006c8c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8006c8e:	b112      	cbz	r2, 8006c96 <_raise_r+0x1e>
 8006c90:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006c94:	b94b      	cbnz	r3, 8006caa <_raise_r+0x32>
 8006c96:	4620      	mov	r0, r4
 8006c98:	f000 f830 	bl	8006cfc <_getpid_r>
 8006c9c:	462a      	mov	r2, r5
 8006c9e:	4601      	mov	r1, r0
 8006ca0:	4620      	mov	r0, r4
 8006ca2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006ca6:	f000 b817 	b.w	8006cd8 <_kill_r>
 8006caa:	2b01      	cmp	r3, #1
 8006cac:	d00a      	beq.n	8006cc4 <_raise_r+0x4c>
 8006cae:	1c59      	adds	r1, r3, #1
 8006cb0:	d103      	bne.n	8006cba <_raise_r+0x42>
 8006cb2:	2316      	movs	r3, #22
 8006cb4:	6003      	str	r3, [r0, #0]
 8006cb6:	2001      	movs	r0, #1
 8006cb8:	e7e7      	b.n	8006c8a <_raise_r+0x12>
 8006cba:	2400      	movs	r4, #0
 8006cbc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8006cc0:	4628      	mov	r0, r5
 8006cc2:	4798      	blx	r3
 8006cc4:	2000      	movs	r0, #0
 8006cc6:	e7e0      	b.n	8006c8a <_raise_r+0x12>

08006cc8 <raise>:
 8006cc8:	4b02      	ldr	r3, [pc, #8]	; (8006cd4 <raise+0xc>)
 8006cca:	4601      	mov	r1, r0
 8006ccc:	6818      	ldr	r0, [r3, #0]
 8006cce:	f7ff bfd3 	b.w	8006c78 <_raise_r>
 8006cd2:	bf00      	nop
 8006cd4:	2000000c 	.word	0x2000000c

08006cd8 <_kill_r>:
 8006cd8:	b538      	push	{r3, r4, r5, lr}
 8006cda:	4d07      	ldr	r5, [pc, #28]	; (8006cf8 <_kill_r+0x20>)
 8006cdc:	2300      	movs	r3, #0
 8006cde:	4604      	mov	r4, r0
 8006ce0:	4608      	mov	r0, r1
 8006ce2:	4611      	mov	r1, r2
 8006ce4:	602b      	str	r3, [r5, #0]
 8006ce6:	f7fa fc8f 	bl	8001608 <_kill>
 8006cea:	1c43      	adds	r3, r0, #1
 8006cec:	d102      	bne.n	8006cf4 <_kill_r+0x1c>
 8006cee:	682b      	ldr	r3, [r5, #0]
 8006cf0:	b103      	cbz	r3, 8006cf4 <_kill_r+0x1c>
 8006cf2:	6023      	str	r3, [r4, #0]
 8006cf4:	bd38      	pop	{r3, r4, r5, pc}
 8006cf6:	bf00      	nop
 8006cf8:	200002bc 	.word	0x200002bc

08006cfc <_getpid_r>:
 8006cfc:	f7fa bc7c 	b.w	80015f8 <_getpid>

08006d00 <__sread>:
 8006d00:	b510      	push	{r4, lr}
 8006d02:	460c      	mov	r4, r1
 8006d04:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006d08:	f000 f894 	bl	8006e34 <_read_r>
 8006d0c:	2800      	cmp	r0, #0
 8006d0e:	bfab      	itete	ge
 8006d10:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006d12:	89a3      	ldrhlt	r3, [r4, #12]
 8006d14:	181b      	addge	r3, r3, r0
 8006d16:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006d1a:	bfac      	ite	ge
 8006d1c:	6563      	strge	r3, [r4, #84]	; 0x54
 8006d1e:	81a3      	strhlt	r3, [r4, #12]
 8006d20:	bd10      	pop	{r4, pc}

08006d22 <__swrite>:
 8006d22:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006d26:	461f      	mov	r7, r3
 8006d28:	898b      	ldrh	r3, [r1, #12]
 8006d2a:	05db      	lsls	r3, r3, #23
 8006d2c:	4605      	mov	r5, r0
 8006d2e:	460c      	mov	r4, r1
 8006d30:	4616      	mov	r6, r2
 8006d32:	d505      	bpl.n	8006d40 <__swrite+0x1e>
 8006d34:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006d38:	2302      	movs	r3, #2
 8006d3a:	2200      	movs	r2, #0
 8006d3c:	f000 f868 	bl	8006e10 <_lseek_r>
 8006d40:	89a3      	ldrh	r3, [r4, #12]
 8006d42:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006d46:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006d4a:	81a3      	strh	r3, [r4, #12]
 8006d4c:	4632      	mov	r2, r6
 8006d4e:	463b      	mov	r3, r7
 8006d50:	4628      	mov	r0, r5
 8006d52:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006d56:	f000 b817 	b.w	8006d88 <_write_r>

08006d5a <__sseek>:
 8006d5a:	b510      	push	{r4, lr}
 8006d5c:	460c      	mov	r4, r1
 8006d5e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006d62:	f000 f855 	bl	8006e10 <_lseek_r>
 8006d66:	1c43      	adds	r3, r0, #1
 8006d68:	89a3      	ldrh	r3, [r4, #12]
 8006d6a:	bf15      	itete	ne
 8006d6c:	6560      	strne	r0, [r4, #84]	; 0x54
 8006d6e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006d72:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006d76:	81a3      	strheq	r3, [r4, #12]
 8006d78:	bf18      	it	ne
 8006d7a:	81a3      	strhne	r3, [r4, #12]
 8006d7c:	bd10      	pop	{r4, pc}

08006d7e <__sclose>:
 8006d7e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006d82:	f000 b813 	b.w	8006dac <_close_r>
	...

08006d88 <_write_r>:
 8006d88:	b538      	push	{r3, r4, r5, lr}
 8006d8a:	4d07      	ldr	r5, [pc, #28]	; (8006da8 <_write_r+0x20>)
 8006d8c:	4604      	mov	r4, r0
 8006d8e:	4608      	mov	r0, r1
 8006d90:	4611      	mov	r1, r2
 8006d92:	2200      	movs	r2, #0
 8006d94:	602a      	str	r2, [r5, #0]
 8006d96:	461a      	mov	r2, r3
 8006d98:	f7fa fc6d 	bl	8001676 <_write>
 8006d9c:	1c43      	adds	r3, r0, #1
 8006d9e:	d102      	bne.n	8006da6 <_write_r+0x1e>
 8006da0:	682b      	ldr	r3, [r5, #0]
 8006da2:	b103      	cbz	r3, 8006da6 <_write_r+0x1e>
 8006da4:	6023      	str	r3, [r4, #0]
 8006da6:	bd38      	pop	{r3, r4, r5, pc}
 8006da8:	200002bc 	.word	0x200002bc

08006dac <_close_r>:
 8006dac:	b538      	push	{r3, r4, r5, lr}
 8006dae:	4d06      	ldr	r5, [pc, #24]	; (8006dc8 <_close_r+0x1c>)
 8006db0:	2300      	movs	r3, #0
 8006db2:	4604      	mov	r4, r0
 8006db4:	4608      	mov	r0, r1
 8006db6:	602b      	str	r3, [r5, #0]
 8006db8:	f7fa fc79 	bl	80016ae <_close>
 8006dbc:	1c43      	adds	r3, r0, #1
 8006dbe:	d102      	bne.n	8006dc6 <_close_r+0x1a>
 8006dc0:	682b      	ldr	r3, [r5, #0]
 8006dc2:	b103      	cbz	r3, 8006dc6 <_close_r+0x1a>
 8006dc4:	6023      	str	r3, [r4, #0]
 8006dc6:	bd38      	pop	{r3, r4, r5, pc}
 8006dc8:	200002bc 	.word	0x200002bc

08006dcc <_fstat_r>:
 8006dcc:	b538      	push	{r3, r4, r5, lr}
 8006dce:	4d07      	ldr	r5, [pc, #28]	; (8006dec <_fstat_r+0x20>)
 8006dd0:	2300      	movs	r3, #0
 8006dd2:	4604      	mov	r4, r0
 8006dd4:	4608      	mov	r0, r1
 8006dd6:	4611      	mov	r1, r2
 8006dd8:	602b      	str	r3, [r5, #0]
 8006dda:	f7fa fc74 	bl	80016c6 <_fstat>
 8006dde:	1c43      	adds	r3, r0, #1
 8006de0:	d102      	bne.n	8006de8 <_fstat_r+0x1c>
 8006de2:	682b      	ldr	r3, [r5, #0]
 8006de4:	b103      	cbz	r3, 8006de8 <_fstat_r+0x1c>
 8006de6:	6023      	str	r3, [r4, #0]
 8006de8:	bd38      	pop	{r3, r4, r5, pc}
 8006dea:	bf00      	nop
 8006dec:	200002bc 	.word	0x200002bc

08006df0 <_isatty_r>:
 8006df0:	b538      	push	{r3, r4, r5, lr}
 8006df2:	4d06      	ldr	r5, [pc, #24]	; (8006e0c <_isatty_r+0x1c>)
 8006df4:	2300      	movs	r3, #0
 8006df6:	4604      	mov	r4, r0
 8006df8:	4608      	mov	r0, r1
 8006dfa:	602b      	str	r3, [r5, #0]
 8006dfc:	f7fa fc73 	bl	80016e6 <_isatty>
 8006e00:	1c43      	adds	r3, r0, #1
 8006e02:	d102      	bne.n	8006e0a <_isatty_r+0x1a>
 8006e04:	682b      	ldr	r3, [r5, #0]
 8006e06:	b103      	cbz	r3, 8006e0a <_isatty_r+0x1a>
 8006e08:	6023      	str	r3, [r4, #0]
 8006e0a:	bd38      	pop	{r3, r4, r5, pc}
 8006e0c:	200002bc 	.word	0x200002bc

08006e10 <_lseek_r>:
 8006e10:	b538      	push	{r3, r4, r5, lr}
 8006e12:	4d07      	ldr	r5, [pc, #28]	; (8006e30 <_lseek_r+0x20>)
 8006e14:	4604      	mov	r4, r0
 8006e16:	4608      	mov	r0, r1
 8006e18:	4611      	mov	r1, r2
 8006e1a:	2200      	movs	r2, #0
 8006e1c:	602a      	str	r2, [r5, #0]
 8006e1e:	461a      	mov	r2, r3
 8006e20:	f7fa fc6c 	bl	80016fc <_lseek>
 8006e24:	1c43      	adds	r3, r0, #1
 8006e26:	d102      	bne.n	8006e2e <_lseek_r+0x1e>
 8006e28:	682b      	ldr	r3, [r5, #0]
 8006e2a:	b103      	cbz	r3, 8006e2e <_lseek_r+0x1e>
 8006e2c:	6023      	str	r3, [r4, #0]
 8006e2e:	bd38      	pop	{r3, r4, r5, pc}
 8006e30:	200002bc 	.word	0x200002bc

08006e34 <_read_r>:
 8006e34:	b538      	push	{r3, r4, r5, lr}
 8006e36:	4d07      	ldr	r5, [pc, #28]	; (8006e54 <_read_r+0x20>)
 8006e38:	4604      	mov	r4, r0
 8006e3a:	4608      	mov	r0, r1
 8006e3c:	4611      	mov	r1, r2
 8006e3e:	2200      	movs	r2, #0
 8006e40:	602a      	str	r2, [r5, #0]
 8006e42:	461a      	mov	r2, r3
 8006e44:	f7fa fbfa 	bl	800163c <_read>
 8006e48:	1c43      	adds	r3, r0, #1
 8006e4a:	d102      	bne.n	8006e52 <_read_r+0x1e>
 8006e4c:	682b      	ldr	r3, [r5, #0]
 8006e4e:	b103      	cbz	r3, 8006e52 <_read_r+0x1e>
 8006e50:	6023      	str	r3, [r4, #0]
 8006e52:	bd38      	pop	{r3, r4, r5, pc}
 8006e54:	200002bc 	.word	0x200002bc

08006e58 <_init>:
 8006e58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e5a:	bf00      	nop
 8006e5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006e5e:	bc08      	pop	{r3}
 8006e60:	469e      	mov	lr, r3
 8006e62:	4770      	bx	lr

08006e64 <_fini>:
 8006e64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e66:	bf00      	nop
 8006e68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006e6a:	bc08      	pop	{r3}
 8006e6c:	469e      	mov	lr, r3
 8006e6e:	4770      	bx	lr
