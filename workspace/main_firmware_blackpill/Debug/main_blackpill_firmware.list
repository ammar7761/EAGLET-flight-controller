
main_blackpill_firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000073f4  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000090  08007590  08007590  00017590  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007620  08007620  00020100  2**0
                  CONTENTS
  4 .ARM          00000008  08007620  08007620  00017620  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007628  08007628  00020100  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007628  08007628  00017628  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800762c  0800762c  0001762c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000100  20000000  08007630  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000480  20000100  08007730  00020100  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000580  08007730  00020580  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020100  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020130  2**0
                  CONTENTS, READONLY
 13 .debug_info   00014db2  00000000  00000000  00020173  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003181  00000000  00000000  00034f25  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001270  00000000  00000000  000380a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000e6e  00000000  00000000  00039318  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00018d08  00000000  00000000  0003a186  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00018c85  00000000  00000000  00052e8e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00092045  00000000  00000000  0006bb13  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005114  00000000  00000000  000fdb58  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000040  00000000  00000000  00102c6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000100 	.word	0x20000100
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08007574 	.word	0x08007574

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000104 	.word	0x20000104
 80001d4:	08007574 	.word	0x08007574

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__gedf2>:
 8000974:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000978:	e006      	b.n	8000988 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__ledf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	e002      	b.n	8000988 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__cmpdf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	f84d cd04 	str.w	ip, [sp, #-4]!
 800098c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000994:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800099e:	d01b      	beq.n	80009d8 <__cmpdf2+0x54>
 80009a0:	b001      	add	sp, #4
 80009a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009a6:	bf0c      	ite	eq
 80009a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ac:	ea91 0f03 	teqne	r1, r3
 80009b0:	bf02      	ittt	eq
 80009b2:	ea90 0f02 	teqeq	r0, r2
 80009b6:	2000      	moveq	r0, #0
 80009b8:	4770      	bxeq	lr
 80009ba:	f110 0f00 	cmn.w	r0, #0
 80009be:	ea91 0f03 	teq	r1, r3
 80009c2:	bf58      	it	pl
 80009c4:	4299      	cmppl	r1, r3
 80009c6:	bf08      	it	eq
 80009c8:	4290      	cmpeq	r0, r2
 80009ca:	bf2c      	ite	cs
 80009cc:	17d8      	asrcs	r0, r3, #31
 80009ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009d2:	f040 0001 	orr.w	r0, r0, #1
 80009d6:	4770      	bx	lr
 80009d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d102      	bne.n	80009e8 <__cmpdf2+0x64>
 80009e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009e6:	d107      	bne.n	80009f8 <__cmpdf2+0x74>
 80009e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d1d6      	bne.n	80009a0 <__cmpdf2+0x1c>
 80009f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009f6:	d0d3      	beq.n	80009a0 <__cmpdf2+0x1c>
 80009f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdrcmple>:
 8000a00:	4684      	mov	ip, r0
 8000a02:	4610      	mov	r0, r2
 8000a04:	4662      	mov	r2, ip
 8000a06:	468c      	mov	ip, r1
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4663      	mov	r3, ip
 8000a0c:	e000      	b.n	8000a10 <__aeabi_cdcmpeq>
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdcmpeq>:
 8000a10:	b501      	push	{r0, lr}
 8000a12:	f7ff ffb7 	bl	8000984 <__cmpdf2>
 8000a16:	2800      	cmp	r0, #0
 8000a18:	bf48      	it	mi
 8000a1a:	f110 0f00 	cmnmi.w	r0, #0
 8000a1e:	bd01      	pop	{r0, pc}

08000a20 <__aeabi_dcmpeq>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff fff4 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a28:	bf0c      	ite	eq
 8000a2a:	2001      	moveq	r0, #1
 8000a2c:	2000      	movne	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmplt>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff ffea 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a3c:	bf34      	ite	cc
 8000a3e:	2001      	movcc	r0, #1
 8000a40:	2000      	movcs	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmple>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffe0 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a50:	bf94      	ite	ls
 8000a52:	2001      	movls	r0, #1
 8000a54:	2000      	movhi	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmpge>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffce 	bl	8000a00 <__aeabi_cdrcmple>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpgt>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffc4 	bl	8000a00 <__aeabi_cdrcmple>
 8000a78:	bf34      	ite	cc
 8000a7a:	2001      	movcc	r0, #1
 8000a7c:	2000      	movcs	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_dcmpun>:
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x10>
 8000a8e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a92:	d10a      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000a94:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	d102      	bne.n	8000aa4 <__aeabi_dcmpun+0x20>
 8000a9e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aa2:	d102      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	f04f 0001 	mov.w	r0, #1
 8000aae:	4770      	bx	lr

08000ab0 <__aeabi_uldivmod>:
 8000ab0:	b953      	cbnz	r3, 8000ac8 <__aeabi_uldivmod+0x18>
 8000ab2:	b94a      	cbnz	r2, 8000ac8 <__aeabi_uldivmod+0x18>
 8000ab4:	2900      	cmp	r1, #0
 8000ab6:	bf08      	it	eq
 8000ab8:	2800      	cmpeq	r0, #0
 8000aba:	bf1c      	itt	ne
 8000abc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000ac0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000ac4:	f000 b970 	b.w	8000da8 <__aeabi_idiv0>
 8000ac8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000acc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ad0:	f000 f806 	bl	8000ae0 <__udivmoddi4>
 8000ad4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ad8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000adc:	b004      	add	sp, #16
 8000ade:	4770      	bx	lr

08000ae0 <__udivmoddi4>:
 8000ae0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ae4:	9e08      	ldr	r6, [sp, #32]
 8000ae6:	460d      	mov	r5, r1
 8000ae8:	4604      	mov	r4, r0
 8000aea:	460f      	mov	r7, r1
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d14a      	bne.n	8000b86 <__udivmoddi4+0xa6>
 8000af0:	428a      	cmp	r2, r1
 8000af2:	4694      	mov	ip, r2
 8000af4:	d965      	bls.n	8000bc2 <__udivmoddi4+0xe2>
 8000af6:	fab2 f382 	clz	r3, r2
 8000afa:	b143      	cbz	r3, 8000b0e <__udivmoddi4+0x2e>
 8000afc:	fa02 fc03 	lsl.w	ip, r2, r3
 8000b00:	f1c3 0220 	rsb	r2, r3, #32
 8000b04:	409f      	lsls	r7, r3
 8000b06:	fa20 f202 	lsr.w	r2, r0, r2
 8000b0a:	4317      	orrs	r7, r2
 8000b0c:	409c      	lsls	r4, r3
 8000b0e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000b12:	fa1f f58c 	uxth.w	r5, ip
 8000b16:	fbb7 f1fe 	udiv	r1, r7, lr
 8000b1a:	0c22      	lsrs	r2, r4, #16
 8000b1c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000b20:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000b24:	fb01 f005 	mul.w	r0, r1, r5
 8000b28:	4290      	cmp	r0, r2
 8000b2a:	d90a      	bls.n	8000b42 <__udivmoddi4+0x62>
 8000b2c:	eb1c 0202 	adds.w	r2, ip, r2
 8000b30:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000b34:	f080 811c 	bcs.w	8000d70 <__udivmoddi4+0x290>
 8000b38:	4290      	cmp	r0, r2
 8000b3a:	f240 8119 	bls.w	8000d70 <__udivmoddi4+0x290>
 8000b3e:	3902      	subs	r1, #2
 8000b40:	4462      	add	r2, ip
 8000b42:	1a12      	subs	r2, r2, r0
 8000b44:	b2a4      	uxth	r4, r4
 8000b46:	fbb2 f0fe 	udiv	r0, r2, lr
 8000b4a:	fb0e 2210 	mls	r2, lr, r0, r2
 8000b4e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000b52:	fb00 f505 	mul.w	r5, r0, r5
 8000b56:	42a5      	cmp	r5, r4
 8000b58:	d90a      	bls.n	8000b70 <__udivmoddi4+0x90>
 8000b5a:	eb1c 0404 	adds.w	r4, ip, r4
 8000b5e:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000b62:	f080 8107 	bcs.w	8000d74 <__udivmoddi4+0x294>
 8000b66:	42a5      	cmp	r5, r4
 8000b68:	f240 8104 	bls.w	8000d74 <__udivmoddi4+0x294>
 8000b6c:	4464      	add	r4, ip
 8000b6e:	3802      	subs	r0, #2
 8000b70:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000b74:	1b64      	subs	r4, r4, r5
 8000b76:	2100      	movs	r1, #0
 8000b78:	b11e      	cbz	r6, 8000b82 <__udivmoddi4+0xa2>
 8000b7a:	40dc      	lsrs	r4, r3
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	e9c6 4300 	strd	r4, r3, [r6]
 8000b82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b86:	428b      	cmp	r3, r1
 8000b88:	d908      	bls.n	8000b9c <__udivmoddi4+0xbc>
 8000b8a:	2e00      	cmp	r6, #0
 8000b8c:	f000 80ed 	beq.w	8000d6a <__udivmoddi4+0x28a>
 8000b90:	2100      	movs	r1, #0
 8000b92:	e9c6 0500 	strd	r0, r5, [r6]
 8000b96:	4608      	mov	r0, r1
 8000b98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b9c:	fab3 f183 	clz	r1, r3
 8000ba0:	2900      	cmp	r1, #0
 8000ba2:	d149      	bne.n	8000c38 <__udivmoddi4+0x158>
 8000ba4:	42ab      	cmp	r3, r5
 8000ba6:	d302      	bcc.n	8000bae <__udivmoddi4+0xce>
 8000ba8:	4282      	cmp	r2, r0
 8000baa:	f200 80f8 	bhi.w	8000d9e <__udivmoddi4+0x2be>
 8000bae:	1a84      	subs	r4, r0, r2
 8000bb0:	eb65 0203 	sbc.w	r2, r5, r3
 8000bb4:	2001      	movs	r0, #1
 8000bb6:	4617      	mov	r7, r2
 8000bb8:	2e00      	cmp	r6, #0
 8000bba:	d0e2      	beq.n	8000b82 <__udivmoddi4+0xa2>
 8000bbc:	e9c6 4700 	strd	r4, r7, [r6]
 8000bc0:	e7df      	b.n	8000b82 <__udivmoddi4+0xa2>
 8000bc2:	b902      	cbnz	r2, 8000bc6 <__udivmoddi4+0xe6>
 8000bc4:	deff      	udf	#255	; 0xff
 8000bc6:	fab2 f382 	clz	r3, r2
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	f040 8090 	bne.w	8000cf0 <__udivmoddi4+0x210>
 8000bd0:	1a8a      	subs	r2, r1, r2
 8000bd2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000bd6:	fa1f fe8c 	uxth.w	lr, ip
 8000bda:	2101      	movs	r1, #1
 8000bdc:	fbb2 f5f7 	udiv	r5, r2, r7
 8000be0:	fb07 2015 	mls	r0, r7, r5, r2
 8000be4:	0c22      	lsrs	r2, r4, #16
 8000be6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000bea:	fb0e f005 	mul.w	r0, lr, r5
 8000bee:	4290      	cmp	r0, r2
 8000bf0:	d908      	bls.n	8000c04 <__udivmoddi4+0x124>
 8000bf2:	eb1c 0202 	adds.w	r2, ip, r2
 8000bf6:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000bfa:	d202      	bcs.n	8000c02 <__udivmoddi4+0x122>
 8000bfc:	4290      	cmp	r0, r2
 8000bfe:	f200 80cb 	bhi.w	8000d98 <__udivmoddi4+0x2b8>
 8000c02:	4645      	mov	r5, r8
 8000c04:	1a12      	subs	r2, r2, r0
 8000c06:	b2a4      	uxth	r4, r4
 8000c08:	fbb2 f0f7 	udiv	r0, r2, r7
 8000c0c:	fb07 2210 	mls	r2, r7, r0, r2
 8000c10:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c14:	fb0e fe00 	mul.w	lr, lr, r0
 8000c18:	45a6      	cmp	lr, r4
 8000c1a:	d908      	bls.n	8000c2e <__udivmoddi4+0x14e>
 8000c1c:	eb1c 0404 	adds.w	r4, ip, r4
 8000c20:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000c24:	d202      	bcs.n	8000c2c <__udivmoddi4+0x14c>
 8000c26:	45a6      	cmp	lr, r4
 8000c28:	f200 80bb 	bhi.w	8000da2 <__udivmoddi4+0x2c2>
 8000c2c:	4610      	mov	r0, r2
 8000c2e:	eba4 040e 	sub.w	r4, r4, lr
 8000c32:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000c36:	e79f      	b.n	8000b78 <__udivmoddi4+0x98>
 8000c38:	f1c1 0720 	rsb	r7, r1, #32
 8000c3c:	408b      	lsls	r3, r1
 8000c3e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000c42:	ea4c 0c03 	orr.w	ip, ip, r3
 8000c46:	fa05 f401 	lsl.w	r4, r5, r1
 8000c4a:	fa20 f307 	lsr.w	r3, r0, r7
 8000c4e:	40fd      	lsrs	r5, r7
 8000c50:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000c54:	4323      	orrs	r3, r4
 8000c56:	fbb5 f8f9 	udiv	r8, r5, r9
 8000c5a:	fa1f fe8c 	uxth.w	lr, ip
 8000c5e:	fb09 5518 	mls	r5, r9, r8, r5
 8000c62:	0c1c      	lsrs	r4, r3, #16
 8000c64:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000c68:	fb08 f50e 	mul.w	r5, r8, lr
 8000c6c:	42a5      	cmp	r5, r4
 8000c6e:	fa02 f201 	lsl.w	r2, r2, r1
 8000c72:	fa00 f001 	lsl.w	r0, r0, r1
 8000c76:	d90b      	bls.n	8000c90 <__udivmoddi4+0x1b0>
 8000c78:	eb1c 0404 	adds.w	r4, ip, r4
 8000c7c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000c80:	f080 8088 	bcs.w	8000d94 <__udivmoddi4+0x2b4>
 8000c84:	42a5      	cmp	r5, r4
 8000c86:	f240 8085 	bls.w	8000d94 <__udivmoddi4+0x2b4>
 8000c8a:	f1a8 0802 	sub.w	r8, r8, #2
 8000c8e:	4464      	add	r4, ip
 8000c90:	1b64      	subs	r4, r4, r5
 8000c92:	b29d      	uxth	r5, r3
 8000c94:	fbb4 f3f9 	udiv	r3, r4, r9
 8000c98:	fb09 4413 	mls	r4, r9, r3, r4
 8000c9c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000ca0:	fb03 fe0e 	mul.w	lr, r3, lr
 8000ca4:	45a6      	cmp	lr, r4
 8000ca6:	d908      	bls.n	8000cba <__udivmoddi4+0x1da>
 8000ca8:	eb1c 0404 	adds.w	r4, ip, r4
 8000cac:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000cb0:	d26c      	bcs.n	8000d8c <__udivmoddi4+0x2ac>
 8000cb2:	45a6      	cmp	lr, r4
 8000cb4:	d96a      	bls.n	8000d8c <__udivmoddi4+0x2ac>
 8000cb6:	3b02      	subs	r3, #2
 8000cb8:	4464      	add	r4, ip
 8000cba:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cbe:	fba3 9502 	umull	r9, r5, r3, r2
 8000cc2:	eba4 040e 	sub.w	r4, r4, lr
 8000cc6:	42ac      	cmp	r4, r5
 8000cc8:	46c8      	mov	r8, r9
 8000cca:	46ae      	mov	lr, r5
 8000ccc:	d356      	bcc.n	8000d7c <__udivmoddi4+0x29c>
 8000cce:	d053      	beq.n	8000d78 <__udivmoddi4+0x298>
 8000cd0:	b156      	cbz	r6, 8000ce8 <__udivmoddi4+0x208>
 8000cd2:	ebb0 0208 	subs.w	r2, r0, r8
 8000cd6:	eb64 040e 	sbc.w	r4, r4, lr
 8000cda:	fa04 f707 	lsl.w	r7, r4, r7
 8000cde:	40ca      	lsrs	r2, r1
 8000ce0:	40cc      	lsrs	r4, r1
 8000ce2:	4317      	orrs	r7, r2
 8000ce4:	e9c6 7400 	strd	r7, r4, [r6]
 8000ce8:	4618      	mov	r0, r3
 8000cea:	2100      	movs	r1, #0
 8000cec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cf0:	f1c3 0120 	rsb	r1, r3, #32
 8000cf4:	fa02 fc03 	lsl.w	ip, r2, r3
 8000cf8:	fa20 f201 	lsr.w	r2, r0, r1
 8000cfc:	fa25 f101 	lsr.w	r1, r5, r1
 8000d00:	409d      	lsls	r5, r3
 8000d02:	432a      	orrs	r2, r5
 8000d04:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d08:	fa1f fe8c 	uxth.w	lr, ip
 8000d0c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d10:	fb07 1510 	mls	r5, r7, r0, r1
 8000d14:	0c11      	lsrs	r1, r2, #16
 8000d16:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000d1a:	fb00 f50e 	mul.w	r5, r0, lr
 8000d1e:	428d      	cmp	r5, r1
 8000d20:	fa04 f403 	lsl.w	r4, r4, r3
 8000d24:	d908      	bls.n	8000d38 <__udivmoddi4+0x258>
 8000d26:	eb1c 0101 	adds.w	r1, ip, r1
 8000d2a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000d2e:	d22f      	bcs.n	8000d90 <__udivmoddi4+0x2b0>
 8000d30:	428d      	cmp	r5, r1
 8000d32:	d92d      	bls.n	8000d90 <__udivmoddi4+0x2b0>
 8000d34:	3802      	subs	r0, #2
 8000d36:	4461      	add	r1, ip
 8000d38:	1b49      	subs	r1, r1, r5
 8000d3a:	b292      	uxth	r2, r2
 8000d3c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000d40:	fb07 1115 	mls	r1, r7, r5, r1
 8000d44:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000d48:	fb05 f10e 	mul.w	r1, r5, lr
 8000d4c:	4291      	cmp	r1, r2
 8000d4e:	d908      	bls.n	8000d62 <__udivmoddi4+0x282>
 8000d50:	eb1c 0202 	adds.w	r2, ip, r2
 8000d54:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000d58:	d216      	bcs.n	8000d88 <__udivmoddi4+0x2a8>
 8000d5a:	4291      	cmp	r1, r2
 8000d5c:	d914      	bls.n	8000d88 <__udivmoddi4+0x2a8>
 8000d5e:	3d02      	subs	r5, #2
 8000d60:	4462      	add	r2, ip
 8000d62:	1a52      	subs	r2, r2, r1
 8000d64:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000d68:	e738      	b.n	8000bdc <__udivmoddi4+0xfc>
 8000d6a:	4631      	mov	r1, r6
 8000d6c:	4630      	mov	r0, r6
 8000d6e:	e708      	b.n	8000b82 <__udivmoddi4+0xa2>
 8000d70:	4639      	mov	r1, r7
 8000d72:	e6e6      	b.n	8000b42 <__udivmoddi4+0x62>
 8000d74:	4610      	mov	r0, r2
 8000d76:	e6fb      	b.n	8000b70 <__udivmoddi4+0x90>
 8000d78:	4548      	cmp	r0, r9
 8000d7a:	d2a9      	bcs.n	8000cd0 <__udivmoddi4+0x1f0>
 8000d7c:	ebb9 0802 	subs.w	r8, r9, r2
 8000d80:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000d84:	3b01      	subs	r3, #1
 8000d86:	e7a3      	b.n	8000cd0 <__udivmoddi4+0x1f0>
 8000d88:	4645      	mov	r5, r8
 8000d8a:	e7ea      	b.n	8000d62 <__udivmoddi4+0x282>
 8000d8c:	462b      	mov	r3, r5
 8000d8e:	e794      	b.n	8000cba <__udivmoddi4+0x1da>
 8000d90:	4640      	mov	r0, r8
 8000d92:	e7d1      	b.n	8000d38 <__udivmoddi4+0x258>
 8000d94:	46d0      	mov	r8, sl
 8000d96:	e77b      	b.n	8000c90 <__udivmoddi4+0x1b0>
 8000d98:	3d02      	subs	r5, #2
 8000d9a:	4462      	add	r2, ip
 8000d9c:	e732      	b.n	8000c04 <__udivmoddi4+0x124>
 8000d9e:	4608      	mov	r0, r1
 8000da0:	e70a      	b.n	8000bb8 <__udivmoddi4+0xd8>
 8000da2:	4464      	add	r4, ip
 8000da4:	3802      	subs	r0, #2
 8000da6:	e742      	b.n	8000c2e <__udivmoddi4+0x14e>

08000da8 <__aeabi_idiv0>:
 8000da8:	4770      	bx	lr
 8000daa:	bf00      	nop

08000dac <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b082      	sub	sp, #8
 8000db0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000db2:	2300      	movs	r3, #0
 8000db4:	607b      	str	r3, [r7, #4]
 8000db6:	4b17      	ldr	r3, [pc, #92]	; (8000e14 <MX_DMA_Init+0x68>)
 8000db8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dba:	4a16      	ldr	r2, [pc, #88]	; (8000e14 <MX_DMA_Init+0x68>)
 8000dbc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000dc0:	6313      	str	r3, [r2, #48]	; 0x30
 8000dc2:	4b14      	ldr	r3, [pc, #80]	; (8000e14 <MX_DMA_Init+0x68>)
 8000dc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dc6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000dca:	607b      	str	r3, [r7, #4]
 8000dcc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000dce:	2300      	movs	r3, #0
 8000dd0:	603b      	str	r3, [r7, #0]
 8000dd2:	4b10      	ldr	r3, [pc, #64]	; (8000e14 <MX_DMA_Init+0x68>)
 8000dd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dd6:	4a0f      	ldr	r2, [pc, #60]	; (8000e14 <MX_DMA_Init+0x68>)
 8000dd8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000ddc:	6313      	str	r3, [r2, #48]	; 0x30
 8000dde:	4b0d      	ldr	r3, [pc, #52]	; (8000e14 <MX_DMA_Init+0x68>)
 8000de0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000de2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000de6:	603b      	str	r3, [r7, #0]
 8000de8:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8000dea:	2200      	movs	r2, #0
 8000dec:	2100      	movs	r1, #0
 8000dee:	2010      	movs	r0, #16
 8000df0:	f000 fe95 	bl	8001b1e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000df4:	2010      	movs	r0, #16
 8000df6:	f000 feae 	bl	8001b56 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	2100      	movs	r1, #0
 8000dfe:	203a      	movs	r0, #58	; 0x3a
 8000e00:	f000 fe8d 	bl	8001b1e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8000e04:	203a      	movs	r0, #58	; 0x3a
 8000e06:	f000 fea6 	bl	8001b56 <HAL_NVIC_EnableIRQ>

}
 8000e0a:	bf00      	nop
 8000e0c:	3708      	adds	r7, #8
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	bd80      	pop	{r7, pc}
 8000e12:	bf00      	nop
 8000e14:	40023800 	.word	0x40023800

08000e18 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000e18:	b480      	push	{r7}
 8000e1a:	b085      	sub	sp, #20
 8000e1c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e1e:	2300      	movs	r3, #0
 8000e20:	60fb      	str	r3, [r7, #12]
 8000e22:	4b1e      	ldr	r3, [pc, #120]	; (8000e9c <MX_GPIO_Init+0x84>)
 8000e24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e26:	4a1d      	ldr	r2, [pc, #116]	; (8000e9c <MX_GPIO_Init+0x84>)
 8000e28:	f043 0304 	orr.w	r3, r3, #4
 8000e2c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e2e:	4b1b      	ldr	r3, [pc, #108]	; (8000e9c <MX_GPIO_Init+0x84>)
 8000e30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e32:	f003 0304 	and.w	r3, r3, #4
 8000e36:	60fb      	str	r3, [r7, #12]
 8000e38:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	60bb      	str	r3, [r7, #8]
 8000e3e:	4b17      	ldr	r3, [pc, #92]	; (8000e9c <MX_GPIO_Init+0x84>)
 8000e40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e42:	4a16      	ldr	r2, [pc, #88]	; (8000e9c <MX_GPIO_Init+0x84>)
 8000e44:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e48:	6313      	str	r3, [r2, #48]	; 0x30
 8000e4a:	4b14      	ldr	r3, [pc, #80]	; (8000e9c <MX_GPIO_Init+0x84>)
 8000e4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e52:	60bb      	str	r3, [r7, #8]
 8000e54:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e56:	2300      	movs	r3, #0
 8000e58:	607b      	str	r3, [r7, #4]
 8000e5a:	4b10      	ldr	r3, [pc, #64]	; (8000e9c <MX_GPIO_Init+0x84>)
 8000e5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e5e:	4a0f      	ldr	r2, [pc, #60]	; (8000e9c <MX_GPIO_Init+0x84>)
 8000e60:	f043 0301 	orr.w	r3, r3, #1
 8000e64:	6313      	str	r3, [r2, #48]	; 0x30
 8000e66:	4b0d      	ldr	r3, [pc, #52]	; (8000e9c <MX_GPIO_Init+0x84>)
 8000e68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e6a:	f003 0301 	and.w	r3, r3, #1
 8000e6e:	607b      	str	r3, [r7, #4]
 8000e70:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e72:	2300      	movs	r3, #0
 8000e74:	603b      	str	r3, [r7, #0]
 8000e76:	4b09      	ldr	r3, [pc, #36]	; (8000e9c <MX_GPIO_Init+0x84>)
 8000e78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e7a:	4a08      	ldr	r2, [pc, #32]	; (8000e9c <MX_GPIO_Init+0x84>)
 8000e7c:	f043 0302 	orr.w	r3, r3, #2
 8000e80:	6313      	str	r3, [r2, #48]	; 0x30
 8000e82:	4b06      	ldr	r3, [pc, #24]	; (8000e9c <MX_GPIO_Init+0x84>)
 8000e84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e86:	f003 0302 	and.w	r3, r3, #2
 8000e8a:	603b      	str	r3, [r7, #0]
 8000e8c:	683b      	ldr	r3, [r7, #0]

}
 8000e8e:	bf00      	nop
 8000e90:	3714      	adds	r7, #20
 8000e92:	46bd      	mov	sp, r7
 8000e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e98:	4770      	bx	lr
 8000e9a:	bf00      	nop
 8000e9c:	40023800 	.word	0x40023800

08000ea0 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000ea4:	4b12      	ldr	r3, [pc, #72]	; (8000ef0 <MX_I2C1_Init+0x50>)
 8000ea6:	4a13      	ldr	r2, [pc, #76]	; (8000ef4 <MX_I2C1_Init+0x54>)
 8000ea8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000eaa:	4b11      	ldr	r3, [pc, #68]	; (8000ef0 <MX_I2C1_Init+0x50>)
 8000eac:	4a12      	ldr	r2, [pc, #72]	; (8000ef8 <MX_I2C1_Init+0x58>)
 8000eae:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000eb0:	4b0f      	ldr	r3, [pc, #60]	; (8000ef0 <MX_I2C1_Init+0x50>)
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000eb6:	4b0e      	ldr	r3, [pc, #56]	; (8000ef0 <MX_I2C1_Init+0x50>)
 8000eb8:	2200      	movs	r2, #0
 8000eba:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000ebc:	4b0c      	ldr	r3, [pc, #48]	; (8000ef0 <MX_I2C1_Init+0x50>)
 8000ebe:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000ec2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ec4:	4b0a      	ldr	r3, [pc, #40]	; (8000ef0 <MX_I2C1_Init+0x50>)
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000eca:	4b09      	ldr	r3, [pc, #36]	; (8000ef0 <MX_I2C1_Init+0x50>)
 8000ecc:	2200      	movs	r2, #0
 8000ece:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000ed0:	4b07      	ldr	r3, [pc, #28]	; (8000ef0 <MX_I2C1_Init+0x50>)
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000ed6:	4b06      	ldr	r3, [pc, #24]	; (8000ef0 <MX_I2C1_Init+0x50>)
 8000ed8:	2200      	movs	r2, #0
 8000eda:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000edc:	4804      	ldr	r0, [pc, #16]	; (8000ef0 <MX_I2C1_Init+0x50>)
 8000ede:	f001 fbf5 	bl	80026cc <HAL_I2C_Init>
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d001      	beq.n	8000eec <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000ee8:	f000 f902 	bl	80010f0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000eec:	bf00      	nop
 8000eee:	bd80      	pop	{r7, pc}
 8000ef0:	2000011c 	.word	0x2000011c
 8000ef4:	40005400 	.word	0x40005400
 8000ef8:	000186a0 	.word	0x000186a0

08000efc <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b08a      	sub	sp, #40	; 0x28
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f04:	f107 0314 	add.w	r3, r7, #20
 8000f08:	2200      	movs	r2, #0
 8000f0a:	601a      	str	r2, [r3, #0]
 8000f0c:	605a      	str	r2, [r3, #4]
 8000f0e:	609a      	str	r2, [r3, #8]
 8000f10:	60da      	str	r2, [r3, #12]
 8000f12:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	4a19      	ldr	r2, [pc, #100]	; (8000f80 <HAL_I2C_MspInit+0x84>)
 8000f1a:	4293      	cmp	r3, r2
 8000f1c:	d12b      	bne.n	8000f76 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f1e:	2300      	movs	r3, #0
 8000f20:	613b      	str	r3, [r7, #16]
 8000f22:	4b18      	ldr	r3, [pc, #96]	; (8000f84 <HAL_I2C_MspInit+0x88>)
 8000f24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f26:	4a17      	ldr	r2, [pc, #92]	; (8000f84 <HAL_I2C_MspInit+0x88>)
 8000f28:	f043 0302 	orr.w	r3, r3, #2
 8000f2c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f2e:	4b15      	ldr	r3, [pc, #84]	; (8000f84 <HAL_I2C_MspInit+0x88>)
 8000f30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f32:	f003 0302 	and.w	r3, r3, #2
 8000f36:	613b      	str	r3, [r7, #16]
 8000f38:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000f3a:	23c0      	movs	r3, #192	; 0xc0
 8000f3c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f3e:	2312      	movs	r3, #18
 8000f40:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f42:	2300      	movs	r3, #0
 8000f44:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f46:	2303      	movs	r3, #3
 8000f48:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000f4a:	2304      	movs	r3, #4
 8000f4c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f4e:	f107 0314 	add.w	r3, r7, #20
 8000f52:	4619      	mov	r1, r3
 8000f54:	480c      	ldr	r0, [pc, #48]	; (8000f88 <HAL_I2C_MspInit+0x8c>)
 8000f56:	f001 fa1b 	bl	8002390 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	60fb      	str	r3, [r7, #12]
 8000f5e:	4b09      	ldr	r3, [pc, #36]	; (8000f84 <HAL_I2C_MspInit+0x88>)
 8000f60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f62:	4a08      	ldr	r2, [pc, #32]	; (8000f84 <HAL_I2C_MspInit+0x88>)
 8000f64:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000f68:	6413      	str	r3, [r2, #64]	; 0x40
 8000f6a:	4b06      	ldr	r3, [pc, #24]	; (8000f84 <HAL_I2C_MspInit+0x88>)
 8000f6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f6e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f72:	60fb      	str	r3, [r7, #12]
 8000f74:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000f76:	bf00      	nop
 8000f78:	3728      	adds	r7, #40	; 0x28
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	bd80      	pop	{r7, pc}
 8000f7e:	bf00      	nop
 8000f80:	40005400 	.word	0x40005400
 8000f84:	40023800 	.word	0x40023800
 8000f88:	40020400 	.word	0x40020400

08000f8c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f90:	f000 fc54 	bl	800183c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f94:	f000 f830 	bl	8000ff8 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  ibus_init();
 8000f98:	f005 fcea 	bl	8006970 <ibus_init>
  adxl_init();
 8000f9c:	f005 fe02 	bl	8006ba4 <adxl_init>
  MPU6050_Init(&hi2c1);
 8000fa0:	4810      	ldr	r0, [pc, #64]	; (8000fe4 <main+0x58>)
 8000fa2:	f005 fe0f 	bl	8006bc4 <MPU6050_Init>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000fa6:	f7ff ff37 	bl	8000e18 <MX_GPIO_Init>
  MX_DMA_Init();
 8000faa:	f7ff feff 	bl	8000dac <MX_DMA_Init>
  MX_I2C1_Init();
 8000fae:	f7ff ff77 	bl	8000ea0 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8000fb2:	f000 fad3 	bl	800155c <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000fb6:	f000 fafb 	bl	80015b0 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 8000fba:	f000 f9b5 	bl	8001328 <MX_TIM3_Init>
  MX_SPI2_Init();
 8000fbe:	f000 f89d 	bl	80010fc <MX_SPI2_Init>
  while (1)
  {
	 /*

	  */
	 ibus_read(ibus_data);
 8000fc2:	4809      	ldr	r0, [pc, #36]	; (8000fe8 <main+0x5c>)
 8000fc4:	f005 fce2 	bl	800698c <ibus_read>
	 MPU6050_Read_All(&hi2c1, &mpu6050_t);
 8000fc8:	4908      	ldr	r1, [pc, #32]	; (8000fec <main+0x60>)
 8000fca:	4806      	ldr	r0, [pc, #24]	; (8000fe4 <main+0x58>)
 8000fcc:	f005 fe54 	bl	8006c78 <MPU6050_Read_All>
	 KalmanSolve(&mpu6050_t,&KalmanX, &KalmanY);
 8000fd0:	4a07      	ldr	r2, [pc, #28]	; (8000ff0 <main+0x64>)
 8000fd2:	4908      	ldr	r1, [pc, #32]	; (8000ff4 <main+0x68>)
 8000fd4:	4805      	ldr	r0, [pc, #20]	; (8000fec <main+0x60>)
 8000fd6:	f005 fbb3 	bl	8006740 <KalmanSolve>
	 HAL_Delay(10);
 8000fda:	200a      	movs	r0, #10
 8000fdc:	f000 fca0 	bl	8001920 <HAL_Delay>
	 ibus_read(ibus_data);
 8000fe0:	e7ef      	b.n	8000fc2 <main+0x36>
 8000fe2:	bf00      	nop
 8000fe4:	2000011c 	.word	0x2000011c
 8000fe8:	200001c8 	.word	0x200001c8
 8000fec:	20000170 	.word	0x20000170
 8000ff0:	20000048 	.word	0x20000048
 8000ff4:	20000000 	.word	0x20000000

08000ff8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b094      	sub	sp, #80	; 0x50
 8000ffc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ffe:	f107 0320 	add.w	r3, r7, #32
 8001002:	2230      	movs	r2, #48	; 0x30
 8001004:	2100      	movs	r1, #0
 8001006:	4618      	mov	r0, r3
 8001008:	f005 ff08 	bl	8006e1c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800100c:	f107 030c 	add.w	r3, r7, #12
 8001010:	2200      	movs	r2, #0
 8001012:	601a      	str	r2, [r3, #0]
 8001014:	605a      	str	r2, [r3, #4]
 8001016:	609a      	str	r2, [r3, #8]
 8001018:	60da      	str	r2, [r3, #12]
 800101a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800101c:	2300      	movs	r3, #0
 800101e:	60bb      	str	r3, [r7, #8]
 8001020:	4b29      	ldr	r3, [pc, #164]	; (80010c8 <SystemClock_Config+0xd0>)
 8001022:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001024:	4a28      	ldr	r2, [pc, #160]	; (80010c8 <SystemClock_Config+0xd0>)
 8001026:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800102a:	6413      	str	r3, [r2, #64]	; 0x40
 800102c:	4b26      	ldr	r3, [pc, #152]	; (80010c8 <SystemClock_Config+0xd0>)
 800102e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001030:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001034:	60bb      	str	r3, [r7, #8]
 8001036:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001038:	2300      	movs	r3, #0
 800103a:	607b      	str	r3, [r7, #4]
 800103c:	4b23      	ldr	r3, [pc, #140]	; (80010cc <SystemClock_Config+0xd4>)
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001044:	4a21      	ldr	r2, [pc, #132]	; (80010cc <SystemClock_Config+0xd4>)
 8001046:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800104a:	6013      	str	r3, [r2, #0]
 800104c:	4b1f      	ldr	r3, [pc, #124]	; (80010cc <SystemClock_Config+0xd4>)
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001054:	607b      	str	r3, [r7, #4]
 8001056:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001058:	2301      	movs	r3, #1
 800105a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800105c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001060:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001062:	2302      	movs	r3, #2
 8001064:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001066:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800106a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 800106c:	2319      	movs	r3, #25
 800106e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001070:	23a8      	movs	r3, #168	; 0xa8
 8001072:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001074:	2302      	movs	r3, #2
 8001076:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001078:	2304      	movs	r3, #4
 800107a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800107c:	f107 0320 	add.w	r3, r7, #32
 8001080:	4618      	mov	r0, r3
 8001082:	f002 fae3 	bl	800364c <HAL_RCC_OscConfig>
 8001086:	4603      	mov	r3, r0
 8001088:	2b00      	cmp	r3, #0
 800108a:	d001      	beq.n	8001090 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800108c:	f000 f830 	bl	80010f0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001090:	230f      	movs	r3, #15
 8001092:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001094:	2302      	movs	r3, #2
 8001096:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001098:	2300      	movs	r3, #0
 800109a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800109c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010a0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80010a2:	2300      	movs	r3, #0
 80010a4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80010a6:	f107 030c 	add.w	r3, r7, #12
 80010aa:	2102      	movs	r1, #2
 80010ac:	4618      	mov	r0, r3
 80010ae:	f002 fd45 	bl	8003b3c <HAL_RCC_ClockConfig>
 80010b2:	4603      	mov	r3, r0
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d001      	beq.n	80010bc <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80010b8:	f000 f81a 	bl	80010f0 <Error_Handler>
  }

  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 80010bc:	f002 fe24 	bl	8003d08 <HAL_RCC_EnableCSS>
}
 80010c0:	bf00      	nop
 80010c2:	3750      	adds	r7, #80	; 0x50
 80010c4:	46bd      	mov	sp, r7
 80010c6:	bd80      	pop	{r7, pc}
 80010c8:	40023800 	.word	0x40023800
 80010cc:	40007000 	.word	0x40007000

080010d0 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b082      	sub	sp, #8
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
	if(huart == IBUS_UART)
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	4a04      	ldr	r2, [pc, #16]	; (80010ec <HAL_UART_RxCpltCallback+0x1c>)
 80010dc:	4293      	cmp	r3, r2
 80010de:	d101      	bne.n	80010e4 <HAL_UART_RxCpltCallback+0x14>
		ibus_reset_failsafe();
 80010e0:	f005 fd2a 	bl	8006b38 <ibus_reset_failsafe>
}
 80010e4:	bf00      	nop
 80010e6:	3708      	adds	r7, #8
 80010e8:	46bd      	mov	sp, r7
 80010ea:	bd80      	pop	{r7, pc}
 80010ec:	20000274 	.word	0x20000274

080010f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010f0:	b480      	push	{r7}
 80010f2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80010f4:	b672      	cpsid	i
}
 80010f6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80010f8:	e7fe      	b.n	80010f8 <Error_Handler+0x8>
	...

080010fc <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8001100:	4b17      	ldr	r3, [pc, #92]	; (8001160 <MX_SPI2_Init+0x64>)
 8001102:	4a18      	ldr	r2, [pc, #96]	; (8001164 <MX_SPI2_Init+0x68>)
 8001104:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001106:	4b16      	ldr	r3, [pc, #88]	; (8001160 <MX_SPI2_Init+0x64>)
 8001108:	f44f 7282 	mov.w	r2, #260	; 0x104
 800110c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800110e:	4b14      	ldr	r3, [pc, #80]	; (8001160 <MX_SPI2_Init+0x64>)
 8001110:	2200      	movs	r2, #0
 8001112:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001114:	4b12      	ldr	r3, [pc, #72]	; (8001160 <MX_SPI2_Init+0x64>)
 8001116:	2200      	movs	r2, #0
 8001118:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 800111a:	4b11      	ldr	r3, [pc, #68]	; (8001160 <MX_SPI2_Init+0x64>)
 800111c:	2202      	movs	r2, #2
 800111e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8001120:	4b0f      	ldr	r3, [pc, #60]	; (8001160 <MX_SPI2_Init+0x64>)
 8001122:	2201      	movs	r2, #1
 8001124:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001126:	4b0e      	ldr	r3, [pc, #56]	; (8001160 <MX_SPI2_Init+0x64>)
 8001128:	f44f 7200 	mov.w	r2, #512	; 0x200
 800112c:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800112e:	4b0c      	ldr	r3, [pc, #48]	; (8001160 <MX_SPI2_Init+0x64>)
 8001130:	2218      	movs	r2, #24
 8001132:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001134:	4b0a      	ldr	r3, [pc, #40]	; (8001160 <MX_SPI2_Init+0x64>)
 8001136:	2200      	movs	r2, #0
 8001138:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800113a:	4b09      	ldr	r3, [pc, #36]	; (8001160 <MX_SPI2_Init+0x64>)
 800113c:	2200      	movs	r2, #0
 800113e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001140:	4b07      	ldr	r3, [pc, #28]	; (8001160 <MX_SPI2_Init+0x64>)
 8001142:	2200      	movs	r2, #0
 8001144:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001146:	4b06      	ldr	r3, [pc, #24]	; (8001160 <MX_SPI2_Init+0x64>)
 8001148:	220a      	movs	r2, #10
 800114a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800114c:	4804      	ldr	r0, [pc, #16]	; (8001160 <MX_SPI2_Init+0x64>)
 800114e:	f002 fefc 	bl	8003f4a <HAL_SPI_Init>
 8001152:	4603      	mov	r3, r0
 8001154:	2b00      	cmp	r3, #0
 8001156:	d001      	beq.n	800115c <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001158:	f7ff ffca 	bl	80010f0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800115c:	bf00      	nop
 800115e:	bd80      	pop	{r7, pc}
 8001160:	200001d4 	.word	0x200001d4
 8001164:	40003800 	.word	0x40003800

08001168 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b08a      	sub	sp, #40	; 0x28
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001170:	f107 0314 	add.w	r3, r7, #20
 8001174:	2200      	movs	r2, #0
 8001176:	601a      	str	r2, [r3, #0]
 8001178:	605a      	str	r2, [r3, #4]
 800117a:	609a      	str	r2, [r3, #8]
 800117c:	60da      	str	r2, [r3, #12]
 800117e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	4a19      	ldr	r2, [pc, #100]	; (80011ec <HAL_SPI_MspInit+0x84>)
 8001186:	4293      	cmp	r3, r2
 8001188:	d12c      	bne.n	80011e4 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800118a:	2300      	movs	r3, #0
 800118c:	613b      	str	r3, [r7, #16]
 800118e:	4b18      	ldr	r3, [pc, #96]	; (80011f0 <HAL_SPI_MspInit+0x88>)
 8001190:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001192:	4a17      	ldr	r2, [pc, #92]	; (80011f0 <HAL_SPI_MspInit+0x88>)
 8001194:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001198:	6413      	str	r3, [r2, #64]	; 0x40
 800119a:	4b15      	ldr	r3, [pc, #84]	; (80011f0 <HAL_SPI_MspInit+0x88>)
 800119c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800119e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011a2:	613b      	str	r3, [r7, #16]
 80011a4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011a6:	2300      	movs	r3, #0
 80011a8:	60fb      	str	r3, [r7, #12]
 80011aa:	4b11      	ldr	r3, [pc, #68]	; (80011f0 <HAL_SPI_MspInit+0x88>)
 80011ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ae:	4a10      	ldr	r2, [pc, #64]	; (80011f0 <HAL_SPI_MspInit+0x88>)
 80011b0:	f043 0302 	orr.w	r3, r3, #2
 80011b4:	6313      	str	r3, [r2, #48]	; 0x30
 80011b6:	4b0e      	ldr	r3, [pc, #56]	; (80011f0 <HAL_SPI_MspInit+0x88>)
 80011b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ba:	f003 0302 	and.w	r3, r3, #2
 80011be:	60fb      	str	r3, [r7, #12]
 80011c0:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB10     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_14|GPIO_PIN_15;
 80011c2:	f44f 4344 	mov.w	r3, #50176	; 0xc400
 80011c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011c8:	2302      	movs	r3, #2
 80011ca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011cc:	2300      	movs	r3, #0
 80011ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011d0:	2303      	movs	r3, #3
 80011d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80011d4:	2305      	movs	r3, #5
 80011d6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011d8:	f107 0314 	add.w	r3, r7, #20
 80011dc:	4619      	mov	r1, r3
 80011de:	4805      	ldr	r0, [pc, #20]	; (80011f4 <HAL_SPI_MspInit+0x8c>)
 80011e0:	f001 f8d6 	bl	8002390 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 80011e4:	bf00      	nop
 80011e6:	3728      	adds	r7, #40	; 0x28
 80011e8:	46bd      	mov	sp, r7
 80011ea:	bd80      	pop	{r7, pc}
 80011ec:	40003800 	.word	0x40003800
 80011f0:	40023800 	.word	0x40023800
 80011f4:	40020400 	.word	0x40020400

080011f8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011f8:	b480      	push	{r7}
 80011fa:	b083      	sub	sp, #12
 80011fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011fe:	2300      	movs	r3, #0
 8001200:	607b      	str	r3, [r7, #4]
 8001202:	4b10      	ldr	r3, [pc, #64]	; (8001244 <HAL_MspInit+0x4c>)
 8001204:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001206:	4a0f      	ldr	r2, [pc, #60]	; (8001244 <HAL_MspInit+0x4c>)
 8001208:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800120c:	6453      	str	r3, [r2, #68]	; 0x44
 800120e:	4b0d      	ldr	r3, [pc, #52]	; (8001244 <HAL_MspInit+0x4c>)
 8001210:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001212:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001216:	607b      	str	r3, [r7, #4]
 8001218:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800121a:	2300      	movs	r3, #0
 800121c:	603b      	str	r3, [r7, #0]
 800121e:	4b09      	ldr	r3, [pc, #36]	; (8001244 <HAL_MspInit+0x4c>)
 8001220:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001222:	4a08      	ldr	r2, [pc, #32]	; (8001244 <HAL_MspInit+0x4c>)
 8001224:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001228:	6413      	str	r3, [r2, #64]	; 0x40
 800122a:	4b06      	ldr	r3, [pc, #24]	; (8001244 <HAL_MspInit+0x4c>)
 800122c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800122e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001232:	603b      	str	r3, [r7, #0]
 8001234:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001236:	bf00      	nop
 8001238:	370c      	adds	r7, #12
 800123a:	46bd      	mov	sp, r7
 800123c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001240:	4770      	bx	lr
 8001242:	bf00      	nop
 8001244:	40023800 	.word	0x40023800

08001248 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 800124c:	f002 fe62 	bl	8003f14 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001250:	e7fe      	b.n	8001250 <NMI_Handler+0x8>

08001252 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001252:	b480      	push	{r7}
 8001254:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001256:	e7fe      	b.n	8001256 <HardFault_Handler+0x4>

08001258 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001258:	b480      	push	{r7}
 800125a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800125c:	e7fe      	b.n	800125c <MemManage_Handler+0x4>

0800125e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800125e:	b480      	push	{r7}
 8001260:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001262:	e7fe      	b.n	8001262 <BusFault_Handler+0x4>

08001264 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001264:	b480      	push	{r7}
 8001266:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001268:	e7fe      	b.n	8001268 <UsageFault_Handler+0x4>

0800126a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800126a:	b480      	push	{r7}
 800126c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800126e:	bf00      	nop
 8001270:	46bd      	mov	sp, r7
 8001272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001276:	4770      	bx	lr

08001278 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001278:	b480      	push	{r7}
 800127a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800127c:	bf00      	nop
 800127e:	46bd      	mov	sp, r7
 8001280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001284:	4770      	bx	lr

08001286 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001286:	b480      	push	{r7}
 8001288:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800128a:	bf00      	nop
 800128c:	46bd      	mov	sp, r7
 800128e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001292:	4770      	bx	lr

08001294 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001298:	f000 fb22 	bl	80018e0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800129c:	bf00      	nop
 800129e:	bd80      	pop	{r7, pc}

080012a0 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80012a4:	4802      	ldr	r0, [pc, #8]	; (80012b0 <DMA1_Stream5_IRQHandler+0x10>)
 80012a6:	f000 fe09 	bl	8001ebc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80012aa:	bf00      	nop
 80012ac:	bd80      	pop	{r7, pc}
 80012ae:	bf00      	nop
 80012b0:	200003bc 	.word	0x200003bc

080012b4 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80012b8:	4802      	ldr	r0, [pc, #8]	; (80012c4 <TIM3_IRQHandler+0x10>)
 80012ba:	f003 f97d 	bl	80045b8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80012be:	bf00      	nop
 80012c0:	bd80      	pop	{r7, pc}
 80012c2:	bf00      	nop
 80012c4:	2000022c 	.word	0x2000022c

080012c8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80012cc:	4802      	ldr	r0, [pc, #8]	; (80012d8 <USART1_IRQHandler+0x10>)
 80012ce:	f003 ffe9 	bl	80052a4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80012d2:	bf00      	nop
 80012d4:	bd80      	pop	{r7, pc}
 80012d6:	bf00      	nop
 80012d8:	20000274 	.word	0x20000274

080012dc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80012e0:	4802      	ldr	r0, [pc, #8]	; (80012ec <USART2_IRQHandler+0x10>)
 80012e2:	f003 ffdf 	bl	80052a4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80012e6:	bf00      	nop
 80012e8:	bd80      	pop	{r7, pc}
 80012ea:	bf00      	nop
 80012ec:	200002e8 	.word	0x200002e8

080012f0 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80012f4:	4802      	ldr	r0, [pc, #8]	; (8001300 <DMA2_Stream2_IRQHandler+0x10>)
 80012f6:	f000 fde1 	bl	8001ebc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 80012fa:	bf00      	nop
 80012fc:	bd80      	pop	{r7, pc}
 80012fe:	bf00      	nop
 8001300:	2000035c 	.word	0x2000035c

08001304 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001304:	b480      	push	{r7}
 8001306:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001308:	4b06      	ldr	r3, [pc, #24]	; (8001324 <SystemInit+0x20>)
 800130a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800130e:	4a05      	ldr	r2, [pc, #20]	; (8001324 <SystemInit+0x20>)
 8001310:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001314:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001318:	bf00      	nop
 800131a:	46bd      	mov	sp, r7
 800131c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001320:	4770      	bx	lr
 8001322:	bf00      	nop
 8001324:	e000ed00 	.word	0xe000ed00

08001328 <MX_TIM3_Init>:

TIM_HandleTypeDef htim3;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b08e      	sub	sp, #56	; 0x38
 800132c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800132e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001332:	2200      	movs	r2, #0
 8001334:	601a      	str	r2, [r3, #0]
 8001336:	605a      	str	r2, [r3, #4]
 8001338:	609a      	str	r2, [r3, #8]
 800133a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800133c:	f107 0320 	add.w	r3, r7, #32
 8001340:	2200      	movs	r2, #0
 8001342:	601a      	str	r2, [r3, #0]
 8001344:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001346:	1d3b      	adds	r3, r7, #4
 8001348:	2200      	movs	r2, #0
 800134a:	601a      	str	r2, [r3, #0]
 800134c:	605a      	str	r2, [r3, #4]
 800134e:	609a      	str	r2, [r3, #8]
 8001350:	60da      	str	r2, [r3, #12]
 8001352:	611a      	str	r2, [r3, #16]
 8001354:	615a      	str	r2, [r3, #20]
 8001356:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001358:	4b3d      	ldr	r3, [pc, #244]	; (8001450 <MX_TIM3_Init+0x128>)
 800135a:	4a3e      	ldr	r2, [pc, #248]	; (8001454 <MX_TIM3_Init+0x12c>)
 800135c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 84;
 800135e:	4b3c      	ldr	r3, [pc, #240]	; (8001450 <MX_TIM3_Init+0x128>)
 8001360:	2254      	movs	r2, #84	; 0x54
 8001362:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001364:	4b3a      	ldr	r3, [pc, #232]	; (8001450 <MX_TIM3_Init+0x128>)
 8001366:	2200      	movs	r2, #0
 8001368:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 20000;
 800136a:	4b39      	ldr	r3, [pc, #228]	; (8001450 <MX_TIM3_Init+0x128>)
 800136c:	f644 6220 	movw	r2, #20000	; 0x4e20
 8001370:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001372:	4b37      	ldr	r3, [pc, #220]	; (8001450 <MX_TIM3_Init+0x128>)
 8001374:	2200      	movs	r2, #0
 8001376:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001378:	4b35      	ldr	r3, [pc, #212]	; (8001450 <MX_TIM3_Init+0x128>)
 800137a:	2280      	movs	r2, #128	; 0x80
 800137c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800137e:	4834      	ldr	r0, [pc, #208]	; (8001450 <MX_TIM3_Init+0x128>)
 8001380:	f003 f872 	bl	8004468 <HAL_TIM_Base_Init>
 8001384:	4603      	mov	r3, r0
 8001386:	2b00      	cmp	r3, #0
 8001388:	d001      	beq.n	800138e <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 800138a:	f7ff feb1 	bl	80010f0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800138e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001392:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001394:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001398:	4619      	mov	r1, r3
 800139a:	482d      	ldr	r0, [pc, #180]	; (8001450 <MX_TIM3_Init+0x128>)
 800139c:	f003 fad6 	bl	800494c <HAL_TIM_ConfigClockSource>
 80013a0:	4603      	mov	r3, r0
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d001      	beq.n	80013aa <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 80013a6:	f7ff fea3 	bl	80010f0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80013aa:	4829      	ldr	r0, [pc, #164]	; (8001450 <MX_TIM3_Init+0x128>)
 80013ac:	f003 f8ab 	bl	8004506 <HAL_TIM_PWM_Init>
 80013b0:	4603      	mov	r3, r0
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d001      	beq.n	80013ba <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 80013b6:	f7ff fe9b 	bl	80010f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013ba:	2300      	movs	r3, #0
 80013bc:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013be:	2300      	movs	r3, #0
 80013c0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80013c2:	f107 0320 	add.w	r3, r7, #32
 80013c6:	4619      	mov	r1, r3
 80013c8:	4821      	ldr	r0, [pc, #132]	; (8001450 <MX_TIM3_Init+0x128>)
 80013ca:	f003 fe5f 	bl	800508c <HAL_TIMEx_MasterConfigSynchronization>
 80013ce:	4603      	mov	r3, r0
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d001      	beq.n	80013d8 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 80013d4:	f7ff fe8c 	bl	80010f0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80013d8:	2360      	movs	r3, #96	; 0x60
 80013da:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80013dc:	2300      	movs	r3, #0
 80013de:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80013e0:	2300      	movs	r3, #0
 80013e2:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80013e4:	2300      	movs	r3, #0
 80013e6:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80013e8:	1d3b      	adds	r3, r7, #4
 80013ea:	2200      	movs	r2, #0
 80013ec:	4619      	mov	r1, r3
 80013ee:	4818      	ldr	r0, [pc, #96]	; (8001450 <MX_TIM3_Init+0x128>)
 80013f0:	f003 f9ea 	bl	80047c8 <HAL_TIM_PWM_ConfigChannel>
 80013f4:	4603      	mov	r3, r0
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d001      	beq.n	80013fe <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 80013fa:	f7ff fe79 	bl	80010f0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80013fe:	1d3b      	adds	r3, r7, #4
 8001400:	2204      	movs	r2, #4
 8001402:	4619      	mov	r1, r3
 8001404:	4812      	ldr	r0, [pc, #72]	; (8001450 <MX_TIM3_Init+0x128>)
 8001406:	f003 f9df 	bl	80047c8 <HAL_TIM_PWM_ConfigChannel>
 800140a:	4603      	mov	r3, r0
 800140c:	2b00      	cmp	r3, #0
 800140e:	d001      	beq.n	8001414 <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 8001410:	f7ff fe6e 	bl	80010f0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001414:	1d3b      	adds	r3, r7, #4
 8001416:	2208      	movs	r2, #8
 8001418:	4619      	mov	r1, r3
 800141a:	480d      	ldr	r0, [pc, #52]	; (8001450 <MX_TIM3_Init+0x128>)
 800141c:	f003 f9d4 	bl	80047c8 <HAL_TIM_PWM_ConfigChannel>
 8001420:	4603      	mov	r3, r0
 8001422:	2b00      	cmp	r3, #0
 8001424:	d001      	beq.n	800142a <MX_TIM3_Init+0x102>
  {
    Error_Handler();
 8001426:	f7ff fe63 	bl	80010f0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800142a:	1d3b      	adds	r3, r7, #4
 800142c:	220c      	movs	r2, #12
 800142e:	4619      	mov	r1, r3
 8001430:	4807      	ldr	r0, [pc, #28]	; (8001450 <MX_TIM3_Init+0x128>)
 8001432:	f003 f9c9 	bl	80047c8 <HAL_TIM_PWM_ConfigChannel>
 8001436:	4603      	mov	r3, r0
 8001438:	2b00      	cmp	r3, #0
 800143a:	d001      	beq.n	8001440 <MX_TIM3_Init+0x118>
  {
    Error_Handler();
 800143c:	f7ff fe58 	bl	80010f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001440:	4803      	ldr	r0, [pc, #12]	; (8001450 <MX_TIM3_Init+0x128>)
 8001442:	f000 f831 	bl	80014a8 <HAL_TIM_MspPostInit>

}
 8001446:	bf00      	nop
 8001448:	3738      	adds	r7, #56	; 0x38
 800144a:	46bd      	mov	sp, r7
 800144c:	bd80      	pop	{r7, pc}
 800144e:	bf00      	nop
 8001450:	2000022c 	.word	0x2000022c
 8001454:	40000400 	.word	0x40000400

08001458 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b084      	sub	sp, #16
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	4a0e      	ldr	r2, [pc, #56]	; (80014a0 <HAL_TIM_Base_MspInit+0x48>)
 8001466:	4293      	cmp	r3, r2
 8001468:	d115      	bne.n	8001496 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800146a:	2300      	movs	r3, #0
 800146c:	60fb      	str	r3, [r7, #12]
 800146e:	4b0d      	ldr	r3, [pc, #52]	; (80014a4 <HAL_TIM_Base_MspInit+0x4c>)
 8001470:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001472:	4a0c      	ldr	r2, [pc, #48]	; (80014a4 <HAL_TIM_Base_MspInit+0x4c>)
 8001474:	f043 0302 	orr.w	r3, r3, #2
 8001478:	6413      	str	r3, [r2, #64]	; 0x40
 800147a:	4b0a      	ldr	r3, [pc, #40]	; (80014a4 <HAL_TIM_Base_MspInit+0x4c>)
 800147c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800147e:	f003 0302 	and.w	r3, r3, #2
 8001482:	60fb      	str	r3, [r7, #12]
 8001484:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001486:	2200      	movs	r2, #0
 8001488:	2100      	movs	r1, #0
 800148a:	201d      	movs	r0, #29
 800148c:	f000 fb47 	bl	8001b1e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001490:	201d      	movs	r0, #29
 8001492:	f000 fb60 	bl	8001b56 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8001496:	bf00      	nop
 8001498:	3710      	adds	r7, #16
 800149a:	46bd      	mov	sp, r7
 800149c:	bd80      	pop	{r7, pc}
 800149e:	bf00      	nop
 80014a0:	40000400 	.word	0x40000400
 80014a4:	40023800 	.word	0x40023800

080014a8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b08a      	sub	sp, #40	; 0x28
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014b0:	f107 0314 	add.w	r3, r7, #20
 80014b4:	2200      	movs	r2, #0
 80014b6:	601a      	str	r2, [r3, #0]
 80014b8:	605a      	str	r2, [r3, #4]
 80014ba:	609a      	str	r2, [r3, #8]
 80014bc:	60da      	str	r2, [r3, #12]
 80014be:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	4a21      	ldr	r2, [pc, #132]	; (800154c <HAL_TIM_MspPostInit+0xa4>)
 80014c6:	4293      	cmp	r3, r2
 80014c8:	d13b      	bne.n	8001542 <HAL_TIM_MspPostInit+0x9a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014ca:	2300      	movs	r3, #0
 80014cc:	613b      	str	r3, [r7, #16]
 80014ce:	4b20      	ldr	r3, [pc, #128]	; (8001550 <HAL_TIM_MspPostInit+0xa8>)
 80014d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014d2:	4a1f      	ldr	r2, [pc, #124]	; (8001550 <HAL_TIM_MspPostInit+0xa8>)
 80014d4:	f043 0301 	orr.w	r3, r3, #1
 80014d8:	6313      	str	r3, [r2, #48]	; 0x30
 80014da:	4b1d      	ldr	r3, [pc, #116]	; (8001550 <HAL_TIM_MspPostInit+0xa8>)
 80014dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014de:	f003 0301 	and.w	r3, r3, #1
 80014e2:	613b      	str	r3, [r7, #16]
 80014e4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014e6:	2300      	movs	r3, #0
 80014e8:	60fb      	str	r3, [r7, #12]
 80014ea:	4b19      	ldr	r3, [pc, #100]	; (8001550 <HAL_TIM_MspPostInit+0xa8>)
 80014ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ee:	4a18      	ldr	r2, [pc, #96]	; (8001550 <HAL_TIM_MspPostInit+0xa8>)
 80014f0:	f043 0302 	orr.w	r3, r3, #2
 80014f4:	6313      	str	r3, [r2, #48]	; 0x30
 80014f6:	4b16      	ldr	r3, [pc, #88]	; (8001550 <HAL_TIM_MspPostInit+0xa8>)
 80014f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014fa:	f003 0302 	and.w	r3, r3, #2
 80014fe:	60fb      	str	r3, [r7, #12]
 8001500:	68fb      	ldr	r3, [r7, #12]
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    PB0     ------> TIM3_CH3
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001502:	23c0      	movs	r3, #192	; 0xc0
 8001504:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001506:	2302      	movs	r3, #2
 8001508:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800150a:	2300      	movs	r3, #0
 800150c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800150e:	2300      	movs	r3, #0
 8001510:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001512:	2302      	movs	r3, #2
 8001514:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001516:	f107 0314 	add.w	r3, r7, #20
 800151a:	4619      	mov	r1, r3
 800151c:	480d      	ldr	r0, [pc, #52]	; (8001554 <HAL_TIM_MspPostInit+0xac>)
 800151e:	f000 ff37 	bl	8002390 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001522:	2303      	movs	r3, #3
 8001524:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001526:	2302      	movs	r3, #2
 8001528:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800152a:	2300      	movs	r3, #0
 800152c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800152e:	2300      	movs	r3, #0
 8001530:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001532:	2302      	movs	r3, #2
 8001534:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001536:	f107 0314 	add.w	r3, r7, #20
 800153a:	4619      	mov	r1, r3
 800153c:	4806      	ldr	r0, [pc, #24]	; (8001558 <HAL_TIM_MspPostInit+0xb0>)
 800153e:	f000 ff27 	bl	8002390 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001542:	bf00      	nop
 8001544:	3728      	adds	r7, #40	; 0x28
 8001546:	46bd      	mov	sp, r7
 8001548:	bd80      	pop	{r7, pc}
 800154a:	bf00      	nop
 800154c:	40000400 	.word	0x40000400
 8001550:	40023800 	.word	0x40023800
 8001554:	40020000 	.word	0x40020000
 8001558:	40020400 	.word	0x40020400

0800155c <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart2_rx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001560:	4b11      	ldr	r3, [pc, #68]	; (80015a8 <MX_USART1_UART_Init+0x4c>)
 8001562:	4a12      	ldr	r2, [pc, #72]	; (80015ac <MX_USART1_UART_Init+0x50>)
 8001564:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001566:	4b10      	ldr	r3, [pc, #64]	; (80015a8 <MX_USART1_UART_Init+0x4c>)
 8001568:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800156c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800156e:	4b0e      	ldr	r3, [pc, #56]	; (80015a8 <MX_USART1_UART_Init+0x4c>)
 8001570:	2200      	movs	r2, #0
 8001572:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001574:	4b0c      	ldr	r3, [pc, #48]	; (80015a8 <MX_USART1_UART_Init+0x4c>)
 8001576:	2200      	movs	r2, #0
 8001578:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800157a:	4b0b      	ldr	r3, [pc, #44]	; (80015a8 <MX_USART1_UART_Init+0x4c>)
 800157c:	2200      	movs	r2, #0
 800157e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001580:	4b09      	ldr	r3, [pc, #36]	; (80015a8 <MX_USART1_UART_Init+0x4c>)
 8001582:	220c      	movs	r2, #12
 8001584:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001586:	4b08      	ldr	r3, [pc, #32]	; (80015a8 <MX_USART1_UART_Init+0x4c>)
 8001588:	2200      	movs	r2, #0
 800158a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800158c:	4b06      	ldr	r3, [pc, #24]	; (80015a8 <MX_USART1_UART_Init+0x4c>)
 800158e:	2200      	movs	r2, #0
 8001590:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001592:	4805      	ldr	r0, [pc, #20]	; (80015a8 <MX_USART1_UART_Init+0x4c>)
 8001594:	f003 fdfc 	bl	8005190 <HAL_UART_Init>
 8001598:	4603      	mov	r3, r0
 800159a:	2b00      	cmp	r3, #0
 800159c:	d001      	beq.n	80015a2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800159e:	f7ff fda7 	bl	80010f0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80015a2:	bf00      	nop
 80015a4:	bd80      	pop	{r7, pc}
 80015a6:	bf00      	nop
 80015a8:	20000274 	.word	0x20000274
 80015ac:	40011000 	.word	0x40011000

080015b0 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80015b4:	4b11      	ldr	r3, [pc, #68]	; (80015fc <MX_USART2_UART_Init+0x4c>)
 80015b6:	4a12      	ldr	r2, [pc, #72]	; (8001600 <MX_USART2_UART_Init+0x50>)
 80015b8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80015ba:	4b10      	ldr	r3, [pc, #64]	; (80015fc <MX_USART2_UART_Init+0x4c>)
 80015bc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80015c0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80015c2:	4b0e      	ldr	r3, [pc, #56]	; (80015fc <MX_USART2_UART_Init+0x4c>)
 80015c4:	2200      	movs	r2, #0
 80015c6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80015c8:	4b0c      	ldr	r3, [pc, #48]	; (80015fc <MX_USART2_UART_Init+0x4c>)
 80015ca:	2200      	movs	r2, #0
 80015cc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80015ce:	4b0b      	ldr	r3, [pc, #44]	; (80015fc <MX_USART2_UART_Init+0x4c>)
 80015d0:	2200      	movs	r2, #0
 80015d2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80015d4:	4b09      	ldr	r3, [pc, #36]	; (80015fc <MX_USART2_UART_Init+0x4c>)
 80015d6:	220c      	movs	r2, #12
 80015d8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015da:	4b08      	ldr	r3, [pc, #32]	; (80015fc <MX_USART2_UART_Init+0x4c>)
 80015dc:	2200      	movs	r2, #0
 80015de:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80015e0:	4b06      	ldr	r3, [pc, #24]	; (80015fc <MX_USART2_UART_Init+0x4c>)
 80015e2:	2200      	movs	r2, #0
 80015e4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80015e6:	4805      	ldr	r0, [pc, #20]	; (80015fc <MX_USART2_UART_Init+0x4c>)
 80015e8:	f003 fdd2 	bl	8005190 <HAL_UART_Init>
 80015ec:	4603      	mov	r3, r0
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d001      	beq.n	80015f6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80015f2:	f7ff fd7d 	bl	80010f0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80015f6:	bf00      	nop
 80015f8:	bd80      	pop	{r7, pc}
 80015fa:	bf00      	nop
 80015fc:	200002e8 	.word	0x200002e8
 8001600:	40004400 	.word	0x40004400

08001604 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b08c      	sub	sp, #48	; 0x30
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800160c:	f107 031c 	add.w	r3, r7, #28
 8001610:	2200      	movs	r2, #0
 8001612:	601a      	str	r2, [r3, #0]
 8001614:	605a      	str	r2, [r3, #4]
 8001616:	609a      	str	r2, [r3, #8]
 8001618:	60da      	str	r2, [r3, #12]
 800161a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	4a69      	ldr	r2, [pc, #420]	; (80017c8 <HAL_UART_MspInit+0x1c4>)
 8001622:	4293      	cmp	r3, r2
 8001624:	d164      	bne.n	80016f0 <HAL_UART_MspInit+0xec>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001626:	2300      	movs	r3, #0
 8001628:	61bb      	str	r3, [r7, #24]
 800162a:	4b68      	ldr	r3, [pc, #416]	; (80017cc <HAL_UART_MspInit+0x1c8>)
 800162c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800162e:	4a67      	ldr	r2, [pc, #412]	; (80017cc <HAL_UART_MspInit+0x1c8>)
 8001630:	f043 0310 	orr.w	r3, r3, #16
 8001634:	6453      	str	r3, [r2, #68]	; 0x44
 8001636:	4b65      	ldr	r3, [pc, #404]	; (80017cc <HAL_UART_MspInit+0x1c8>)
 8001638:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800163a:	f003 0310 	and.w	r3, r3, #16
 800163e:	61bb      	str	r3, [r7, #24]
 8001640:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001642:	2300      	movs	r3, #0
 8001644:	617b      	str	r3, [r7, #20]
 8001646:	4b61      	ldr	r3, [pc, #388]	; (80017cc <HAL_UART_MspInit+0x1c8>)
 8001648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800164a:	4a60      	ldr	r2, [pc, #384]	; (80017cc <HAL_UART_MspInit+0x1c8>)
 800164c:	f043 0301 	orr.w	r3, r3, #1
 8001650:	6313      	str	r3, [r2, #48]	; 0x30
 8001652:	4b5e      	ldr	r3, [pc, #376]	; (80017cc <HAL_UART_MspInit+0x1c8>)
 8001654:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001656:	f003 0301 	and.w	r3, r3, #1
 800165a:	617b      	str	r3, [r7, #20]
 800165c:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800165e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001662:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001664:	2302      	movs	r3, #2
 8001666:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001668:	2300      	movs	r3, #0
 800166a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800166c:	2303      	movs	r3, #3
 800166e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001670:	2307      	movs	r3, #7
 8001672:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001674:	f107 031c 	add.w	r3, r7, #28
 8001678:	4619      	mov	r1, r3
 800167a:	4855      	ldr	r0, [pc, #340]	; (80017d0 <HAL_UART_MspInit+0x1cc>)
 800167c:	f000 fe88 	bl	8002390 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8001680:	4b54      	ldr	r3, [pc, #336]	; (80017d4 <HAL_UART_MspInit+0x1d0>)
 8001682:	4a55      	ldr	r2, [pc, #340]	; (80017d8 <HAL_UART_MspInit+0x1d4>)
 8001684:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8001686:	4b53      	ldr	r3, [pc, #332]	; (80017d4 <HAL_UART_MspInit+0x1d0>)
 8001688:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800168c:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800168e:	4b51      	ldr	r3, [pc, #324]	; (80017d4 <HAL_UART_MspInit+0x1d0>)
 8001690:	2200      	movs	r2, #0
 8001692:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001694:	4b4f      	ldr	r3, [pc, #316]	; (80017d4 <HAL_UART_MspInit+0x1d0>)
 8001696:	2200      	movs	r2, #0
 8001698:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800169a:	4b4e      	ldr	r3, [pc, #312]	; (80017d4 <HAL_UART_MspInit+0x1d0>)
 800169c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80016a0:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80016a2:	4b4c      	ldr	r3, [pc, #304]	; (80017d4 <HAL_UART_MspInit+0x1d0>)
 80016a4:	2200      	movs	r2, #0
 80016a6:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80016a8:	4b4a      	ldr	r3, [pc, #296]	; (80017d4 <HAL_UART_MspInit+0x1d0>)
 80016aa:	2200      	movs	r2, #0
 80016ac:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 80016ae:	4b49      	ldr	r3, [pc, #292]	; (80017d4 <HAL_UART_MspInit+0x1d0>)
 80016b0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80016b4:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80016b6:	4b47      	ldr	r3, [pc, #284]	; (80017d4 <HAL_UART_MspInit+0x1d0>)
 80016b8:	2200      	movs	r2, #0
 80016ba:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80016bc:	4b45      	ldr	r3, [pc, #276]	; (80017d4 <HAL_UART_MspInit+0x1d0>)
 80016be:	2200      	movs	r2, #0
 80016c0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80016c2:	4844      	ldr	r0, [pc, #272]	; (80017d4 <HAL_UART_MspInit+0x1d0>)
 80016c4:	f000 fa62 	bl	8001b8c <HAL_DMA_Init>
 80016c8:	4603      	mov	r3, r0
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d001      	beq.n	80016d2 <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 80016ce:	f7ff fd0f 	bl	80010f0 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	4a3f      	ldr	r2, [pc, #252]	; (80017d4 <HAL_UART_MspInit+0x1d0>)
 80016d6:	639a      	str	r2, [r3, #56]	; 0x38
 80016d8:	4a3e      	ldr	r2, [pc, #248]	; (80017d4 <HAL_UART_MspInit+0x1d0>)
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80016de:	2200      	movs	r2, #0
 80016e0:	2100      	movs	r1, #0
 80016e2:	2025      	movs	r0, #37	; 0x25
 80016e4:	f000 fa1b 	bl	8001b1e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80016e8:	2025      	movs	r0, #37	; 0x25
 80016ea:	f000 fa34 	bl	8001b56 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80016ee:	e067      	b.n	80017c0 <HAL_UART_MspInit+0x1bc>
  else if(uartHandle->Instance==USART2)
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	4a39      	ldr	r2, [pc, #228]	; (80017dc <HAL_UART_MspInit+0x1d8>)
 80016f6:	4293      	cmp	r3, r2
 80016f8:	d162      	bne.n	80017c0 <HAL_UART_MspInit+0x1bc>
    __HAL_RCC_USART2_CLK_ENABLE();
 80016fa:	2300      	movs	r3, #0
 80016fc:	613b      	str	r3, [r7, #16]
 80016fe:	4b33      	ldr	r3, [pc, #204]	; (80017cc <HAL_UART_MspInit+0x1c8>)
 8001700:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001702:	4a32      	ldr	r2, [pc, #200]	; (80017cc <HAL_UART_MspInit+0x1c8>)
 8001704:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001708:	6413      	str	r3, [r2, #64]	; 0x40
 800170a:	4b30      	ldr	r3, [pc, #192]	; (80017cc <HAL_UART_MspInit+0x1c8>)
 800170c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800170e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001712:	613b      	str	r3, [r7, #16]
 8001714:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001716:	2300      	movs	r3, #0
 8001718:	60fb      	str	r3, [r7, #12]
 800171a:	4b2c      	ldr	r3, [pc, #176]	; (80017cc <HAL_UART_MspInit+0x1c8>)
 800171c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800171e:	4a2b      	ldr	r2, [pc, #172]	; (80017cc <HAL_UART_MspInit+0x1c8>)
 8001720:	f043 0301 	orr.w	r3, r3, #1
 8001724:	6313      	str	r3, [r2, #48]	; 0x30
 8001726:	4b29      	ldr	r3, [pc, #164]	; (80017cc <HAL_UART_MspInit+0x1c8>)
 8001728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800172a:	f003 0301 	and.w	r3, r3, #1
 800172e:	60fb      	str	r3, [r7, #12]
 8001730:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001732:	230c      	movs	r3, #12
 8001734:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001736:	2302      	movs	r3, #2
 8001738:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800173a:	2300      	movs	r3, #0
 800173c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800173e:	2303      	movs	r3, #3
 8001740:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001742:	2307      	movs	r3, #7
 8001744:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001746:	f107 031c 	add.w	r3, r7, #28
 800174a:	4619      	mov	r1, r3
 800174c:	4820      	ldr	r0, [pc, #128]	; (80017d0 <HAL_UART_MspInit+0x1cc>)
 800174e:	f000 fe1f 	bl	8002390 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8001752:	4b23      	ldr	r3, [pc, #140]	; (80017e0 <HAL_UART_MspInit+0x1dc>)
 8001754:	4a23      	ldr	r2, [pc, #140]	; (80017e4 <HAL_UART_MspInit+0x1e0>)
 8001756:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8001758:	4b21      	ldr	r3, [pc, #132]	; (80017e0 <HAL_UART_MspInit+0x1dc>)
 800175a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800175e:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001760:	4b1f      	ldr	r3, [pc, #124]	; (80017e0 <HAL_UART_MspInit+0x1dc>)
 8001762:	2200      	movs	r2, #0
 8001764:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001766:	4b1e      	ldr	r3, [pc, #120]	; (80017e0 <HAL_UART_MspInit+0x1dc>)
 8001768:	2200      	movs	r2, #0
 800176a:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800176c:	4b1c      	ldr	r3, [pc, #112]	; (80017e0 <HAL_UART_MspInit+0x1dc>)
 800176e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001772:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001774:	4b1a      	ldr	r3, [pc, #104]	; (80017e0 <HAL_UART_MspInit+0x1dc>)
 8001776:	2200      	movs	r2, #0
 8001778:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800177a:	4b19      	ldr	r3, [pc, #100]	; (80017e0 <HAL_UART_MspInit+0x1dc>)
 800177c:	2200      	movs	r2, #0
 800177e:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8001780:	4b17      	ldr	r3, [pc, #92]	; (80017e0 <HAL_UART_MspInit+0x1dc>)
 8001782:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001786:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001788:	4b15      	ldr	r3, [pc, #84]	; (80017e0 <HAL_UART_MspInit+0x1dc>)
 800178a:	2200      	movs	r2, #0
 800178c:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800178e:	4b14      	ldr	r3, [pc, #80]	; (80017e0 <HAL_UART_MspInit+0x1dc>)
 8001790:	2200      	movs	r2, #0
 8001792:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8001794:	4812      	ldr	r0, [pc, #72]	; (80017e0 <HAL_UART_MspInit+0x1dc>)
 8001796:	f000 f9f9 	bl	8001b8c <HAL_DMA_Init>
 800179a:	4603      	mov	r3, r0
 800179c:	2b00      	cmp	r3, #0
 800179e:	d001      	beq.n	80017a4 <HAL_UART_MspInit+0x1a0>
      Error_Handler();
 80017a0:	f7ff fca6 	bl	80010f0 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	4a0e      	ldr	r2, [pc, #56]	; (80017e0 <HAL_UART_MspInit+0x1dc>)
 80017a8:	639a      	str	r2, [r3, #56]	; 0x38
 80017aa:	4a0d      	ldr	r2, [pc, #52]	; (80017e0 <HAL_UART_MspInit+0x1dc>)
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80017b0:	2200      	movs	r2, #0
 80017b2:	2100      	movs	r1, #0
 80017b4:	2026      	movs	r0, #38	; 0x26
 80017b6:	f000 f9b2 	bl	8001b1e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80017ba:	2026      	movs	r0, #38	; 0x26
 80017bc:	f000 f9cb 	bl	8001b56 <HAL_NVIC_EnableIRQ>
}
 80017c0:	bf00      	nop
 80017c2:	3730      	adds	r7, #48	; 0x30
 80017c4:	46bd      	mov	sp, r7
 80017c6:	bd80      	pop	{r7, pc}
 80017c8:	40011000 	.word	0x40011000
 80017cc:	40023800 	.word	0x40023800
 80017d0:	40020000 	.word	0x40020000
 80017d4:	2000035c 	.word	0x2000035c
 80017d8:	40026440 	.word	0x40026440
 80017dc:	40004400 	.word	0x40004400
 80017e0:	200003bc 	.word	0x200003bc
 80017e4:	40026088 	.word	0x40026088

080017e8 <Reset_Handler>:
 80017e8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001820 <LoopFillZerobss+0x12>
 80017ec:	480d      	ldr	r0, [pc, #52]	; (8001824 <LoopFillZerobss+0x16>)
 80017ee:	490e      	ldr	r1, [pc, #56]	; (8001828 <LoopFillZerobss+0x1a>)
 80017f0:	4a0e      	ldr	r2, [pc, #56]	; (800182c <LoopFillZerobss+0x1e>)
 80017f2:	2300      	movs	r3, #0
 80017f4:	e002      	b.n	80017fc <LoopCopyDataInit>

080017f6 <CopyDataInit>:
 80017f6:	58d4      	ldr	r4, [r2, r3]
 80017f8:	50c4      	str	r4, [r0, r3]
 80017fa:	3304      	adds	r3, #4

080017fc <LoopCopyDataInit>:
 80017fc:	18c4      	adds	r4, r0, r3
 80017fe:	428c      	cmp	r4, r1
 8001800:	d3f9      	bcc.n	80017f6 <CopyDataInit>
 8001802:	4a0b      	ldr	r2, [pc, #44]	; (8001830 <LoopFillZerobss+0x22>)
 8001804:	4c0b      	ldr	r4, [pc, #44]	; (8001834 <LoopFillZerobss+0x26>)
 8001806:	2300      	movs	r3, #0
 8001808:	e001      	b.n	800180e <LoopFillZerobss>

0800180a <FillZerobss>:
 800180a:	6013      	str	r3, [r2, #0]
 800180c:	3204      	adds	r2, #4

0800180e <LoopFillZerobss>:
 800180e:	42a2      	cmp	r2, r4
 8001810:	d3fb      	bcc.n	800180a <FillZerobss>
 8001812:	f7ff fd77 	bl	8001304 <SystemInit>
 8001816:	f005 fb0f 	bl	8006e38 <__libc_init_array>
 800181a:	f7ff fbb7 	bl	8000f8c <main>
 800181e:	4770      	bx	lr
 8001820:	20010000 	.word	0x20010000
 8001824:	20000000 	.word	0x20000000
 8001828:	20000100 	.word	0x20000100
 800182c:	08007630 	.word	0x08007630
 8001830:	20000100 	.word	0x20000100
 8001834:	20000580 	.word	0x20000580

08001838 <ADC_IRQHandler>:
 8001838:	e7fe      	b.n	8001838 <ADC_IRQHandler>
	...

0800183c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001840:	4b0e      	ldr	r3, [pc, #56]	; (800187c <HAL_Init+0x40>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	4a0d      	ldr	r2, [pc, #52]	; (800187c <HAL_Init+0x40>)
 8001846:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800184a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800184c:	4b0b      	ldr	r3, [pc, #44]	; (800187c <HAL_Init+0x40>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	4a0a      	ldr	r2, [pc, #40]	; (800187c <HAL_Init+0x40>)
 8001852:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001856:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001858:	4b08      	ldr	r3, [pc, #32]	; (800187c <HAL_Init+0x40>)
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	4a07      	ldr	r2, [pc, #28]	; (800187c <HAL_Init+0x40>)
 800185e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001862:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001864:	2003      	movs	r0, #3
 8001866:	f000 f94f 	bl	8001b08 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800186a:	200f      	movs	r0, #15
 800186c:	f000 f808 	bl	8001880 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001870:	f7ff fcc2 	bl	80011f8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001874:	2300      	movs	r3, #0
}
 8001876:	4618      	mov	r0, r3
 8001878:	bd80      	pop	{r7, pc}
 800187a:	bf00      	nop
 800187c:	40023c00 	.word	0x40023c00

08001880 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	b082      	sub	sp, #8
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001888:	4b12      	ldr	r3, [pc, #72]	; (80018d4 <HAL_InitTick+0x54>)
 800188a:	681a      	ldr	r2, [r3, #0]
 800188c:	4b12      	ldr	r3, [pc, #72]	; (80018d8 <HAL_InitTick+0x58>)
 800188e:	781b      	ldrb	r3, [r3, #0]
 8001890:	4619      	mov	r1, r3
 8001892:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001896:	fbb3 f3f1 	udiv	r3, r3, r1
 800189a:	fbb2 f3f3 	udiv	r3, r2, r3
 800189e:	4618      	mov	r0, r3
 80018a0:	f000 f967 	bl	8001b72 <HAL_SYSTICK_Config>
 80018a4:	4603      	mov	r3, r0
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d001      	beq.n	80018ae <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80018aa:	2301      	movs	r3, #1
 80018ac:	e00e      	b.n	80018cc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	2b0f      	cmp	r3, #15
 80018b2:	d80a      	bhi.n	80018ca <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80018b4:	2200      	movs	r2, #0
 80018b6:	6879      	ldr	r1, [r7, #4]
 80018b8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80018bc:	f000 f92f 	bl	8001b1e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80018c0:	4a06      	ldr	r2, [pc, #24]	; (80018dc <HAL_InitTick+0x5c>)
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80018c6:	2300      	movs	r3, #0
 80018c8:	e000      	b.n	80018cc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80018ca:	2301      	movs	r3, #1
}
 80018cc:	4618      	mov	r0, r3
 80018ce:	3708      	adds	r7, #8
 80018d0:	46bd      	mov	sp, r7
 80018d2:	bd80      	pop	{r7, pc}
 80018d4:	20000090 	.word	0x20000090
 80018d8:	20000098 	.word	0x20000098
 80018dc:	20000094 	.word	0x20000094

080018e0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018e0:	b480      	push	{r7}
 80018e2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80018e4:	4b06      	ldr	r3, [pc, #24]	; (8001900 <HAL_IncTick+0x20>)
 80018e6:	781b      	ldrb	r3, [r3, #0]
 80018e8:	461a      	mov	r2, r3
 80018ea:	4b06      	ldr	r3, [pc, #24]	; (8001904 <HAL_IncTick+0x24>)
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	4413      	add	r3, r2
 80018f0:	4a04      	ldr	r2, [pc, #16]	; (8001904 <HAL_IncTick+0x24>)
 80018f2:	6013      	str	r3, [r2, #0]
}
 80018f4:	bf00      	nop
 80018f6:	46bd      	mov	sp, r7
 80018f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fc:	4770      	bx	lr
 80018fe:	bf00      	nop
 8001900:	20000098 	.word	0x20000098
 8001904:	2000041c 	.word	0x2000041c

08001908 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001908:	b480      	push	{r7}
 800190a:	af00      	add	r7, sp, #0
  return uwTick;
 800190c:	4b03      	ldr	r3, [pc, #12]	; (800191c <HAL_GetTick+0x14>)
 800190e:	681b      	ldr	r3, [r3, #0]
}
 8001910:	4618      	mov	r0, r3
 8001912:	46bd      	mov	sp, r7
 8001914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001918:	4770      	bx	lr
 800191a:	bf00      	nop
 800191c:	2000041c 	.word	0x2000041c

08001920 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b084      	sub	sp, #16
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001928:	f7ff ffee 	bl	8001908 <HAL_GetTick>
 800192c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001938:	d005      	beq.n	8001946 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800193a:	4b0a      	ldr	r3, [pc, #40]	; (8001964 <HAL_Delay+0x44>)
 800193c:	781b      	ldrb	r3, [r3, #0]
 800193e:	461a      	mov	r2, r3
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	4413      	add	r3, r2
 8001944:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001946:	bf00      	nop
 8001948:	f7ff ffde 	bl	8001908 <HAL_GetTick>
 800194c:	4602      	mov	r2, r0
 800194e:	68bb      	ldr	r3, [r7, #8]
 8001950:	1ad3      	subs	r3, r2, r3
 8001952:	68fa      	ldr	r2, [r7, #12]
 8001954:	429a      	cmp	r2, r3
 8001956:	d8f7      	bhi.n	8001948 <HAL_Delay+0x28>
  {
  }
}
 8001958:	bf00      	nop
 800195a:	bf00      	nop
 800195c:	3710      	adds	r7, #16
 800195e:	46bd      	mov	sp, r7
 8001960:	bd80      	pop	{r7, pc}
 8001962:	bf00      	nop
 8001964:	20000098 	.word	0x20000098

08001968 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001968:	b480      	push	{r7}
 800196a:	b085      	sub	sp, #20
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	f003 0307 	and.w	r3, r3, #7
 8001976:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001978:	4b0c      	ldr	r3, [pc, #48]	; (80019ac <__NVIC_SetPriorityGrouping+0x44>)
 800197a:	68db      	ldr	r3, [r3, #12]
 800197c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800197e:	68ba      	ldr	r2, [r7, #8]
 8001980:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001984:	4013      	ands	r3, r2
 8001986:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800198c:	68bb      	ldr	r3, [r7, #8]
 800198e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001990:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001994:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001998:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800199a:	4a04      	ldr	r2, [pc, #16]	; (80019ac <__NVIC_SetPriorityGrouping+0x44>)
 800199c:	68bb      	ldr	r3, [r7, #8]
 800199e:	60d3      	str	r3, [r2, #12]
}
 80019a0:	bf00      	nop
 80019a2:	3714      	adds	r7, #20
 80019a4:	46bd      	mov	sp, r7
 80019a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019aa:	4770      	bx	lr
 80019ac:	e000ed00 	.word	0xe000ed00

080019b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80019b0:	b480      	push	{r7}
 80019b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80019b4:	4b04      	ldr	r3, [pc, #16]	; (80019c8 <__NVIC_GetPriorityGrouping+0x18>)
 80019b6:	68db      	ldr	r3, [r3, #12]
 80019b8:	0a1b      	lsrs	r3, r3, #8
 80019ba:	f003 0307 	and.w	r3, r3, #7
}
 80019be:	4618      	mov	r0, r3
 80019c0:	46bd      	mov	sp, r7
 80019c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c6:	4770      	bx	lr
 80019c8:	e000ed00 	.word	0xe000ed00

080019cc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019cc:	b480      	push	{r7}
 80019ce:	b083      	sub	sp, #12
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	4603      	mov	r3, r0
 80019d4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019da:	2b00      	cmp	r3, #0
 80019dc:	db0b      	blt.n	80019f6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80019de:	79fb      	ldrb	r3, [r7, #7]
 80019e0:	f003 021f 	and.w	r2, r3, #31
 80019e4:	4907      	ldr	r1, [pc, #28]	; (8001a04 <__NVIC_EnableIRQ+0x38>)
 80019e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019ea:	095b      	lsrs	r3, r3, #5
 80019ec:	2001      	movs	r0, #1
 80019ee:	fa00 f202 	lsl.w	r2, r0, r2
 80019f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80019f6:	bf00      	nop
 80019f8:	370c      	adds	r7, #12
 80019fa:	46bd      	mov	sp, r7
 80019fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a00:	4770      	bx	lr
 8001a02:	bf00      	nop
 8001a04:	e000e100 	.word	0xe000e100

08001a08 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a08:	b480      	push	{r7}
 8001a0a:	b083      	sub	sp, #12
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	4603      	mov	r3, r0
 8001a10:	6039      	str	r1, [r7, #0]
 8001a12:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	db0a      	blt.n	8001a32 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a1c:	683b      	ldr	r3, [r7, #0]
 8001a1e:	b2da      	uxtb	r2, r3
 8001a20:	490c      	ldr	r1, [pc, #48]	; (8001a54 <__NVIC_SetPriority+0x4c>)
 8001a22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a26:	0112      	lsls	r2, r2, #4
 8001a28:	b2d2      	uxtb	r2, r2
 8001a2a:	440b      	add	r3, r1
 8001a2c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a30:	e00a      	b.n	8001a48 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a32:	683b      	ldr	r3, [r7, #0]
 8001a34:	b2da      	uxtb	r2, r3
 8001a36:	4908      	ldr	r1, [pc, #32]	; (8001a58 <__NVIC_SetPriority+0x50>)
 8001a38:	79fb      	ldrb	r3, [r7, #7]
 8001a3a:	f003 030f 	and.w	r3, r3, #15
 8001a3e:	3b04      	subs	r3, #4
 8001a40:	0112      	lsls	r2, r2, #4
 8001a42:	b2d2      	uxtb	r2, r2
 8001a44:	440b      	add	r3, r1
 8001a46:	761a      	strb	r2, [r3, #24]
}
 8001a48:	bf00      	nop
 8001a4a:	370c      	adds	r7, #12
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a52:	4770      	bx	lr
 8001a54:	e000e100 	.word	0xe000e100
 8001a58:	e000ed00 	.word	0xe000ed00

08001a5c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	b089      	sub	sp, #36	; 0x24
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	60f8      	str	r0, [r7, #12]
 8001a64:	60b9      	str	r1, [r7, #8]
 8001a66:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	f003 0307 	and.w	r3, r3, #7
 8001a6e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a70:	69fb      	ldr	r3, [r7, #28]
 8001a72:	f1c3 0307 	rsb	r3, r3, #7
 8001a76:	2b04      	cmp	r3, #4
 8001a78:	bf28      	it	cs
 8001a7a:	2304      	movcs	r3, #4
 8001a7c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a7e:	69fb      	ldr	r3, [r7, #28]
 8001a80:	3304      	adds	r3, #4
 8001a82:	2b06      	cmp	r3, #6
 8001a84:	d902      	bls.n	8001a8c <NVIC_EncodePriority+0x30>
 8001a86:	69fb      	ldr	r3, [r7, #28]
 8001a88:	3b03      	subs	r3, #3
 8001a8a:	e000      	b.n	8001a8e <NVIC_EncodePriority+0x32>
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a90:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001a94:	69bb      	ldr	r3, [r7, #24]
 8001a96:	fa02 f303 	lsl.w	r3, r2, r3
 8001a9a:	43da      	mvns	r2, r3
 8001a9c:	68bb      	ldr	r3, [r7, #8]
 8001a9e:	401a      	ands	r2, r3
 8001aa0:	697b      	ldr	r3, [r7, #20]
 8001aa2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001aa4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001aa8:	697b      	ldr	r3, [r7, #20]
 8001aaa:	fa01 f303 	lsl.w	r3, r1, r3
 8001aae:	43d9      	mvns	r1, r3
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ab4:	4313      	orrs	r3, r2
         );
}
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	3724      	adds	r7, #36	; 0x24
 8001aba:	46bd      	mov	sp, r7
 8001abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac0:	4770      	bx	lr
	...

08001ac4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b082      	sub	sp, #8
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	3b01      	subs	r3, #1
 8001ad0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001ad4:	d301      	bcc.n	8001ada <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001ad6:	2301      	movs	r3, #1
 8001ad8:	e00f      	b.n	8001afa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ada:	4a0a      	ldr	r2, [pc, #40]	; (8001b04 <SysTick_Config+0x40>)
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	3b01      	subs	r3, #1
 8001ae0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ae2:	210f      	movs	r1, #15
 8001ae4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001ae8:	f7ff ff8e 	bl	8001a08 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001aec:	4b05      	ldr	r3, [pc, #20]	; (8001b04 <SysTick_Config+0x40>)
 8001aee:	2200      	movs	r2, #0
 8001af0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001af2:	4b04      	ldr	r3, [pc, #16]	; (8001b04 <SysTick_Config+0x40>)
 8001af4:	2207      	movs	r2, #7
 8001af6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001af8:	2300      	movs	r3, #0
}
 8001afa:	4618      	mov	r0, r3
 8001afc:	3708      	adds	r7, #8
 8001afe:	46bd      	mov	sp, r7
 8001b00:	bd80      	pop	{r7, pc}
 8001b02:	bf00      	nop
 8001b04:	e000e010 	.word	0xe000e010

08001b08 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b082      	sub	sp, #8
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b10:	6878      	ldr	r0, [r7, #4]
 8001b12:	f7ff ff29 	bl	8001968 <__NVIC_SetPriorityGrouping>
}
 8001b16:	bf00      	nop
 8001b18:	3708      	adds	r7, #8
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	bd80      	pop	{r7, pc}

08001b1e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b1e:	b580      	push	{r7, lr}
 8001b20:	b086      	sub	sp, #24
 8001b22:	af00      	add	r7, sp, #0
 8001b24:	4603      	mov	r3, r0
 8001b26:	60b9      	str	r1, [r7, #8]
 8001b28:	607a      	str	r2, [r7, #4]
 8001b2a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b30:	f7ff ff3e 	bl	80019b0 <__NVIC_GetPriorityGrouping>
 8001b34:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b36:	687a      	ldr	r2, [r7, #4]
 8001b38:	68b9      	ldr	r1, [r7, #8]
 8001b3a:	6978      	ldr	r0, [r7, #20]
 8001b3c:	f7ff ff8e 	bl	8001a5c <NVIC_EncodePriority>
 8001b40:	4602      	mov	r2, r0
 8001b42:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b46:	4611      	mov	r1, r2
 8001b48:	4618      	mov	r0, r3
 8001b4a:	f7ff ff5d 	bl	8001a08 <__NVIC_SetPriority>
}
 8001b4e:	bf00      	nop
 8001b50:	3718      	adds	r7, #24
 8001b52:	46bd      	mov	sp, r7
 8001b54:	bd80      	pop	{r7, pc}

08001b56 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b56:	b580      	push	{r7, lr}
 8001b58:	b082      	sub	sp, #8
 8001b5a:	af00      	add	r7, sp, #0
 8001b5c:	4603      	mov	r3, r0
 8001b5e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b64:	4618      	mov	r0, r3
 8001b66:	f7ff ff31 	bl	80019cc <__NVIC_EnableIRQ>
}
 8001b6a:	bf00      	nop
 8001b6c:	3708      	adds	r7, #8
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	bd80      	pop	{r7, pc}

08001b72 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b72:	b580      	push	{r7, lr}
 8001b74:	b082      	sub	sp, #8
 8001b76:	af00      	add	r7, sp, #0
 8001b78:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b7a:	6878      	ldr	r0, [r7, #4]
 8001b7c:	f7ff ffa2 	bl	8001ac4 <SysTick_Config>
 8001b80:	4603      	mov	r3, r0
}
 8001b82:	4618      	mov	r0, r3
 8001b84:	3708      	adds	r7, #8
 8001b86:	46bd      	mov	sp, r7
 8001b88:	bd80      	pop	{r7, pc}
	...

08001b8c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b086      	sub	sp, #24
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001b94:	2300      	movs	r3, #0
 8001b96:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001b98:	f7ff feb6 	bl	8001908 <HAL_GetTick>
 8001b9c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d101      	bne.n	8001ba8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001ba4:	2301      	movs	r3, #1
 8001ba6:	e099      	b.n	8001cdc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	2202      	movs	r2, #2
 8001bac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	681a      	ldr	r2, [r3, #0]
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	f022 0201 	bic.w	r2, r2, #1
 8001bc6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001bc8:	e00f      	b.n	8001bea <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001bca:	f7ff fe9d 	bl	8001908 <HAL_GetTick>
 8001bce:	4602      	mov	r2, r0
 8001bd0:	693b      	ldr	r3, [r7, #16]
 8001bd2:	1ad3      	subs	r3, r2, r3
 8001bd4:	2b05      	cmp	r3, #5
 8001bd6:	d908      	bls.n	8001bea <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	2220      	movs	r2, #32
 8001bdc:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	2203      	movs	r2, #3
 8001be2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001be6:	2303      	movs	r3, #3
 8001be8:	e078      	b.n	8001cdc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	f003 0301 	and.w	r3, r3, #1
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d1e8      	bne.n	8001bca <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001c00:	697a      	ldr	r2, [r7, #20]
 8001c02:	4b38      	ldr	r3, [pc, #224]	; (8001ce4 <HAL_DMA_Init+0x158>)
 8001c04:	4013      	ands	r3, r2
 8001c06:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	685a      	ldr	r2, [r3, #4]
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	689b      	ldr	r3, [r3, #8]
 8001c10:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001c16:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	691b      	ldr	r3, [r3, #16]
 8001c1c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c22:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	699b      	ldr	r3, [r3, #24]
 8001c28:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c2e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	6a1b      	ldr	r3, [r3, #32]
 8001c34:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001c36:	697a      	ldr	r2, [r7, #20]
 8001c38:	4313      	orrs	r3, r2
 8001c3a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c40:	2b04      	cmp	r3, #4
 8001c42:	d107      	bne.n	8001c54 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c4c:	4313      	orrs	r3, r2
 8001c4e:	697a      	ldr	r2, [r7, #20]
 8001c50:	4313      	orrs	r3, r2
 8001c52:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	697a      	ldr	r2, [r7, #20]
 8001c5a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	695b      	ldr	r3, [r3, #20]
 8001c62:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001c64:	697b      	ldr	r3, [r7, #20]
 8001c66:	f023 0307 	bic.w	r3, r3, #7
 8001c6a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c70:	697a      	ldr	r2, [r7, #20]
 8001c72:	4313      	orrs	r3, r2
 8001c74:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c7a:	2b04      	cmp	r3, #4
 8001c7c:	d117      	bne.n	8001cae <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c82:	697a      	ldr	r2, [r7, #20]
 8001c84:	4313      	orrs	r3, r2
 8001c86:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d00e      	beq.n	8001cae <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001c90:	6878      	ldr	r0, [r7, #4]
 8001c92:	f000 fb01 	bl	8002298 <DMA_CheckFifoParam>
 8001c96:	4603      	mov	r3, r0
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d008      	beq.n	8001cae <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	2240      	movs	r2, #64	; 0x40
 8001ca0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	2201      	movs	r2, #1
 8001ca6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001caa:	2301      	movs	r3, #1
 8001cac:	e016      	b.n	8001cdc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	697a      	ldr	r2, [r7, #20]
 8001cb4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001cb6:	6878      	ldr	r0, [r7, #4]
 8001cb8:	f000 fab8 	bl	800222c <DMA_CalcBaseAndBitshift>
 8001cbc:	4603      	mov	r3, r0
 8001cbe:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cc4:	223f      	movs	r2, #63	; 0x3f
 8001cc6:	409a      	lsls	r2, r3
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	2200      	movs	r2, #0
 8001cd0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	2201      	movs	r2, #1
 8001cd6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001cda:	2300      	movs	r3, #0
}
 8001cdc:	4618      	mov	r0, r3
 8001cde:	3718      	adds	r7, #24
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	bd80      	pop	{r7, pc}
 8001ce4:	f010803f 	.word	0xf010803f

08001ce8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b086      	sub	sp, #24
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	60f8      	str	r0, [r7, #12]
 8001cf0:	60b9      	str	r1, [r7, #8]
 8001cf2:	607a      	str	r2, [r7, #4]
 8001cf4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cfe:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001d06:	2b01      	cmp	r3, #1
 8001d08:	d101      	bne.n	8001d0e <HAL_DMA_Start_IT+0x26>
 8001d0a:	2302      	movs	r3, #2
 8001d0c:	e040      	b.n	8001d90 <HAL_DMA_Start_IT+0xa8>
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	2201      	movs	r2, #1
 8001d12:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001d1c:	b2db      	uxtb	r3, r3
 8001d1e:	2b01      	cmp	r3, #1
 8001d20:	d12f      	bne.n	8001d82 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	2202      	movs	r2, #2
 8001d26:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001d30:	683b      	ldr	r3, [r7, #0]
 8001d32:	687a      	ldr	r2, [r7, #4]
 8001d34:	68b9      	ldr	r1, [r7, #8]
 8001d36:	68f8      	ldr	r0, [r7, #12]
 8001d38:	f000 fa4a 	bl	80021d0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d40:	223f      	movs	r2, #63	; 0x3f
 8001d42:	409a      	lsls	r2, r3
 8001d44:	693b      	ldr	r3, [r7, #16]
 8001d46:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	681a      	ldr	r2, [r3, #0]
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f042 0216 	orr.w	r2, r2, #22
 8001d56:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d007      	beq.n	8001d70 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	681a      	ldr	r2, [r3, #0]
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f042 0208 	orr.w	r2, r2, #8
 8001d6e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	681a      	ldr	r2, [r3, #0]
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f042 0201 	orr.w	r2, r2, #1
 8001d7e:	601a      	str	r2, [r3, #0]
 8001d80:	e005      	b.n	8001d8e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	2200      	movs	r2, #0
 8001d86:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001d8a:	2302      	movs	r3, #2
 8001d8c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001d8e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001d90:	4618      	mov	r0, r3
 8001d92:	3718      	adds	r7, #24
 8001d94:	46bd      	mov	sp, r7
 8001d96:	bd80      	pop	{r7, pc}

08001d98 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b084      	sub	sp, #16
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001da4:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001da6:	f7ff fdaf 	bl	8001908 <HAL_GetTick>
 8001daa:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001db2:	b2db      	uxtb	r3, r3
 8001db4:	2b02      	cmp	r3, #2
 8001db6:	d008      	beq.n	8001dca <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	2280      	movs	r2, #128	; 0x80
 8001dbc:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001dc6:	2301      	movs	r3, #1
 8001dc8:	e052      	b.n	8001e70 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	681a      	ldr	r2, [r3, #0]
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	f022 0216 	bic.w	r2, r2, #22
 8001dd8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	695a      	ldr	r2, [r3, #20]
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001de8:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d103      	bne.n	8001dfa <HAL_DMA_Abort+0x62>
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d007      	beq.n	8001e0a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	681a      	ldr	r2, [r3, #0]
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	f022 0208 	bic.w	r2, r2, #8
 8001e08:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	681a      	ldr	r2, [r3, #0]
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f022 0201 	bic.w	r2, r2, #1
 8001e18:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001e1a:	e013      	b.n	8001e44 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001e1c:	f7ff fd74 	bl	8001908 <HAL_GetTick>
 8001e20:	4602      	mov	r2, r0
 8001e22:	68bb      	ldr	r3, [r7, #8]
 8001e24:	1ad3      	subs	r3, r2, r3
 8001e26:	2b05      	cmp	r3, #5
 8001e28:	d90c      	bls.n	8001e44 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	2220      	movs	r2, #32
 8001e2e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	2203      	movs	r2, #3
 8001e34:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001e40:	2303      	movs	r3, #3
 8001e42:	e015      	b.n	8001e70 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f003 0301 	and.w	r3, r3, #1
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d1e4      	bne.n	8001e1c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e56:	223f      	movs	r2, #63	; 0x3f
 8001e58:	409a      	lsls	r2, r3
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	2201      	movs	r2, #1
 8001e62:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	2200      	movs	r2, #0
 8001e6a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001e6e:	2300      	movs	r3, #0
}
 8001e70:	4618      	mov	r0, r3
 8001e72:	3710      	adds	r7, #16
 8001e74:	46bd      	mov	sp, r7
 8001e76:	bd80      	pop	{r7, pc}

08001e78 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001e78:	b480      	push	{r7}
 8001e7a:	b083      	sub	sp, #12
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001e86:	b2db      	uxtb	r3, r3
 8001e88:	2b02      	cmp	r3, #2
 8001e8a:	d004      	beq.n	8001e96 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	2280      	movs	r2, #128	; 0x80
 8001e90:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001e92:	2301      	movs	r3, #1
 8001e94:	e00c      	b.n	8001eb0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	2205      	movs	r2, #5
 8001e9a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	681a      	ldr	r2, [r3, #0]
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f022 0201 	bic.w	r2, r2, #1
 8001eac:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001eae:	2300      	movs	r3, #0
}
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	370c      	adds	r7, #12
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eba:	4770      	bx	lr

08001ebc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	b086      	sub	sp, #24
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001ec8:	4b8e      	ldr	r3, [pc, #568]	; (8002104 <HAL_DMA_IRQHandler+0x248>)
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	4a8e      	ldr	r2, [pc, #568]	; (8002108 <HAL_DMA_IRQHandler+0x24c>)
 8001ece:	fba2 2303 	umull	r2, r3, r2, r3
 8001ed2:	0a9b      	lsrs	r3, r3, #10
 8001ed4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001eda:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001edc:	693b      	ldr	r3, [r7, #16]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ee6:	2208      	movs	r2, #8
 8001ee8:	409a      	lsls	r2, r3
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	4013      	ands	r3, r2
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d01a      	beq.n	8001f28 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f003 0304 	and.w	r3, r3, #4
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d013      	beq.n	8001f28 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	681a      	ldr	r2, [r3, #0]
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f022 0204 	bic.w	r2, r2, #4
 8001f0e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f14:	2208      	movs	r2, #8
 8001f16:	409a      	lsls	r2, r3
 8001f18:	693b      	ldr	r3, [r7, #16]
 8001f1a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f20:	f043 0201 	orr.w	r2, r3, #1
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f2c:	2201      	movs	r2, #1
 8001f2e:	409a      	lsls	r2, r3
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	4013      	ands	r3, r2
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d012      	beq.n	8001f5e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	695b      	ldr	r3, [r3, #20]
 8001f3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d00b      	beq.n	8001f5e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f4a:	2201      	movs	r2, #1
 8001f4c:	409a      	lsls	r2, r3
 8001f4e:	693b      	ldr	r3, [r7, #16]
 8001f50:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f56:	f043 0202 	orr.w	r2, r3, #2
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f62:	2204      	movs	r2, #4
 8001f64:	409a      	lsls	r2, r3
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	4013      	ands	r3, r2
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d012      	beq.n	8001f94 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f003 0302 	and.w	r3, r3, #2
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d00b      	beq.n	8001f94 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f80:	2204      	movs	r2, #4
 8001f82:	409a      	lsls	r2, r3
 8001f84:	693b      	ldr	r3, [r7, #16]
 8001f86:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f8c:	f043 0204 	orr.w	r2, r3, #4
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f98:	2210      	movs	r2, #16
 8001f9a:	409a      	lsls	r2, r3
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	4013      	ands	r3, r2
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d043      	beq.n	800202c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f003 0308 	and.w	r3, r3, #8
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d03c      	beq.n	800202c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fb6:	2210      	movs	r2, #16
 8001fb8:	409a      	lsls	r2, r3
 8001fba:	693b      	ldr	r3, [r7, #16]
 8001fbc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d018      	beq.n	8001ffe <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d108      	bne.n	8001fec <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d024      	beq.n	800202c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fe6:	6878      	ldr	r0, [r7, #4]
 8001fe8:	4798      	blx	r3
 8001fea:	e01f      	b.n	800202c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d01b      	beq.n	800202c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ff8:	6878      	ldr	r0, [r7, #4]
 8001ffa:	4798      	blx	r3
 8001ffc:	e016      	b.n	800202c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002008:	2b00      	cmp	r3, #0
 800200a:	d107      	bne.n	800201c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	681a      	ldr	r2, [r3, #0]
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f022 0208 	bic.w	r2, r2, #8
 800201a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002020:	2b00      	cmp	r3, #0
 8002022:	d003      	beq.n	800202c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002028:	6878      	ldr	r0, [r7, #4]
 800202a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002030:	2220      	movs	r2, #32
 8002032:	409a      	lsls	r2, r3
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	4013      	ands	r3, r2
 8002038:	2b00      	cmp	r3, #0
 800203a:	f000 808f 	beq.w	800215c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f003 0310 	and.w	r3, r3, #16
 8002048:	2b00      	cmp	r3, #0
 800204a:	f000 8087 	beq.w	800215c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002052:	2220      	movs	r2, #32
 8002054:	409a      	lsls	r2, r3
 8002056:	693b      	ldr	r3, [r7, #16]
 8002058:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002060:	b2db      	uxtb	r3, r3
 8002062:	2b05      	cmp	r3, #5
 8002064:	d136      	bne.n	80020d4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	681a      	ldr	r2, [r3, #0]
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f022 0216 	bic.w	r2, r2, #22
 8002074:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	695a      	ldr	r2, [r3, #20]
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002084:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800208a:	2b00      	cmp	r3, #0
 800208c:	d103      	bne.n	8002096 <HAL_DMA_IRQHandler+0x1da>
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002092:	2b00      	cmp	r3, #0
 8002094:	d007      	beq.n	80020a6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	681a      	ldr	r2, [r3, #0]
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f022 0208 	bic.w	r2, r2, #8
 80020a4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020aa:	223f      	movs	r2, #63	; 0x3f
 80020ac:	409a      	lsls	r2, r3
 80020ae:	693b      	ldr	r3, [r7, #16]
 80020b0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	2201      	movs	r2, #1
 80020b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	2200      	movs	r2, #0
 80020be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d07e      	beq.n	80021c8 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80020ce:	6878      	ldr	r0, [r7, #4]
 80020d0:	4798      	blx	r3
        }
        return;
 80020d2:	e079      	b.n	80021c8 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d01d      	beq.n	800211e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d10d      	bne.n	800210c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d031      	beq.n	800215c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020fc:	6878      	ldr	r0, [r7, #4]
 80020fe:	4798      	blx	r3
 8002100:	e02c      	b.n	800215c <HAL_DMA_IRQHandler+0x2a0>
 8002102:	bf00      	nop
 8002104:	20000090 	.word	0x20000090
 8002108:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002110:	2b00      	cmp	r3, #0
 8002112:	d023      	beq.n	800215c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002118:	6878      	ldr	r0, [r7, #4]
 800211a:	4798      	blx	r3
 800211c:	e01e      	b.n	800215c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002128:	2b00      	cmp	r3, #0
 800212a:	d10f      	bne.n	800214c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	681a      	ldr	r2, [r3, #0]
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f022 0210 	bic.w	r2, r2, #16
 800213a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	2201      	movs	r2, #1
 8002140:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	2200      	movs	r2, #0
 8002148:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002150:	2b00      	cmp	r3, #0
 8002152:	d003      	beq.n	800215c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002158:	6878      	ldr	r0, [r7, #4]
 800215a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002160:	2b00      	cmp	r3, #0
 8002162:	d032      	beq.n	80021ca <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002168:	f003 0301 	and.w	r3, r3, #1
 800216c:	2b00      	cmp	r3, #0
 800216e:	d022      	beq.n	80021b6 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	2205      	movs	r2, #5
 8002174:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	681a      	ldr	r2, [r3, #0]
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f022 0201 	bic.w	r2, r2, #1
 8002186:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002188:	68bb      	ldr	r3, [r7, #8]
 800218a:	3301      	adds	r3, #1
 800218c:	60bb      	str	r3, [r7, #8]
 800218e:	697a      	ldr	r2, [r7, #20]
 8002190:	429a      	cmp	r2, r3
 8002192:	d307      	bcc.n	80021a4 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f003 0301 	and.w	r3, r3, #1
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d1f2      	bne.n	8002188 <HAL_DMA_IRQHandler+0x2cc>
 80021a2:	e000      	b.n	80021a6 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80021a4:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	2201      	movs	r2, #1
 80021aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	2200      	movs	r2, #0
 80021b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d005      	beq.n	80021ca <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021c2:	6878      	ldr	r0, [r7, #4]
 80021c4:	4798      	blx	r3
 80021c6:	e000      	b.n	80021ca <HAL_DMA_IRQHandler+0x30e>
        return;
 80021c8:	bf00      	nop
    }
  }
}
 80021ca:	3718      	adds	r7, #24
 80021cc:	46bd      	mov	sp, r7
 80021ce:	bd80      	pop	{r7, pc}

080021d0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80021d0:	b480      	push	{r7}
 80021d2:	b085      	sub	sp, #20
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	60f8      	str	r0, [r7, #12]
 80021d8:	60b9      	str	r1, [r7, #8]
 80021da:	607a      	str	r2, [r7, #4]
 80021dc:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	681a      	ldr	r2, [r3, #0]
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80021ec:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	683a      	ldr	r2, [r7, #0]
 80021f4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	689b      	ldr	r3, [r3, #8]
 80021fa:	2b40      	cmp	r3, #64	; 0x40
 80021fc:	d108      	bne.n	8002210 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	687a      	ldr	r2, [r7, #4]
 8002204:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	68ba      	ldr	r2, [r7, #8]
 800220c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800220e:	e007      	b.n	8002220 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	68ba      	ldr	r2, [r7, #8]
 8002216:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	687a      	ldr	r2, [r7, #4]
 800221e:	60da      	str	r2, [r3, #12]
}
 8002220:	bf00      	nop
 8002222:	3714      	adds	r7, #20
 8002224:	46bd      	mov	sp, r7
 8002226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222a:	4770      	bx	lr

0800222c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800222c:	b480      	push	{r7}
 800222e:	b085      	sub	sp, #20
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	b2db      	uxtb	r3, r3
 800223a:	3b10      	subs	r3, #16
 800223c:	4a14      	ldr	r2, [pc, #80]	; (8002290 <DMA_CalcBaseAndBitshift+0x64>)
 800223e:	fba2 2303 	umull	r2, r3, r2, r3
 8002242:	091b      	lsrs	r3, r3, #4
 8002244:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002246:	4a13      	ldr	r2, [pc, #76]	; (8002294 <DMA_CalcBaseAndBitshift+0x68>)
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	4413      	add	r3, r2
 800224c:	781b      	ldrb	r3, [r3, #0]
 800224e:	461a      	mov	r2, r3
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	2b03      	cmp	r3, #3
 8002258:	d909      	bls.n	800226e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002262:	f023 0303 	bic.w	r3, r3, #3
 8002266:	1d1a      	adds	r2, r3, #4
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	659a      	str	r2, [r3, #88]	; 0x58
 800226c:	e007      	b.n	800227e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002276:	f023 0303 	bic.w	r3, r3, #3
 800227a:	687a      	ldr	r2, [r7, #4]
 800227c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002282:	4618      	mov	r0, r3
 8002284:	3714      	adds	r7, #20
 8002286:	46bd      	mov	sp, r7
 8002288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228c:	4770      	bx	lr
 800228e:	bf00      	nop
 8002290:	aaaaaaab 	.word	0xaaaaaaab
 8002294:	080075a8 	.word	0x080075a8

08002298 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002298:	b480      	push	{r7}
 800229a:	b085      	sub	sp, #20
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80022a0:	2300      	movs	r3, #0
 80022a2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022a8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	699b      	ldr	r3, [r3, #24]
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d11f      	bne.n	80022f2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80022b2:	68bb      	ldr	r3, [r7, #8]
 80022b4:	2b03      	cmp	r3, #3
 80022b6:	d856      	bhi.n	8002366 <DMA_CheckFifoParam+0xce>
 80022b8:	a201      	add	r2, pc, #4	; (adr r2, 80022c0 <DMA_CheckFifoParam+0x28>)
 80022ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022be:	bf00      	nop
 80022c0:	080022d1 	.word	0x080022d1
 80022c4:	080022e3 	.word	0x080022e3
 80022c8:	080022d1 	.word	0x080022d1
 80022cc:	08002367 	.word	0x08002367
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022d4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d046      	beq.n	800236a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80022dc:	2301      	movs	r3, #1
 80022de:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80022e0:	e043      	b.n	800236a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022e6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80022ea:	d140      	bne.n	800236e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80022ec:	2301      	movs	r3, #1
 80022ee:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80022f0:	e03d      	b.n	800236e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	699b      	ldr	r3, [r3, #24]
 80022f6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80022fa:	d121      	bne.n	8002340 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80022fc:	68bb      	ldr	r3, [r7, #8]
 80022fe:	2b03      	cmp	r3, #3
 8002300:	d837      	bhi.n	8002372 <DMA_CheckFifoParam+0xda>
 8002302:	a201      	add	r2, pc, #4	; (adr r2, 8002308 <DMA_CheckFifoParam+0x70>)
 8002304:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002308:	08002319 	.word	0x08002319
 800230c:	0800231f 	.word	0x0800231f
 8002310:	08002319 	.word	0x08002319
 8002314:	08002331 	.word	0x08002331
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002318:	2301      	movs	r3, #1
 800231a:	73fb      	strb	r3, [r7, #15]
      break;
 800231c:	e030      	b.n	8002380 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002322:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002326:	2b00      	cmp	r3, #0
 8002328:	d025      	beq.n	8002376 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800232a:	2301      	movs	r3, #1
 800232c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800232e:	e022      	b.n	8002376 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002334:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002338:	d11f      	bne.n	800237a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800233a:	2301      	movs	r3, #1
 800233c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800233e:	e01c      	b.n	800237a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002340:	68bb      	ldr	r3, [r7, #8]
 8002342:	2b02      	cmp	r3, #2
 8002344:	d903      	bls.n	800234e <DMA_CheckFifoParam+0xb6>
 8002346:	68bb      	ldr	r3, [r7, #8]
 8002348:	2b03      	cmp	r3, #3
 800234a:	d003      	beq.n	8002354 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800234c:	e018      	b.n	8002380 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800234e:	2301      	movs	r3, #1
 8002350:	73fb      	strb	r3, [r7, #15]
      break;
 8002352:	e015      	b.n	8002380 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002358:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800235c:	2b00      	cmp	r3, #0
 800235e:	d00e      	beq.n	800237e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002360:	2301      	movs	r3, #1
 8002362:	73fb      	strb	r3, [r7, #15]
      break;
 8002364:	e00b      	b.n	800237e <DMA_CheckFifoParam+0xe6>
      break;
 8002366:	bf00      	nop
 8002368:	e00a      	b.n	8002380 <DMA_CheckFifoParam+0xe8>
      break;
 800236a:	bf00      	nop
 800236c:	e008      	b.n	8002380 <DMA_CheckFifoParam+0xe8>
      break;
 800236e:	bf00      	nop
 8002370:	e006      	b.n	8002380 <DMA_CheckFifoParam+0xe8>
      break;
 8002372:	bf00      	nop
 8002374:	e004      	b.n	8002380 <DMA_CheckFifoParam+0xe8>
      break;
 8002376:	bf00      	nop
 8002378:	e002      	b.n	8002380 <DMA_CheckFifoParam+0xe8>
      break;   
 800237a:	bf00      	nop
 800237c:	e000      	b.n	8002380 <DMA_CheckFifoParam+0xe8>
      break;
 800237e:	bf00      	nop
    }
  } 
  
  return status; 
 8002380:	7bfb      	ldrb	r3, [r7, #15]
}
 8002382:	4618      	mov	r0, r3
 8002384:	3714      	adds	r7, #20
 8002386:	46bd      	mov	sp, r7
 8002388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238c:	4770      	bx	lr
 800238e:	bf00      	nop

08002390 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002390:	b480      	push	{r7}
 8002392:	b089      	sub	sp, #36	; 0x24
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]
 8002398:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800239a:	2300      	movs	r3, #0
 800239c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800239e:	2300      	movs	r3, #0
 80023a0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80023a2:	2300      	movs	r3, #0
 80023a4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80023a6:	2300      	movs	r3, #0
 80023a8:	61fb      	str	r3, [r7, #28]
 80023aa:	e159      	b.n	8002660 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80023ac:	2201      	movs	r2, #1
 80023ae:	69fb      	ldr	r3, [r7, #28]
 80023b0:	fa02 f303 	lsl.w	r3, r2, r3
 80023b4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80023b6:	683b      	ldr	r3, [r7, #0]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	697a      	ldr	r2, [r7, #20]
 80023bc:	4013      	ands	r3, r2
 80023be:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80023c0:	693a      	ldr	r2, [r7, #16]
 80023c2:	697b      	ldr	r3, [r7, #20]
 80023c4:	429a      	cmp	r2, r3
 80023c6:	f040 8148 	bne.w	800265a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80023ca:	683b      	ldr	r3, [r7, #0]
 80023cc:	685b      	ldr	r3, [r3, #4]
 80023ce:	f003 0303 	and.w	r3, r3, #3
 80023d2:	2b01      	cmp	r3, #1
 80023d4:	d005      	beq.n	80023e2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80023d6:	683b      	ldr	r3, [r7, #0]
 80023d8:	685b      	ldr	r3, [r3, #4]
 80023da:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80023de:	2b02      	cmp	r3, #2
 80023e0:	d130      	bne.n	8002444 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	689b      	ldr	r3, [r3, #8]
 80023e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80023e8:	69fb      	ldr	r3, [r7, #28]
 80023ea:	005b      	lsls	r3, r3, #1
 80023ec:	2203      	movs	r2, #3
 80023ee:	fa02 f303 	lsl.w	r3, r2, r3
 80023f2:	43db      	mvns	r3, r3
 80023f4:	69ba      	ldr	r2, [r7, #24]
 80023f6:	4013      	ands	r3, r2
 80023f8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80023fa:	683b      	ldr	r3, [r7, #0]
 80023fc:	68da      	ldr	r2, [r3, #12]
 80023fe:	69fb      	ldr	r3, [r7, #28]
 8002400:	005b      	lsls	r3, r3, #1
 8002402:	fa02 f303 	lsl.w	r3, r2, r3
 8002406:	69ba      	ldr	r2, [r7, #24]
 8002408:	4313      	orrs	r3, r2
 800240a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	69ba      	ldr	r2, [r7, #24]
 8002410:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	685b      	ldr	r3, [r3, #4]
 8002416:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002418:	2201      	movs	r2, #1
 800241a:	69fb      	ldr	r3, [r7, #28]
 800241c:	fa02 f303 	lsl.w	r3, r2, r3
 8002420:	43db      	mvns	r3, r3
 8002422:	69ba      	ldr	r2, [r7, #24]
 8002424:	4013      	ands	r3, r2
 8002426:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002428:	683b      	ldr	r3, [r7, #0]
 800242a:	685b      	ldr	r3, [r3, #4]
 800242c:	091b      	lsrs	r3, r3, #4
 800242e:	f003 0201 	and.w	r2, r3, #1
 8002432:	69fb      	ldr	r3, [r7, #28]
 8002434:	fa02 f303 	lsl.w	r3, r2, r3
 8002438:	69ba      	ldr	r2, [r7, #24]
 800243a:	4313      	orrs	r3, r2
 800243c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	69ba      	ldr	r2, [r7, #24]
 8002442:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002444:	683b      	ldr	r3, [r7, #0]
 8002446:	685b      	ldr	r3, [r3, #4]
 8002448:	f003 0303 	and.w	r3, r3, #3
 800244c:	2b03      	cmp	r3, #3
 800244e:	d017      	beq.n	8002480 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	68db      	ldr	r3, [r3, #12]
 8002454:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002456:	69fb      	ldr	r3, [r7, #28]
 8002458:	005b      	lsls	r3, r3, #1
 800245a:	2203      	movs	r2, #3
 800245c:	fa02 f303 	lsl.w	r3, r2, r3
 8002460:	43db      	mvns	r3, r3
 8002462:	69ba      	ldr	r2, [r7, #24]
 8002464:	4013      	ands	r3, r2
 8002466:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002468:	683b      	ldr	r3, [r7, #0]
 800246a:	689a      	ldr	r2, [r3, #8]
 800246c:	69fb      	ldr	r3, [r7, #28]
 800246e:	005b      	lsls	r3, r3, #1
 8002470:	fa02 f303 	lsl.w	r3, r2, r3
 8002474:	69ba      	ldr	r2, [r7, #24]
 8002476:	4313      	orrs	r3, r2
 8002478:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	69ba      	ldr	r2, [r7, #24]
 800247e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002480:	683b      	ldr	r3, [r7, #0]
 8002482:	685b      	ldr	r3, [r3, #4]
 8002484:	f003 0303 	and.w	r3, r3, #3
 8002488:	2b02      	cmp	r3, #2
 800248a:	d123      	bne.n	80024d4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800248c:	69fb      	ldr	r3, [r7, #28]
 800248e:	08da      	lsrs	r2, r3, #3
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	3208      	adds	r2, #8
 8002494:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002498:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800249a:	69fb      	ldr	r3, [r7, #28]
 800249c:	f003 0307 	and.w	r3, r3, #7
 80024a0:	009b      	lsls	r3, r3, #2
 80024a2:	220f      	movs	r2, #15
 80024a4:	fa02 f303 	lsl.w	r3, r2, r3
 80024a8:	43db      	mvns	r3, r3
 80024aa:	69ba      	ldr	r2, [r7, #24]
 80024ac:	4013      	ands	r3, r2
 80024ae:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80024b0:	683b      	ldr	r3, [r7, #0]
 80024b2:	691a      	ldr	r2, [r3, #16]
 80024b4:	69fb      	ldr	r3, [r7, #28]
 80024b6:	f003 0307 	and.w	r3, r3, #7
 80024ba:	009b      	lsls	r3, r3, #2
 80024bc:	fa02 f303 	lsl.w	r3, r2, r3
 80024c0:	69ba      	ldr	r2, [r7, #24]
 80024c2:	4313      	orrs	r3, r2
 80024c4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80024c6:	69fb      	ldr	r3, [r7, #28]
 80024c8:	08da      	lsrs	r2, r3, #3
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	3208      	adds	r2, #8
 80024ce:	69b9      	ldr	r1, [r7, #24]
 80024d0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80024da:	69fb      	ldr	r3, [r7, #28]
 80024dc:	005b      	lsls	r3, r3, #1
 80024de:	2203      	movs	r2, #3
 80024e0:	fa02 f303 	lsl.w	r3, r2, r3
 80024e4:	43db      	mvns	r3, r3
 80024e6:	69ba      	ldr	r2, [r7, #24]
 80024e8:	4013      	ands	r3, r2
 80024ea:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80024ec:	683b      	ldr	r3, [r7, #0]
 80024ee:	685b      	ldr	r3, [r3, #4]
 80024f0:	f003 0203 	and.w	r2, r3, #3
 80024f4:	69fb      	ldr	r3, [r7, #28]
 80024f6:	005b      	lsls	r3, r3, #1
 80024f8:	fa02 f303 	lsl.w	r3, r2, r3
 80024fc:	69ba      	ldr	r2, [r7, #24]
 80024fe:	4313      	orrs	r3, r2
 8002500:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	69ba      	ldr	r2, [r7, #24]
 8002506:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002508:	683b      	ldr	r3, [r7, #0]
 800250a:	685b      	ldr	r3, [r3, #4]
 800250c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002510:	2b00      	cmp	r3, #0
 8002512:	f000 80a2 	beq.w	800265a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002516:	2300      	movs	r3, #0
 8002518:	60fb      	str	r3, [r7, #12]
 800251a:	4b57      	ldr	r3, [pc, #348]	; (8002678 <HAL_GPIO_Init+0x2e8>)
 800251c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800251e:	4a56      	ldr	r2, [pc, #344]	; (8002678 <HAL_GPIO_Init+0x2e8>)
 8002520:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002524:	6453      	str	r3, [r2, #68]	; 0x44
 8002526:	4b54      	ldr	r3, [pc, #336]	; (8002678 <HAL_GPIO_Init+0x2e8>)
 8002528:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800252a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800252e:	60fb      	str	r3, [r7, #12]
 8002530:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002532:	4a52      	ldr	r2, [pc, #328]	; (800267c <HAL_GPIO_Init+0x2ec>)
 8002534:	69fb      	ldr	r3, [r7, #28]
 8002536:	089b      	lsrs	r3, r3, #2
 8002538:	3302      	adds	r3, #2
 800253a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800253e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002540:	69fb      	ldr	r3, [r7, #28]
 8002542:	f003 0303 	and.w	r3, r3, #3
 8002546:	009b      	lsls	r3, r3, #2
 8002548:	220f      	movs	r2, #15
 800254a:	fa02 f303 	lsl.w	r3, r2, r3
 800254e:	43db      	mvns	r3, r3
 8002550:	69ba      	ldr	r2, [r7, #24]
 8002552:	4013      	ands	r3, r2
 8002554:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	4a49      	ldr	r2, [pc, #292]	; (8002680 <HAL_GPIO_Init+0x2f0>)
 800255a:	4293      	cmp	r3, r2
 800255c:	d019      	beq.n	8002592 <HAL_GPIO_Init+0x202>
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	4a48      	ldr	r2, [pc, #288]	; (8002684 <HAL_GPIO_Init+0x2f4>)
 8002562:	4293      	cmp	r3, r2
 8002564:	d013      	beq.n	800258e <HAL_GPIO_Init+0x1fe>
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	4a47      	ldr	r2, [pc, #284]	; (8002688 <HAL_GPIO_Init+0x2f8>)
 800256a:	4293      	cmp	r3, r2
 800256c:	d00d      	beq.n	800258a <HAL_GPIO_Init+0x1fa>
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	4a46      	ldr	r2, [pc, #280]	; (800268c <HAL_GPIO_Init+0x2fc>)
 8002572:	4293      	cmp	r3, r2
 8002574:	d007      	beq.n	8002586 <HAL_GPIO_Init+0x1f6>
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	4a45      	ldr	r2, [pc, #276]	; (8002690 <HAL_GPIO_Init+0x300>)
 800257a:	4293      	cmp	r3, r2
 800257c:	d101      	bne.n	8002582 <HAL_GPIO_Init+0x1f2>
 800257e:	2304      	movs	r3, #4
 8002580:	e008      	b.n	8002594 <HAL_GPIO_Init+0x204>
 8002582:	2307      	movs	r3, #7
 8002584:	e006      	b.n	8002594 <HAL_GPIO_Init+0x204>
 8002586:	2303      	movs	r3, #3
 8002588:	e004      	b.n	8002594 <HAL_GPIO_Init+0x204>
 800258a:	2302      	movs	r3, #2
 800258c:	e002      	b.n	8002594 <HAL_GPIO_Init+0x204>
 800258e:	2301      	movs	r3, #1
 8002590:	e000      	b.n	8002594 <HAL_GPIO_Init+0x204>
 8002592:	2300      	movs	r3, #0
 8002594:	69fa      	ldr	r2, [r7, #28]
 8002596:	f002 0203 	and.w	r2, r2, #3
 800259a:	0092      	lsls	r2, r2, #2
 800259c:	4093      	lsls	r3, r2
 800259e:	69ba      	ldr	r2, [r7, #24]
 80025a0:	4313      	orrs	r3, r2
 80025a2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80025a4:	4935      	ldr	r1, [pc, #212]	; (800267c <HAL_GPIO_Init+0x2ec>)
 80025a6:	69fb      	ldr	r3, [r7, #28]
 80025a8:	089b      	lsrs	r3, r3, #2
 80025aa:	3302      	adds	r3, #2
 80025ac:	69ba      	ldr	r2, [r7, #24]
 80025ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80025b2:	4b38      	ldr	r3, [pc, #224]	; (8002694 <HAL_GPIO_Init+0x304>)
 80025b4:	689b      	ldr	r3, [r3, #8]
 80025b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025b8:	693b      	ldr	r3, [r7, #16]
 80025ba:	43db      	mvns	r3, r3
 80025bc:	69ba      	ldr	r2, [r7, #24]
 80025be:	4013      	ands	r3, r2
 80025c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80025c2:	683b      	ldr	r3, [r7, #0]
 80025c4:	685b      	ldr	r3, [r3, #4]
 80025c6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d003      	beq.n	80025d6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80025ce:	69ba      	ldr	r2, [r7, #24]
 80025d0:	693b      	ldr	r3, [r7, #16]
 80025d2:	4313      	orrs	r3, r2
 80025d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80025d6:	4a2f      	ldr	r2, [pc, #188]	; (8002694 <HAL_GPIO_Init+0x304>)
 80025d8:	69bb      	ldr	r3, [r7, #24]
 80025da:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80025dc:	4b2d      	ldr	r3, [pc, #180]	; (8002694 <HAL_GPIO_Init+0x304>)
 80025de:	68db      	ldr	r3, [r3, #12]
 80025e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025e2:	693b      	ldr	r3, [r7, #16]
 80025e4:	43db      	mvns	r3, r3
 80025e6:	69ba      	ldr	r2, [r7, #24]
 80025e8:	4013      	ands	r3, r2
 80025ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80025ec:	683b      	ldr	r3, [r7, #0]
 80025ee:	685b      	ldr	r3, [r3, #4]
 80025f0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d003      	beq.n	8002600 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80025f8:	69ba      	ldr	r2, [r7, #24]
 80025fa:	693b      	ldr	r3, [r7, #16]
 80025fc:	4313      	orrs	r3, r2
 80025fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002600:	4a24      	ldr	r2, [pc, #144]	; (8002694 <HAL_GPIO_Init+0x304>)
 8002602:	69bb      	ldr	r3, [r7, #24]
 8002604:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002606:	4b23      	ldr	r3, [pc, #140]	; (8002694 <HAL_GPIO_Init+0x304>)
 8002608:	685b      	ldr	r3, [r3, #4]
 800260a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800260c:	693b      	ldr	r3, [r7, #16]
 800260e:	43db      	mvns	r3, r3
 8002610:	69ba      	ldr	r2, [r7, #24]
 8002612:	4013      	ands	r3, r2
 8002614:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002616:	683b      	ldr	r3, [r7, #0]
 8002618:	685b      	ldr	r3, [r3, #4]
 800261a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800261e:	2b00      	cmp	r3, #0
 8002620:	d003      	beq.n	800262a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002622:	69ba      	ldr	r2, [r7, #24]
 8002624:	693b      	ldr	r3, [r7, #16]
 8002626:	4313      	orrs	r3, r2
 8002628:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800262a:	4a1a      	ldr	r2, [pc, #104]	; (8002694 <HAL_GPIO_Init+0x304>)
 800262c:	69bb      	ldr	r3, [r7, #24]
 800262e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002630:	4b18      	ldr	r3, [pc, #96]	; (8002694 <HAL_GPIO_Init+0x304>)
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002636:	693b      	ldr	r3, [r7, #16]
 8002638:	43db      	mvns	r3, r3
 800263a:	69ba      	ldr	r2, [r7, #24]
 800263c:	4013      	ands	r3, r2
 800263e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002640:	683b      	ldr	r3, [r7, #0]
 8002642:	685b      	ldr	r3, [r3, #4]
 8002644:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002648:	2b00      	cmp	r3, #0
 800264a:	d003      	beq.n	8002654 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800264c:	69ba      	ldr	r2, [r7, #24]
 800264e:	693b      	ldr	r3, [r7, #16]
 8002650:	4313      	orrs	r3, r2
 8002652:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002654:	4a0f      	ldr	r2, [pc, #60]	; (8002694 <HAL_GPIO_Init+0x304>)
 8002656:	69bb      	ldr	r3, [r7, #24]
 8002658:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800265a:	69fb      	ldr	r3, [r7, #28]
 800265c:	3301      	adds	r3, #1
 800265e:	61fb      	str	r3, [r7, #28]
 8002660:	69fb      	ldr	r3, [r7, #28]
 8002662:	2b0f      	cmp	r3, #15
 8002664:	f67f aea2 	bls.w	80023ac <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002668:	bf00      	nop
 800266a:	bf00      	nop
 800266c:	3724      	adds	r7, #36	; 0x24
 800266e:	46bd      	mov	sp, r7
 8002670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002674:	4770      	bx	lr
 8002676:	bf00      	nop
 8002678:	40023800 	.word	0x40023800
 800267c:	40013800 	.word	0x40013800
 8002680:	40020000 	.word	0x40020000
 8002684:	40020400 	.word	0x40020400
 8002688:	40020800 	.word	0x40020800
 800268c:	40020c00 	.word	0x40020c00
 8002690:	40021000 	.word	0x40021000
 8002694:	40013c00 	.word	0x40013c00

08002698 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002698:	b480      	push	{r7}
 800269a:	b083      	sub	sp, #12
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]
 80026a0:	460b      	mov	r3, r1
 80026a2:	807b      	strh	r3, [r7, #2]
 80026a4:	4613      	mov	r3, r2
 80026a6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80026a8:	787b      	ldrb	r3, [r7, #1]
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d003      	beq.n	80026b6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80026ae:	887a      	ldrh	r2, [r7, #2]
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80026b4:	e003      	b.n	80026be <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80026b6:	887b      	ldrh	r3, [r7, #2]
 80026b8:	041a      	lsls	r2, r3, #16
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	619a      	str	r2, [r3, #24]
}
 80026be:	bf00      	nop
 80026c0:	370c      	adds	r7, #12
 80026c2:	46bd      	mov	sp, r7
 80026c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c8:	4770      	bx	lr
	...

080026cc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	b084      	sub	sp, #16
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d101      	bne.n	80026de <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80026da:	2301      	movs	r3, #1
 80026dc:	e12b      	b.n	8002936 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80026e4:	b2db      	uxtb	r3, r3
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d106      	bne.n	80026f8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	2200      	movs	r2, #0
 80026ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80026f2:	6878      	ldr	r0, [r7, #4]
 80026f4:	f7fe fc02 	bl	8000efc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	2224      	movs	r2, #36	; 0x24
 80026fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	681a      	ldr	r2, [r3, #0]
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f022 0201 	bic.w	r2, r2, #1
 800270e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	681a      	ldr	r2, [r3, #0]
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800271e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	681a      	ldr	r2, [r3, #0]
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800272e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002730:	f001 fbc8 	bl	8003ec4 <HAL_RCC_GetPCLK1Freq>
 8002734:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	685b      	ldr	r3, [r3, #4]
 800273a:	4a81      	ldr	r2, [pc, #516]	; (8002940 <HAL_I2C_Init+0x274>)
 800273c:	4293      	cmp	r3, r2
 800273e:	d807      	bhi.n	8002750 <HAL_I2C_Init+0x84>
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	4a80      	ldr	r2, [pc, #512]	; (8002944 <HAL_I2C_Init+0x278>)
 8002744:	4293      	cmp	r3, r2
 8002746:	bf94      	ite	ls
 8002748:	2301      	movls	r3, #1
 800274a:	2300      	movhi	r3, #0
 800274c:	b2db      	uxtb	r3, r3
 800274e:	e006      	b.n	800275e <HAL_I2C_Init+0x92>
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	4a7d      	ldr	r2, [pc, #500]	; (8002948 <HAL_I2C_Init+0x27c>)
 8002754:	4293      	cmp	r3, r2
 8002756:	bf94      	ite	ls
 8002758:	2301      	movls	r3, #1
 800275a:	2300      	movhi	r3, #0
 800275c:	b2db      	uxtb	r3, r3
 800275e:	2b00      	cmp	r3, #0
 8002760:	d001      	beq.n	8002766 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002762:	2301      	movs	r3, #1
 8002764:	e0e7      	b.n	8002936 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	4a78      	ldr	r2, [pc, #480]	; (800294c <HAL_I2C_Init+0x280>)
 800276a:	fba2 2303 	umull	r2, r3, r2, r3
 800276e:	0c9b      	lsrs	r3, r3, #18
 8002770:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	685b      	ldr	r3, [r3, #4]
 8002778:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	68ba      	ldr	r2, [r7, #8]
 8002782:	430a      	orrs	r2, r1
 8002784:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	6a1b      	ldr	r3, [r3, #32]
 800278c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	685b      	ldr	r3, [r3, #4]
 8002794:	4a6a      	ldr	r2, [pc, #424]	; (8002940 <HAL_I2C_Init+0x274>)
 8002796:	4293      	cmp	r3, r2
 8002798:	d802      	bhi.n	80027a0 <HAL_I2C_Init+0xd4>
 800279a:	68bb      	ldr	r3, [r7, #8]
 800279c:	3301      	adds	r3, #1
 800279e:	e009      	b.n	80027b4 <HAL_I2C_Init+0xe8>
 80027a0:	68bb      	ldr	r3, [r7, #8]
 80027a2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80027a6:	fb02 f303 	mul.w	r3, r2, r3
 80027aa:	4a69      	ldr	r2, [pc, #420]	; (8002950 <HAL_I2C_Init+0x284>)
 80027ac:	fba2 2303 	umull	r2, r3, r2, r3
 80027b0:	099b      	lsrs	r3, r3, #6
 80027b2:	3301      	adds	r3, #1
 80027b4:	687a      	ldr	r2, [r7, #4]
 80027b6:	6812      	ldr	r2, [r2, #0]
 80027b8:	430b      	orrs	r3, r1
 80027ba:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	69db      	ldr	r3, [r3, #28]
 80027c2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80027c6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	685b      	ldr	r3, [r3, #4]
 80027ce:	495c      	ldr	r1, [pc, #368]	; (8002940 <HAL_I2C_Init+0x274>)
 80027d0:	428b      	cmp	r3, r1
 80027d2:	d819      	bhi.n	8002808 <HAL_I2C_Init+0x13c>
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	1e59      	subs	r1, r3, #1
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	685b      	ldr	r3, [r3, #4]
 80027dc:	005b      	lsls	r3, r3, #1
 80027de:	fbb1 f3f3 	udiv	r3, r1, r3
 80027e2:	1c59      	adds	r1, r3, #1
 80027e4:	f640 73fc 	movw	r3, #4092	; 0xffc
 80027e8:	400b      	ands	r3, r1
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d00a      	beq.n	8002804 <HAL_I2C_Init+0x138>
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	1e59      	subs	r1, r3, #1
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	685b      	ldr	r3, [r3, #4]
 80027f6:	005b      	lsls	r3, r3, #1
 80027f8:	fbb1 f3f3 	udiv	r3, r1, r3
 80027fc:	3301      	adds	r3, #1
 80027fe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002802:	e051      	b.n	80028a8 <HAL_I2C_Init+0x1dc>
 8002804:	2304      	movs	r3, #4
 8002806:	e04f      	b.n	80028a8 <HAL_I2C_Init+0x1dc>
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	689b      	ldr	r3, [r3, #8]
 800280c:	2b00      	cmp	r3, #0
 800280e:	d111      	bne.n	8002834 <HAL_I2C_Init+0x168>
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	1e58      	subs	r0, r3, #1
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	6859      	ldr	r1, [r3, #4]
 8002818:	460b      	mov	r3, r1
 800281a:	005b      	lsls	r3, r3, #1
 800281c:	440b      	add	r3, r1
 800281e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002822:	3301      	adds	r3, #1
 8002824:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002828:	2b00      	cmp	r3, #0
 800282a:	bf0c      	ite	eq
 800282c:	2301      	moveq	r3, #1
 800282e:	2300      	movne	r3, #0
 8002830:	b2db      	uxtb	r3, r3
 8002832:	e012      	b.n	800285a <HAL_I2C_Init+0x18e>
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	1e58      	subs	r0, r3, #1
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	6859      	ldr	r1, [r3, #4]
 800283c:	460b      	mov	r3, r1
 800283e:	009b      	lsls	r3, r3, #2
 8002840:	440b      	add	r3, r1
 8002842:	0099      	lsls	r1, r3, #2
 8002844:	440b      	add	r3, r1
 8002846:	fbb0 f3f3 	udiv	r3, r0, r3
 800284a:	3301      	adds	r3, #1
 800284c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002850:	2b00      	cmp	r3, #0
 8002852:	bf0c      	ite	eq
 8002854:	2301      	moveq	r3, #1
 8002856:	2300      	movne	r3, #0
 8002858:	b2db      	uxtb	r3, r3
 800285a:	2b00      	cmp	r3, #0
 800285c:	d001      	beq.n	8002862 <HAL_I2C_Init+0x196>
 800285e:	2301      	movs	r3, #1
 8002860:	e022      	b.n	80028a8 <HAL_I2C_Init+0x1dc>
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	689b      	ldr	r3, [r3, #8]
 8002866:	2b00      	cmp	r3, #0
 8002868:	d10e      	bne.n	8002888 <HAL_I2C_Init+0x1bc>
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	1e58      	subs	r0, r3, #1
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	6859      	ldr	r1, [r3, #4]
 8002872:	460b      	mov	r3, r1
 8002874:	005b      	lsls	r3, r3, #1
 8002876:	440b      	add	r3, r1
 8002878:	fbb0 f3f3 	udiv	r3, r0, r3
 800287c:	3301      	adds	r3, #1
 800287e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002882:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002886:	e00f      	b.n	80028a8 <HAL_I2C_Init+0x1dc>
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	1e58      	subs	r0, r3, #1
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	6859      	ldr	r1, [r3, #4]
 8002890:	460b      	mov	r3, r1
 8002892:	009b      	lsls	r3, r3, #2
 8002894:	440b      	add	r3, r1
 8002896:	0099      	lsls	r1, r3, #2
 8002898:	440b      	add	r3, r1
 800289a:	fbb0 f3f3 	udiv	r3, r0, r3
 800289e:	3301      	adds	r3, #1
 80028a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80028a4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80028a8:	6879      	ldr	r1, [r7, #4]
 80028aa:	6809      	ldr	r1, [r1, #0]
 80028ac:	4313      	orrs	r3, r2
 80028ae:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	69da      	ldr	r2, [r3, #28]
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	6a1b      	ldr	r3, [r3, #32]
 80028c2:	431a      	orrs	r2, r3
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	430a      	orrs	r2, r1
 80028ca:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	689b      	ldr	r3, [r3, #8]
 80028d2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80028d6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80028da:	687a      	ldr	r2, [r7, #4]
 80028dc:	6911      	ldr	r1, [r2, #16]
 80028de:	687a      	ldr	r2, [r7, #4]
 80028e0:	68d2      	ldr	r2, [r2, #12]
 80028e2:	4311      	orrs	r1, r2
 80028e4:	687a      	ldr	r2, [r7, #4]
 80028e6:	6812      	ldr	r2, [r2, #0]
 80028e8:	430b      	orrs	r3, r1
 80028ea:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	68db      	ldr	r3, [r3, #12]
 80028f2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	695a      	ldr	r2, [r3, #20]
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	699b      	ldr	r3, [r3, #24]
 80028fe:	431a      	orrs	r2, r3
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	430a      	orrs	r2, r1
 8002906:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	681a      	ldr	r2, [r3, #0]
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f042 0201 	orr.w	r2, r2, #1
 8002916:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	2200      	movs	r2, #0
 800291c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	2220      	movs	r2, #32
 8002922:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	2200      	movs	r2, #0
 800292a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	2200      	movs	r2, #0
 8002930:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002934:	2300      	movs	r3, #0
}
 8002936:	4618      	mov	r0, r3
 8002938:	3710      	adds	r7, #16
 800293a:	46bd      	mov	sp, r7
 800293c:	bd80      	pop	{r7, pc}
 800293e:	bf00      	nop
 8002940:	000186a0 	.word	0x000186a0
 8002944:	001e847f 	.word	0x001e847f
 8002948:	003d08ff 	.word	0x003d08ff
 800294c:	431bde83 	.word	0x431bde83
 8002950:	10624dd3 	.word	0x10624dd3

08002954 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002954:	b580      	push	{r7, lr}
 8002956:	b088      	sub	sp, #32
 8002958:	af02      	add	r7, sp, #8
 800295a:	60f8      	str	r0, [r7, #12]
 800295c:	4608      	mov	r0, r1
 800295e:	4611      	mov	r1, r2
 8002960:	461a      	mov	r2, r3
 8002962:	4603      	mov	r3, r0
 8002964:	817b      	strh	r3, [r7, #10]
 8002966:	460b      	mov	r3, r1
 8002968:	813b      	strh	r3, [r7, #8]
 800296a:	4613      	mov	r3, r2
 800296c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800296e:	f7fe ffcb 	bl	8001908 <HAL_GetTick>
 8002972:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800297a:	b2db      	uxtb	r3, r3
 800297c:	2b20      	cmp	r3, #32
 800297e:	f040 80d9 	bne.w	8002b34 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002982:	697b      	ldr	r3, [r7, #20]
 8002984:	9300      	str	r3, [sp, #0]
 8002986:	2319      	movs	r3, #25
 8002988:	2201      	movs	r2, #1
 800298a:	496d      	ldr	r1, [pc, #436]	; (8002b40 <HAL_I2C_Mem_Write+0x1ec>)
 800298c:	68f8      	ldr	r0, [r7, #12]
 800298e:	f000 fc7f 	bl	8003290 <I2C_WaitOnFlagUntilTimeout>
 8002992:	4603      	mov	r3, r0
 8002994:	2b00      	cmp	r3, #0
 8002996:	d001      	beq.n	800299c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002998:	2302      	movs	r3, #2
 800299a:	e0cc      	b.n	8002b36 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80029a2:	2b01      	cmp	r3, #1
 80029a4:	d101      	bne.n	80029aa <HAL_I2C_Mem_Write+0x56>
 80029a6:	2302      	movs	r3, #2
 80029a8:	e0c5      	b.n	8002b36 <HAL_I2C_Mem_Write+0x1e2>
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	2201      	movs	r2, #1
 80029ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f003 0301 	and.w	r3, r3, #1
 80029bc:	2b01      	cmp	r3, #1
 80029be:	d007      	beq.n	80029d0 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	681a      	ldr	r2, [r3, #0]
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f042 0201 	orr.w	r2, r2, #1
 80029ce:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	681a      	ldr	r2, [r3, #0]
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80029de:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	2221      	movs	r2, #33	; 0x21
 80029e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	2240      	movs	r2, #64	; 0x40
 80029ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	2200      	movs	r2, #0
 80029f4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	6a3a      	ldr	r2, [r7, #32]
 80029fa:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002a00:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a06:	b29a      	uxth	r2, r3
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	4a4d      	ldr	r2, [pc, #308]	; (8002b44 <HAL_I2C_Mem_Write+0x1f0>)
 8002a10:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002a12:	88f8      	ldrh	r0, [r7, #6]
 8002a14:	893a      	ldrh	r2, [r7, #8]
 8002a16:	8979      	ldrh	r1, [r7, #10]
 8002a18:	697b      	ldr	r3, [r7, #20]
 8002a1a:	9301      	str	r3, [sp, #4]
 8002a1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a1e:	9300      	str	r3, [sp, #0]
 8002a20:	4603      	mov	r3, r0
 8002a22:	68f8      	ldr	r0, [r7, #12]
 8002a24:	f000 fab6 	bl	8002f94 <I2C_RequestMemoryWrite>
 8002a28:	4603      	mov	r3, r0
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d052      	beq.n	8002ad4 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002a2e:	2301      	movs	r3, #1
 8002a30:	e081      	b.n	8002b36 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002a32:	697a      	ldr	r2, [r7, #20]
 8002a34:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002a36:	68f8      	ldr	r0, [r7, #12]
 8002a38:	f000 fd00 	bl	800343c <I2C_WaitOnTXEFlagUntilTimeout>
 8002a3c:	4603      	mov	r3, r0
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d00d      	beq.n	8002a5e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a46:	2b04      	cmp	r3, #4
 8002a48:	d107      	bne.n	8002a5a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	681a      	ldr	r2, [r3, #0]
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a58:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002a5a:	2301      	movs	r3, #1
 8002a5c:	e06b      	b.n	8002b36 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a62:	781a      	ldrb	r2, [r3, #0]
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a6e:	1c5a      	adds	r2, r3, #1
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a78:	3b01      	subs	r3, #1
 8002a7a:	b29a      	uxth	r2, r3
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a84:	b29b      	uxth	r3, r3
 8002a86:	3b01      	subs	r3, #1
 8002a88:	b29a      	uxth	r2, r3
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	695b      	ldr	r3, [r3, #20]
 8002a94:	f003 0304 	and.w	r3, r3, #4
 8002a98:	2b04      	cmp	r3, #4
 8002a9a:	d11b      	bne.n	8002ad4 <HAL_I2C_Mem_Write+0x180>
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d017      	beq.n	8002ad4 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aa8:	781a      	ldrb	r2, [r3, #0]
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ab4:	1c5a      	adds	r2, r3, #1
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002abe:	3b01      	subs	r3, #1
 8002ac0:	b29a      	uxth	r2, r3
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002aca:	b29b      	uxth	r3, r3
 8002acc:	3b01      	subs	r3, #1
 8002ace:	b29a      	uxth	r2, r3
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d1aa      	bne.n	8002a32 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002adc:	697a      	ldr	r2, [r7, #20]
 8002ade:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002ae0:	68f8      	ldr	r0, [r7, #12]
 8002ae2:	f000 fcec 	bl	80034be <I2C_WaitOnBTFFlagUntilTimeout>
 8002ae6:	4603      	mov	r3, r0
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d00d      	beq.n	8002b08 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002af0:	2b04      	cmp	r3, #4
 8002af2:	d107      	bne.n	8002b04 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	681a      	ldr	r2, [r3, #0]
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b02:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002b04:	2301      	movs	r3, #1
 8002b06:	e016      	b.n	8002b36 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	681a      	ldr	r2, [r3, #0]
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b16:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	2220      	movs	r2, #32
 8002b1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	2200      	movs	r2, #0
 8002b24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002b30:	2300      	movs	r3, #0
 8002b32:	e000      	b.n	8002b36 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002b34:	2302      	movs	r3, #2
  }
}
 8002b36:	4618      	mov	r0, r3
 8002b38:	3718      	adds	r7, #24
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	bd80      	pop	{r7, pc}
 8002b3e:	bf00      	nop
 8002b40:	00100002 	.word	0x00100002
 8002b44:	ffff0000 	.word	0xffff0000

08002b48 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	b08c      	sub	sp, #48	; 0x30
 8002b4c:	af02      	add	r7, sp, #8
 8002b4e:	60f8      	str	r0, [r7, #12]
 8002b50:	4608      	mov	r0, r1
 8002b52:	4611      	mov	r1, r2
 8002b54:	461a      	mov	r2, r3
 8002b56:	4603      	mov	r3, r0
 8002b58:	817b      	strh	r3, [r7, #10]
 8002b5a:	460b      	mov	r3, r1
 8002b5c:	813b      	strh	r3, [r7, #8]
 8002b5e:	4613      	mov	r3, r2
 8002b60:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002b62:	f7fe fed1 	bl	8001908 <HAL_GetTick>
 8002b66:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b6e:	b2db      	uxtb	r3, r3
 8002b70:	2b20      	cmp	r3, #32
 8002b72:	f040 8208 	bne.w	8002f86 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002b76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b78:	9300      	str	r3, [sp, #0]
 8002b7a:	2319      	movs	r3, #25
 8002b7c:	2201      	movs	r2, #1
 8002b7e:	497b      	ldr	r1, [pc, #492]	; (8002d6c <HAL_I2C_Mem_Read+0x224>)
 8002b80:	68f8      	ldr	r0, [r7, #12]
 8002b82:	f000 fb85 	bl	8003290 <I2C_WaitOnFlagUntilTimeout>
 8002b86:	4603      	mov	r3, r0
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d001      	beq.n	8002b90 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8002b8c:	2302      	movs	r3, #2
 8002b8e:	e1fb      	b.n	8002f88 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b96:	2b01      	cmp	r3, #1
 8002b98:	d101      	bne.n	8002b9e <HAL_I2C_Mem_Read+0x56>
 8002b9a:	2302      	movs	r3, #2
 8002b9c:	e1f4      	b.n	8002f88 <HAL_I2C_Mem_Read+0x440>
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	2201      	movs	r2, #1
 8002ba2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f003 0301 	and.w	r3, r3, #1
 8002bb0:	2b01      	cmp	r3, #1
 8002bb2:	d007      	beq.n	8002bc4 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	681a      	ldr	r2, [r3, #0]
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f042 0201 	orr.w	r2, r2, #1
 8002bc2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	681a      	ldr	r2, [r3, #0]
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002bd2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	2222      	movs	r2, #34	; 0x22
 8002bd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	2240      	movs	r2, #64	; 0x40
 8002be0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	2200      	movs	r2, #0
 8002be8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002bee:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8002bf4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bfa:	b29a      	uxth	r2, r3
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	4a5b      	ldr	r2, [pc, #364]	; (8002d70 <HAL_I2C_Mem_Read+0x228>)
 8002c04:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002c06:	88f8      	ldrh	r0, [r7, #6]
 8002c08:	893a      	ldrh	r2, [r7, #8]
 8002c0a:	8979      	ldrh	r1, [r7, #10]
 8002c0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c0e:	9301      	str	r3, [sp, #4]
 8002c10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c12:	9300      	str	r3, [sp, #0]
 8002c14:	4603      	mov	r3, r0
 8002c16:	68f8      	ldr	r0, [r7, #12]
 8002c18:	f000 fa52 	bl	80030c0 <I2C_RequestMemoryRead>
 8002c1c:	4603      	mov	r3, r0
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d001      	beq.n	8002c26 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8002c22:	2301      	movs	r3, #1
 8002c24:	e1b0      	b.n	8002f88 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d113      	bne.n	8002c56 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c2e:	2300      	movs	r3, #0
 8002c30:	623b      	str	r3, [r7, #32]
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	695b      	ldr	r3, [r3, #20]
 8002c38:	623b      	str	r3, [r7, #32]
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	699b      	ldr	r3, [r3, #24]
 8002c40:	623b      	str	r3, [r7, #32]
 8002c42:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	681a      	ldr	r2, [r3, #0]
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c52:	601a      	str	r2, [r3, #0]
 8002c54:	e184      	b.n	8002f60 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c5a:	2b01      	cmp	r3, #1
 8002c5c:	d11b      	bne.n	8002c96 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	681a      	ldr	r2, [r3, #0]
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002c6c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c6e:	2300      	movs	r3, #0
 8002c70:	61fb      	str	r3, [r7, #28]
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	695b      	ldr	r3, [r3, #20]
 8002c78:	61fb      	str	r3, [r7, #28]
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	699b      	ldr	r3, [r3, #24]
 8002c80:	61fb      	str	r3, [r7, #28]
 8002c82:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	681a      	ldr	r2, [r3, #0]
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c92:	601a      	str	r2, [r3, #0]
 8002c94:	e164      	b.n	8002f60 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c9a:	2b02      	cmp	r3, #2
 8002c9c:	d11b      	bne.n	8002cd6 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	681a      	ldr	r2, [r3, #0]
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002cac:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	681a      	ldr	r2, [r3, #0]
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002cbc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002cbe:	2300      	movs	r3, #0
 8002cc0:	61bb      	str	r3, [r7, #24]
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	695b      	ldr	r3, [r3, #20]
 8002cc8:	61bb      	str	r3, [r7, #24]
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	699b      	ldr	r3, [r3, #24]
 8002cd0:	61bb      	str	r3, [r7, #24]
 8002cd2:	69bb      	ldr	r3, [r7, #24]
 8002cd4:	e144      	b.n	8002f60 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002cd6:	2300      	movs	r3, #0
 8002cd8:	617b      	str	r3, [r7, #20]
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	695b      	ldr	r3, [r3, #20]
 8002ce0:	617b      	str	r3, [r7, #20]
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	699b      	ldr	r3, [r3, #24]
 8002ce8:	617b      	str	r3, [r7, #20]
 8002cea:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002cec:	e138      	b.n	8002f60 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cf2:	2b03      	cmp	r3, #3
 8002cf4:	f200 80f1 	bhi.w	8002eda <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cfc:	2b01      	cmp	r3, #1
 8002cfe:	d123      	bne.n	8002d48 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d02:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002d04:	68f8      	ldr	r0, [r7, #12]
 8002d06:	f000 fc1b 	bl	8003540 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002d0a:	4603      	mov	r3, r0
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d001      	beq.n	8002d14 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8002d10:	2301      	movs	r3, #1
 8002d12:	e139      	b.n	8002f88 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	691a      	ldr	r2, [r3, #16]
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d1e:	b2d2      	uxtb	r2, r2
 8002d20:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d26:	1c5a      	adds	r2, r3, #1
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d30:	3b01      	subs	r3, #1
 8002d32:	b29a      	uxth	r2, r3
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d3c:	b29b      	uxth	r3, r3
 8002d3e:	3b01      	subs	r3, #1
 8002d40:	b29a      	uxth	r2, r3
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002d46:	e10b      	b.n	8002f60 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d4c:	2b02      	cmp	r3, #2
 8002d4e:	d14e      	bne.n	8002dee <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002d50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d52:	9300      	str	r3, [sp, #0]
 8002d54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d56:	2200      	movs	r2, #0
 8002d58:	4906      	ldr	r1, [pc, #24]	; (8002d74 <HAL_I2C_Mem_Read+0x22c>)
 8002d5a:	68f8      	ldr	r0, [r7, #12]
 8002d5c:	f000 fa98 	bl	8003290 <I2C_WaitOnFlagUntilTimeout>
 8002d60:	4603      	mov	r3, r0
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d008      	beq.n	8002d78 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8002d66:	2301      	movs	r3, #1
 8002d68:	e10e      	b.n	8002f88 <HAL_I2C_Mem_Read+0x440>
 8002d6a:	bf00      	nop
 8002d6c:	00100002 	.word	0x00100002
 8002d70:	ffff0000 	.word	0xffff0000
 8002d74:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	681a      	ldr	r2, [r3, #0]
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d86:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	691a      	ldr	r2, [r3, #16]
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d92:	b2d2      	uxtb	r2, r2
 8002d94:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d9a:	1c5a      	adds	r2, r3, #1
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002da4:	3b01      	subs	r3, #1
 8002da6:	b29a      	uxth	r2, r3
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002db0:	b29b      	uxth	r3, r3
 8002db2:	3b01      	subs	r3, #1
 8002db4:	b29a      	uxth	r2, r3
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	691a      	ldr	r2, [r3, #16]
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dc4:	b2d2      	uxtb	r2, r2
 8002dc6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dcc:	1c5a      	adds	r2, r3, #1
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002dd6:	3b01      	subs	r3, #1
 8002dd8:	b29a      	uxth	r2, r3
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002de2:	b29b      	uxth	r3, r3
 8002de4:	3b01      	subs	r3, #1
 8002de6:	b29a      	uxth	r2, r3
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002dec:	e0b8      	b.n	8002f60 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002dee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002df0:	9300      	str	r3, [sp, #0]
 8002df2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002df4:	2200      	movs	r2, #0
 8002df6:	4966      	ldr	r1, [pc, #408]	; (8002f90 <HAL_I2C_Mem_Read+0x448>)
 8002df8:	68f8      	ldr	r0, [r7, #12]
 8002dfa:	f000 fa49 	bl	8003290 <I2C_WaitOnFlagUntilTimeout>
 8002dfe:	4603      	mov	r3, r0
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d001      	beq.n	8002e08 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8002e04:	2301      	movs	r3, #1
 8002e06:	e0bf      	b.n	8002f88 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	681a      	ldr	r2, [r3, #0]
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002e16:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	691a      	ldr	r2, [r3, #16]
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e22:	b2d2      	uxtb	r2, r2
 8002e24:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e2a:	1c5a      	adds	r2, r3, #1
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e34:	3b01      	subs	r3, #1
 8002e36:	b29a      	uxth	r2, r3
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e40:	b29b      	uxth	r3, r3
 8002e42:	3b01      	subs	r3, #1
 8002e44:	b29a      	uxth	r2, r3
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002e4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e4c:	9300      	str	r3, [sp, #0]
 8002e4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e50:	2200      	movs	r2, #0
 8002e52:	494f      	ldr	r1, [pc, #316]	; (8002f90 <HAL_I2C_Mem_Read+0x448>)
 8002e54:	68f8      	ldr	r0, [r7, #12]
 8002e56:	f000 fa1b 	bl	8003290 <I2C_WaitOnFlagUntilTimeout>
 8002e5a:	4603      	mov	r3, r0
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d001      	beq.n	8002e64 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8002e60:	2301      	movs	r3, #1
 8002e62:	e091      	b.n	8002f88 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	681a      	ldr	r2, [r3, #0]
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e72:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	691a      	ldr	r2, [r3, #16]
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e7e:	b2d2      	uxtb	r2, r2
 8002e80:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e86:	1c5a      	adds	r2, r3, #1
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e90:	3b01      	subs	r3, #1
 8002e92:	b29a      	uxth	r2, r3
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e9c:	b29b      	uxth	r3, r3
 8002e9e:	3b01      	subs	r3, #1
 8002ea0:	b29a      	uxth	r2, r3
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	691a      	ldr	r2, [r3, #16]
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eb0:	b2d2      	uxtb	r2, r2
 8002eb2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eb8:	1c5a      	adds	r2, r3, #1
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ec2:	3b01      	subs	r3, #1
 8002ec4:	b29a      	uxth	r2, r3
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ece:	b29b      	uxth	r3, r3
 8002ed0:	3b01      	subs	r3, #1
 8002ed2:	b29a      	uxth	r2, r3
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002ed8:	e042      	b.n	8002f60 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002eda:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002edc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002ede:	68f8      	ldr	r0, [r7, #12]
 8002ee0:	f000 fb2e 	bl	8003540 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002ee4:	4603      	mov	r3, r0
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d001      	beq.n	8002eee <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8002eea:	2301      	movs	r3, #1
 8002eec:	e04c      	b.n	8002f88 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	691a      	ldr	r2, [r3, #16]
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ef8:	b2d2      	uxtb	r2, r2
 8002efa:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f00:	1c5a      	adds	r2, r3, #1
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f0a:	3b01      	subs	r3, #1
 8002f0c:	b29a      	uxth	r2, r3
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f16:	b29b      	uxth	r3, r3
 8002f18:	3b01      	subs	r3, #1
 8002f1a:	b29a      	uxth	r2, r3
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	695b      	ldr	r3, [r3, #20]
 8002f26:	f003 0304 	and.w	r3, r3, #4
 8002f2a:	2b04      	cmp	r3, #4
 8002f2c:	d118      	bne.n	8002f60 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	691a      	ldr	r2, [r3, #16]
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f38:	b2d2      	uxtb	r2, r2
 8002f3a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f40:	1c5a      	adds	r2, r3, #1
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f4a:	3b01      	subs	r3, #1
 8002f4c:	b29a      	uxth	r2, r3
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f56:	b29b      	uxth	r3, r3
 8002f58:	3b01      	subs	r3, #1
 8002f5a:	b29a      	uxth	r2, r3
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	f47f aec2 	bne.w	8002cee <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	2220      	movs	r2, #32
 8002f6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	2200      	movs	r2, #0
 8002f76:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002f82:	2300      	movs	r3, #0
 8002f84:	e000      	b.n	8002f88 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8002f86:	2302      	movs	r3, #2
  }
}
 8002f88:	4618      	mov	r0, r3
 8002f8a:	3728      	adds	r7, #40	; 0x28
 8002f8c:	46bd      	mov	sp, r7
 8002f8e:	bd80      	pop	{r7, pc}
 8002f90:	00010004 	.word	0x00010004

08002f94 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002f94:	b580      	push	{r7, lr}
 8002f96:	b088      	sub	sp, #32
 8002f98:	af02      	add	r7, sp, #8
 8002f9a:	60f8      	str	r0, [r7, #12]
 8002f9c:	4608      	mov	r0, r1
 8002f9e:	4611      	mov	r1, r2
 8002fa0:	461a      	mov	r2, r3
 8002fa2:	4603      	mov	r3, r0
 8002fa4:	817b      	strh	r3, [r7, #10]
 8002fa6:	460b      	mov	r3, r1
 8002fa8:	813b      	strh	r3, [r7, #8]
 8002faa:	4613      	mov	r3, r2
 8002fac:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	681a      	ldr	r2, [r3, #0]
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002fbc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002fbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fc0:	9300      	str	r3, [sp, #0]
 8002fc2:	6a3b      	ldr	r3, [r7, #32]
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002fca:	68f8      	ldr	r0, [r7, #12]
 8002fcc:	f000 f960 	bl	8003290 <I2C_WaitOnFlagUntilTimeout>
 8002fd0:	4603      	mov	r3, r0
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d00d      	beq.n	8002ff2 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fe0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002fe4:	d103      	bne.n	8002fee <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002fec:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002fee:	2303      	movs	r3, #3
 8002ff0:	e05f      	b.n	80030b2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002ff2:	897b      	ldrh	r3, [r7, #10]
 8002ff4:	b2db      	uxtb	r3, r3
 8002ff6:	461a      	mov	r2, r3
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003000:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003002:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003004:	6a3a      	ldr	r2, [r7, #32]
 8003006:	492d      	ldr	r1, [pc, #180]	; (80030bc <I2C_RequestMemoryWrite+0x128>)
 8003008:	68f8      	ldr	r0, [r7, #12]
 800300a:	f000 f998 	bl	800333e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800300e:	4603      	mov	r3, r0
 8003010:	2b00      	cmp	r3, #0
 8003012:	d001      	beq.n	8003018 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003014:	2301      	movs	r3, #1
 8003016:	e04c      	b.n	80030b2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003018:	2300      	movs	r3, #0
 800301a:	617b      	str	r3, [r7, #20]
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	695b      	ldr	r3, [r3, #20]
 8003022:	617b      	str	r3, [r7, #20]
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	699b      	ldr	r3, [r3, #24]
 800302a:	617b      	str	r3, [r7, #20]
 800302c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800302e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003030:	6a39      	ldr	r1, [r7, #32]
 8003032:	68f8      	ldr	r0, [r7, #12]
 8003034:	f000 fa02 	bl	800343c <I2C_WaitOnTXEFlagUntilTimeout>
 8003038:	4603      	mov	r3, r0
 800303a:	2b00      	cmp	r3, #0
 800303c:	d00d      	beq.n	800305a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003042:	2b04      	cmp	r3, #4
 8003044:	d107      	bne.n	8003056 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	681a      	ldr	r2, [r3, #0]
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003054:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003056:	2301      	movs	r3, #1
 8003058:	e02b      	b.n	80030b2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800305a:	88fb      	ldrh	r3, [r7, #6]
 800305c:	2b01      	cmp	r3, #1
 800305e:	d105      	bne.n	800306c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003060:	893b      	ldrh	r3, [r7, #8]
 8003062:	b2da      	uxtb	r2, r3
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	611a      	str	r2, [r3, #16]
 800306a:	e021      	b.n	80030b0 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800306c:	893b      	ldrh	r3, [r7, #8]
 800306e:	0a1b      	lsrs	r3, r3, #8
 8003070:	b29b      	uxth	r3, r3
 8003072:	b2da      	uxtb	r2, r3
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800307a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800307c:	6a39      	ldr	r1, [r7, #32]
 800307e:	68f8      	ldr	r0, [r7, #12]
 8003080:	f000 f9dc 	bl	800343c <I2C_WaitOnTXEFlagUntilTimeout>
 8003084:	4603      	mov	r3, r0
 8003086:	2b00      	cmp	r3, #0
 8003088:	d00d      	beq.n	80030a6 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800308e:	2b04      	cmp	r3, #4
 8003090:	d107      	bne.n	80030a2 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	681a      	ldr	r2, [r3, #0]
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80030a0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80030a2:	2301      	movs	r3, #1
 80030a4:	e005      	b.n	80030b2 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80030a6:	893b      	ldrh	r3, [r7, #8]
 80030a8:	b2da      	uxtb	r2, r3
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80030b0:	2300      	movs	r3, #0
}
 80030b2:	4618      	mov	r0, r3
 80030b4:	3718      	adds	r7, #24
 80030b6:	46bd      	mov	sp, r7
 80030b8:	bd80      	pop	{r7, pc}
 80030ba:	bf00      	nop
 80030bc:	00010002 	.word	0x00010002

080030c0 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80030c0:	b580      	push	{r7, lr}
 80030c2:	b088      	sub	sp, #32
 80030c4:	af02      	add	r7, sp, #8
 80030c6:	60f8      	str	r0, [r7, #12]
 80030c8:	4608      	mov	r0, r1
 80030ca:	4611      	mov	r1, r2
 80030cc:	461a      	mov	r2, r3
 80030ce:	4603      	mov	r3, r0
 80030d0:	817b      	strh	r3, [r7, #10]
 80030d2:	460b      	mov	r3, r1
 80030d4:	813b      	strh	r3, [r7, #8]
 80030d6:	4613      	mov	r3, r2
 80030d8:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	681a      	ldr	r2, [r3, #0]
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80030e8:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	681a      	ldr	r2, [r3, #0]
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80030f8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80030fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030fc:	9300      	str	r3, [sp, #0]
 80030fe:	6a3b      	ldr	r3, [r7, #32]
 8003100:	2200      	movs	r2, #0
 8003102:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003106:	68f8      	ldr	r0, [r7, #12]
 8003108:	f000 f8c2 	bl	8003290 <I2C_WaitOnFlagUntilTimeout>
 800310c:	4603      	mov	r3, r0
 800310e:	2b00      	cmp	r3, #0
 8003110:	d00d      	beq.n	800312e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800311c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003120:	d103      	bne.n	800312a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003128:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800312a:	2303      	movs	r3, #3
 800312c:	e0aa      	b.n	8003284 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800312e:	897b      	ldrh	r3, [r7, #10]
 8003130:	b2db      	uxtb	r3, r3
 8003132:	461a      	mov	r2, r3
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800313c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800313e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003140:	6a3a      	ldr	r2, [r7, #32]
 8003142:	4952      	ldr	r1, [pc, #328]	; (800328c <I2C_RequestMemoryRead+0x1cc>)
 8003144:	68f8      	ldr	r0, [r7, #12]
 8003146:	f000 f8fa 	bl	800333e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800314a:	4603      	mov	r3, r0
 800314c:	2b00      	cmp	r3, #0
 800314e:	d001      	beq.n	8003154 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003150:	2301      	movs	r3, #1
 8003152:	e097      	b.n	8003284 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003154:	2300      	movs	r3, #0
 8003156:	617b      	str	r3, [r7, #20]
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	695b      	ldr	r3, [r3, #20]
 800315e:	617b      	str	r3, [r7, #20]
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	699b      	ldr	r3, [r3, #24]
 8003166:	617b      	str	r3, [r7, #20]
 8003168:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800316a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800316c:	6a39      	ldr	r1, [r7, #32]
 800316e:	68f8      	ldr	r0, [r7, #12]
 8003170:	f000 f964 	bl	800343c <I2C_WaitOnTXEFlagUntilTimeout>
 8003174:	4603      	mov	r3, r0
 8003176:	2b00      	cmp	r3, #0
 8003178:	d00d      	beq.n	8003196 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800317e:	2b04      	cmp	r3, #4
 8003180:	d107      	bne.n	8003192 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	681a      	ldr	r2, [r3, #0]
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003190:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003192:	2301      	movs	r3, #1
 8003194:	e076      	b.n	8003284 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003196:	88fb      	ldrh	r3, [r7, #6]
 8003198:	2b01      	cmp	r3, #1
 800319a:	d105      	bne.n	80031a8 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800319c:	893b      	ldrh	r3, [r7, #8]
 800319e:	b2da      	uxtb	r2, r3
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	611a      	str	r2, [r3, #16]
 80031a6:	e021      	b.n	80031ec <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80031a8:	893b      	ldrh	r3, [r7, #8]
 80031aa:	0a1b      	lsrs	r3, r3, #8
 80031ac:	b29b      	uxth	r3, r3
 80031ae:	b2da      	uxtb	r2, r3
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80031b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80031b8:	6a39      	ldr	r1, [r7, #32]
 80031ba:	68f8      	ldr	r0, [r7, #12]
 80031bc:	f000 f93e 	bl	800343c <I2C_WaitOnTXEFlagUntilTimeout>
 80031c0:	4603      	mov	r3, r0
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d00d      	beq.n	80031e2 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031ca:	2b04      	cmp	r3, #4
 80031cc:	d107      	bne.n	80031de <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	681a      	ldr	r2, [r3, #0]
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80031dc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80031de:	2301      	movs	r3, #1
 80031e0:	e050      	b.n	8003284 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80031e2:	893b      	ldrh	r3, [r7, #8]
 80031e4:	b2da      	uxtb	r2, r3
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80031ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80031ee:	6a39      	ldr	r1, [r7, #32]
 80031f0:	68f8      	ldr	r0, [r7, #12]
 80031f2:	f000 f923 	bl	800343c <I2C_WaitOnTXEFlagUntilTimeout>
 80031f6:	4603      	mov	r3, r0
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d00d      	beq.n	8003218 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003200:	2b04      	cmp	r3, #4
 8003202:	d107      	bne.n	8003214 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	681a      	ldr	r2, [r3, #0]
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003212:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003214:	2301      	movs	r3, #1
 8003216:	e035      	b.n	8003284 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	681a      	ldr	r2, [r3, #0]
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003226:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003228:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800322a:	9300      	str	r3, [sp, #0]
 800322c:	6a3b      	ldr	r3, [r7, #32]
 800322e:	2200      	movs	r2, #0
 8003230:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003234:	68f8      	ldr	r0, [r7, #12]
 8003236:	f000 f82b 	bl	8003290 <I2C_WaitOnFlagUntilTimeout>
 800323a:	4603      	mov	r3, r0
 800323c:	2b00      	cmp	r3, #0
 800323e:	d00d      	beq.n	800325c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800324a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800324e:	d103      	bne.n	8003258 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003256:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003258:	2303      	movs	r3, #3
 800325a:	e013      	b.n	8003284 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800325c:	897b      	ldrh	r3, [r7, #10]
 800325e:	b2db      	uxtb	r3, r3
 8003260:	f043 0301 	orr.w	r3, r3, #1
 8003264:	b2da      	uxtb	r2, r3
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800326c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800326e:	6a3a      	ldr	r2, [r7, #32]
 8003270:	4906      	ldr	r1, [pc, #24]	; (800328c <I2C_RequestMemoryRead+0x1cc>)
 8003272:	68f8      	ldr	r0, [r7, #12]
 8003274:	f000 f863 	bl	800333e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003278:	4603      	mov	r3, r0
 800327a:	2b00      	cmp	r3, #0
 800327c:	d001      	beq.n	8003282 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800327e:	2301      	movs	r3, #1
 8003280:	e000      	b.n	8003284 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8003282:	2300      	movs	r3, #0
}
 8003284:	4618      	mov	r0, r3
 8003286:	3718      	adds	r7, #24
 8003288:	46bd      	mov	sp, r7
 800328a:	bd80      	pop	{r7, pc}
 800328c:	00010002 	.word	0x00010002

08003290 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003290:	b580      	push	{r7, lr}
 8003292:	b084      	sub	sp, #16
 8003294:	af00      	add	r7, sp, #0
 8003296:	60f8      	str	r0, [r7, #12]
 8003298:	60b9      	str	r1, [r7, #8]
 800329a:	603b      	str	r3, [r7, #0]
 800329c:	4613      	mov	r3, r2
 800329e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80032a0:	e025      	b.n	80032ee <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80032a2:	683b      	ldr	r3, [r7, #0]
 80032a4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80032a8:	d021      	beq.n	80032ee <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80032aa:	f7fe fb2d 	bl	8001908 <HAL_GetTick>
 80032ae:	4602      	mov	r2, r0
 80032b0:	69bb      	ldr	r3, [r7, #24]
 80032b2:	1ad3      	subs	r3, r2, r3
 80032b4:	683a      	ldr	r2, [r7, #0]
 80032b6:	429a      	cmp	r2, r3
 80032b8:	d302      	bcc.n	80032c0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80032ba:	683b      	ldr	r3, [r7, #0]
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d116      	bne.n	80032ee <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	2200      	movs	r2, #0
 80032c4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	2220      	movs	r2, #32
 80032ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	2200      	movs	r2, #0
 80032d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032da:	f043 0220 	orr.w	r2, r3, #32
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	2200      	movs	r2, #0
 80032e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80032ea:	2301      	movs	r3, #1
 80032ec:	e023      	b.n	8003336 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80032ee:	68bb      	ldr	r3, [r7, #8]
 80032f0:	0c1b      	lsrs	r3, r3, #16
 80032f2:	b2db      	uxtb	r3, r3
 80032f4:	2b01      	cmp	r3, #1
 80032f6:	d10d      	bne.n	8003314 <I2C_WaitOnFlagUntilTimeout+0x84>
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	695b      	ldr	r3, [r3, #20]
 80032fe:	43da      	mvns	r2, r3
 8003300:	68bb      	ldr	r3, [r7, #8]
 8003302:	4013      	ands	r3, r2
 8003304:	b29b      	uxth	r3, r3
 8003306:	2b00      	cmp	r3, #0
 8003308:	bf0c      	ite	eq
 800330a:	2301      	moveq	r3, #1
 800330c:	2300      	movne	r3, #0
 800330e:	b2db      	uxtb	r3, r3
 8003310:	461a      	mov	r2, r3
 8003312:	e00c      	b.n	800332e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	699b      	ldr	r3, [r3, #24]
 800331a:	43da      	mvns	r2, r3
 800331c:	68bb      	ldr	r3, [r7, #8]
 800331e:	4013      	ands	r3, r2
 8003320:	b29b      	uxth	r3, r3
 8003322:	2b00      	cmp	r3, #0
 8003324:	bf0c      	ite	eq
 8003326:	2301      	moveq	r3, #1
 8003328:	2300      	movne	r3, #0
 800332a:	b2db      	uxtb	r3, r3
 800332c:	461a      	mov	r2, r3
 800332e:	79fb      	ldrb	r3, [r7, #7]
 8003330:	429a      	cmp	r2, r3
 8003332:	d0b6      	beq.n	80032a2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003334:	2300      	movs	r3, #0
}
 8003336:	4618      	mov	r0, r3
 8003338:	3710      	adds	r7, #16
 800333a:	46bd      	mov	sp, r7
 800333c:	bd80      	pop	{r7, pc}

0800333e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800333e:	b580      	push	{r7, lr}
 8003340:	b084      	sub	sp, #16
 8003342:	af00      	add	r7, sp, #0
 8003344:	60f8      	str	r0, [r7, #12]
 8003346:	60b9      	str	r1, [r7, #8]
 8003348:	607a      	str	r2, [r7, #4]
 800334a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800334c:	e051      	b.n	80033f2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	695b      	ldr	r3, [r3, #20]
 8003354:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003358:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800335c:	d123      	bne.n	80033a6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	681a      	ldr	r2, [r3, #0]
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800336c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003376:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	2200      	movs	r2, #0
 800337c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	2220      	movs	r2, #32
 8003382:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	2200      	movs	r2, #0
 800338a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003392:	f043 0204 	orr.w	r2, r3, #4
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	2200      	movs	r2, #0
 800339e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80033a2:	2301      	movs	r3, #1
 80033a4:	e046      	b.n	8003434 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80033ac:	d021      	beq.n	80033f2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80033ae:	f7fe faab 	bl	8001908 <HAL_GetTick>
 80033b2:	4602      	mov	r2, r0
 80033b4:	683b      	ldr	r3, [r7, #0]
 80033b6:	1ad3      	subs	r3, r2, r3
 80033b8:	687a      	ldr	r2, [r7, #4]
 80033ba:	429a      	cmp	r2, r3
 80033bc:	d302      	bcc.n	80033c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d116      	bne.n	80033f2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	2200      	movs	r2, #0
 80033c8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	2220      	movs	r2, #32
 80033ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	2200      	movs	r2, #0
 80033d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033de:	f043 0220 	orr.w	r2, r3, #32
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	2200      	movs	r2, #0
 80033ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80033ee:	2301      	movs	r3, #1
 80033f0:	e020      	b.n	8003434 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80033f2:	68bb      	ldr	r3, [r7, #8]
 80033f4:	0c1b      	lsrs	r3, r3, #16
 80033f6:	b2db      	uxtb	r3, r3
 80033f8:	2b01      	cmp	r3, #1
 80033fa:	d10c      	bne.n	8003416 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	695b      	ldr	r3, [r3, #20]
 8003402:	43da      	mvns	r2, r3
 8003404:	68bb      	ldr	r3, [r7, #8]
 8003406:	4013      	ands	r3, r2
 8003408:	b29b      	uxth	r3, r3
 800340a:	2b00      	cmp	r3, #0
 800340c:	bf14      	ite	ne
 800340e:	2301      	movne	r3, #1
 8003410:	2300      	moveq	r3, #0
 8003412:	b2db      	uxtb	r3, r3
 8003414:	e00b      	b.n	800342e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	699b      	ldr	r3, [r3, #24]
 800341c:	43da      	mvns	r2, r3
 800341e:	68bb      	ldr	r3, [r7, #8]
 8003420:	4013      	ands	r3, r2
 8003422:	b29b      	uxth	r3, r3
 8003424:	2b00      	cmp	r3, #0
 8003426:	bf14      	ite	ne
 8003428:	2301      	movne	r3, #1
 800342a:	2300      	moveq	r3, #0
 800342c:	b2db      	uxtb	r3, r3
 800342e:	2b00      	cmp	r3, #0
 8003430:	d18d      	bne.n	800334e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003432:	2300      	movs	r3, #0
}
 8003434:	4618      	mov	r0, r3
 8003436:	3710      	adds	r7, #16
 8003438:	46bd      	mov	sp, r7
 800343a:	bd80      	pop	{r7, pc}

0800343c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800343c:	b580      	push	{r7, lr}
 800343e:	b084      	sub	sp, #16
 8003440:	af00      	add	r7, sp, #0
 8003442:	60f8      	str	r0, [r7, #12]
 8003444:	60b9      	str	r1, [r7, #8]
 8003446:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003448:	e02d      	b.n	80034a6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800344a:	68f8      	ldr	r0, [r7, #12]
 800344c:	f000 f8ce 	bl	80035ec <I2C_IsAcknowledgeFailed>
 8003450:	4603      	mov	r3, r0
 8003452:	2b00      	cmp	r3, #0
 8003454:	d001      	beq.n	800345a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003456:	2301      	movs	r3, #1
 8003458:	e02d      	b.n	80034b6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800345a:	68bb      	ldr	r3, [r7, #8]
 800345c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003460:	d021      	beq.n	80034a6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003462:	f7fe fa51 	bl	8001908 <HAL_GetTick>
 8003466:	4602      	mov	r2, r0
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	1ad3      	subs	r3, r2, r3
 800346c:	68ba      	ldr	r2, [r7, #8]
 800346e:	429a      	cmp	r2, r3
 8003470:	d302      	bcc.n	8003478 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003472:	68bb      	ldr	r3, [r7, #8]
 8003474:	2b00      	cmp	r3, #0
 8003476:	d116      	bne.n	80034a6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	2200      	movs	r2, #0
 800347c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	2220      	movs	r2, #32
 8003482:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	2200      	movs	r2, #0
 800348a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003492:	f043 0220 	orr.w	r2, r3, #32
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	2200      	movs	r2, #0
 800349e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80034a2:	2301      	movs	r3, #1
 80034a4:	e007      	b.n	80034b6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	695b      	ldr	r3, [r3, #20]
 80034ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034b0:	2b80      	cmp	r3, #128	; 0x80
 80034b2:	d1ca      	bne.n	800344a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80034b4:	2300      	movs	r3, #0
}
 80034b6:	4618      	mov	r0, r3
 80034b8:	3710      	adds	r7, #16
 80034ba:	46bd      	mov	sp, r7
 80034bc:	bd80      	pop	{r7, pc}

080034be <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80034be:	b580      	push	{r7, lr}
 80034c0:	b084      	sub	sp, #16
 80034c2:	af00      	add	r7, sp, #0
 80034c4:	60f8      	str	r0, [r7, #12]
 80034c6:	60b9      	str	r1, [r7, #8]
 80034c8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80034ca:	e02d      	b.n	8003528 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80034cc:	68f8      	ldr	r0, [r7, #12]
 80034ce:	f000 f88d 	bl	80035ec <I2C_IsAcknowledgeFailed>
 80034d2:	4603      	mov	r3, r0
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d001      	beq.n	80034dc <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80034d8:	2301      	movs	r3, #1
 80034da:	e02d      	b.n	8003538 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80034dc:	68bb      	ldr	r3, [r7, #8]
 80034de:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80034e2:	d021      	beq.n	8003528 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80034e4:	f7fe fa10 	bl	8001908 <HAL_GetTick>
 80034e8:	4602      	mov	r2, r0
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	1ad3      	subs	r3, r2, r3
 80034ee:	68ba      	ldr	r2, [r7, #8]
 80034f0:	429a      	cmp	r2, r3
 80034f2:	d302      	bcc.n	80034fa <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80034f4:	68bb      	ldr	r3, [r7, #8]
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d116      	bne.n	8003528 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	2200      	movs	r2, #0
 80034fe:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	2220      	movs	r2, #32
 8003504:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	2200      	movs	r2, #0
 800350c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003514:	f043 0220 	orr.w	r2, r3, #32
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	2200      	movs	r2, #0
 8003520:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003524:	2301      	movs	r3, #1
 8003526:	e007      	b.n	8003538 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	695b      	ldr	r3, [r3, #20]
 800352e:	f003 0304 	and.w	r3, r3, #4
 8003532:	2b04      	cmp	r3, #4
 8003534:	d1ca      	bne.n	80034cc <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003536:	2300      	movs	r3, #0
}
 8003538:	4618      	mov	r0, r3
 800353a:	3710      	adds	r7, #16
 800353c:	46bd      	mov	sp, r7
 800353e:	bd80      	pop	{r7, pc}

08003540 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003540:	b580      	push	{r7, lr}
 8003542:	b084      	sub	sp, #16
 8003544:	af00      	add	r7, sp, #0
 8003546:	60f8      	str	r0, [r7, #12]
 8003548:	60b9      	str	r1, [r7, #8]
 800354a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800354c:	e042      	b.n	80035d4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	695b      	ldr	r3, [r3, #20]
 8003554:	f003 0310 	and.w	r3, r3, #16
 8003558:	2b10      	cmp	r3, #16
 800355a:	d119      	bne.n	8003590 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f06f 0210 	mvn.w	r2, #16
 8003564:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	2200      	movs	r2, #0
 800356a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	2220      	movs	r2, #32
 8003570:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	2200      	movs	r2, #0
 8003578:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	2200      	movs	r2, #0
 8003588:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800358c:	2301      	movs	r3, #1
 800358e:	e029      	b.n	80035e4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003590:	f7fe f9ba 	bl	8001908 <HAL_GetTick>
 8003594:	4602      	mov	r2, r0
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	1ad3      	subs	r3, r2, r3
 800359a:	68ba      	ldr	r2, [r7, #8]
 800359c:	429a      	cmp	r2, r3
 800359e:	d302      	bcc.n	80035a6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80035a0:	68bb      	ldr	r3, [r7, #8]
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d116      	bne.n	80035d4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	2200      	movs	r2, #0
 80035aa:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	2220      	movs	r2, #32
 80035b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	2200      	movs	r2, #0
 80035b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035c0:	f043 0220 	orr.w	r2, r3, #32
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	2200      	movs	r2, #0
 80035cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80035d0:	2301      	movs	r3, #1
 80035d2:	e007      	b.n	80035e4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	695b      	ldr	r3, [r3, #20]
 80035da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035de:	2b40      	cmp	r3, #64	; 0x40
 80035e0:	d1b5      	bne.n	800354e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80035e2:	2300      	movs	r3, #0
}
 80035e4:	4618      	mov	r0, r3
 80035e6:	3710      	adds	r7, #16
 80035e8:	46bd      	mov	sp, r7
 80035ea:	bd80      	pop	{r7, pc}

080035ec <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80035ec:	b480      	push	{r7}
 80035ee:	b083      	sub	sp, #12
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	695b      	ldr	r3, [r3, #20]
 80035fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80035fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003602:	d11b      	bne.n	800363c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800360c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	2200      	movs	r2, #0
 8003612:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	2220      	movs	r2, #32
 8003618:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	2200      	movs	r2, #0
 8003620:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003628:	f043 0204 	orr.w	r2, r3, #4
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	2200      	movs	r2, #0
 8003634:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003638:	2301      	movs	r3, #1
 800363a:	e000      	b.n	800363e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800363c:	2300      	movs	r3, #0
}
 800363e:	4618      	mov	r0, r3
 8003640:	370c      	adds	r7, #12
 8003642:	46bd      	mov	sp, r7
 8003644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003648:	4770      	bx	lr
	...

0800364c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800364c:	b580      	push	{r7, lr}
 800364e:	b086      	sub	sp, #24
 8003650:	af00      	add	r7, sp, #0
 8003652:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	2b00      	cmp	r3, #0
 8003658:	d101      	bne.n	800365e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800365a:	2301      	movs	r3, #1
 800365c:	e267      	b.n	8003b2e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f003 0301 	and.w	r3, r3, #1
 8003666:	2b00      	cmp	r3, #0
 8003668:	d075      	beq.n	8003756 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800366a:	4b88      	ldr	r3, [pc, #544]	; (800388c <HAL_RCC_OscConfig+0x240>)
 800366c:	689b      	ldr	r3, [r3, #8]
 800366e:	f003 030c 	and.w	r3, r3, #12
 8003672:	2b04      	cmp	r3, #4
 8003674:	d00c      	beq.n	8003690 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003676:	4b85      	ldr	r3, [pc, #532]	; (800388c <HAL_RCC_OscConfig+0x240>)
 8003678:	689b      	ldr	r3, [r3, #8]
 800367a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800367e:	2b08      	cmp	r3, #8
 8003680:	d112      	bne.n	80036a8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003682:	4b82      	ldr	r3, [pc, #520]	; (800388c <HAL_RCC_OscConfig+0x240>)
 8003684:	685b      	ldr	r3, [r3, #4]
 8003686:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800368a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800368e:	d10b      	bne.n	80036a8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003690:	4b7e      	ldr	r3, [pc, #504]	; (800388c <HAL_RCC_OscConfig+0x240>)
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003698:	2b00      	cmp	r3, #0
 800369a:	d05b      	beq.n	8003754 <HAL_RCC_OscConfig+0x108>
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	685b      	ldr	r3, [r3, #4]
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d157      	bne.n	8003754 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80036a4:	2301      	movs	r3, #1
 80036a6:	e242      	b.n	8003b2e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	685b      	ldr	r3, [r3, #4]
 80036ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80036b0:	d106      	bne.n	80036c0 <HAL_RCC_OscConfig+0x74>
 80036b2:	4b76      	ldr	r3, [pc, #472]	; (800388c <HAL_RCC_OscConfig+0x240>)
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	4a75      	ldr	r2, [pc, #468]	; (800388c <HAL_RCC_OscConfig+0x240>)
 80036b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80036bc:	6013      	str	r3, [r2, #0]
 80036be:	e01d      	b.n	80036fc <HAL_RCC_OscConfig+0xb0>
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	685b      	ldr	r3, [r3, #4]
 80036c4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80036c8:	d10c      	bne.n	80036e4 <HAL_RCC_OscConfig+0x98>
 80036ca:	4b70      	ldr	r3, [pc, #448]	; (800388c <HAL_RCC_OscConfig+0x240>)
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	4a6f      	ldr	r2, [pc, #444]	; (800388c <HAL_RCC_OscConfig+0x240>)
 80036d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80036d4:	6013      	str	r3, [r2, #0]
 80036d6:	4b6d      	ldr	r3, [pc, #436]	; (800388c <HAL_RCC_OscConfig+0x240>)
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	4a6c      	ldr	r2, [pc, #432]	; (800388c <HAL_RCC_OscConfig+0x240>)
 80036dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80036e0:	6013      	str	r3, [r2, #0]
 80036e2:	e00b      	b.n	80036fc <HAL_RCC_OscConfig+0xb0>
 80036e4:	4b69      	ldr	r3, [pc, #420]	; (800388c <HAL_RCC_OscConfig+0x240>)
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	4a68      	ldr	r2, [pc, #416]	; (800388c <HAL_RCC_OscConfig+0x240>)
 80036ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80036ee:	6013      	str	r3, [r2, #0]
 80036f0:	4b66      	ldr	r3, [pc, #408]	; (800388c <HAL_RCC_OscConfig+0x240>)
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	4a65      	ldr	r2, [pc, #404]	; (800388c <HAL_RCC_OscConfig+0x240>)
 80036f6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80036fa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	685b      	ldr	r3, [r3, #4]
 8003700:	2b00      	cmp	r3, #0
 8003702:	d013      	beq.n	800372c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003704:	f7fe f900 	bl	8001908 <HAL_GetTick>
 8003708:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800370a:	e008      	b.n	800371e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800370c:	f7fe f8fc 	bl	8001908 <HAL_GetTick>
 8003710:	4602      	mov	r2, r0
 8003712:	693b      	ldr	r3, [r7, #16]
 8003714:	1ad3      	subs	r3, r2, r3
 8003716:	2b64      	cmp	r3, #100	; 0x64
 8003718:	d901      	bls.n	800371e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800371a:	2303      	movs	r3, #3
 800371c:	e207      	b.n	8003b2e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800371e:	4b5b      	ldr	r3, [pc, #364]	; (800388c <HAL_RCC_OscConfig+0x240>)
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003726:	2b00      	cmp	r3, #0
 8003728:	d0f0      	beq.n	800370c <HAL_RCC_OscConfig+0xc0>
 800372a:	e014      	b.n	8003756 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800372c:	f7fe f8ec 	bl	8001908 <HAL_GetTick>
 8003730:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003732:	e008      	b.n	8003746 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003734:	f7fe f8e8 	bl	8001908 <HAL_GetTick>
 8003738:	4602      	mov	r2, r0
 800373a:	693b      	ldr	r3, [r7, #16]
 800373c:	1ad3      	subs	r3, r2, r3
 800373e:	2b64      	cmp	r3, #100	; 0x64
 8003740:	d901      	bls.n	8003746 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003742:	2303      	movs	r3, #3
 8003744:	e1f3      	b.n	8003b2e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003746:	4b51      	ldr	r3, [pc, #324]	; (800388c <HAL_RCC_OscConfig+0x240>)
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800374e:	2b00      	cmp	r3, #0
 8003750:	d1f0      	bne.n	8003734 <HAL_RCC_OscConfig+0xe8>
 8003752:	e000      	b.n	8003756 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003754:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f003 0302 	and.w	r3, r3, #2
 800375e:	2b00      	cmp	r3, #0
 8003760:	d063      	beq.n	800382a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003762:	4b4a      	ldr	r3, [pc, #296]	; (800388c <HAL_RCC_OscConfig+0x240>)
 8003764:	689b      	ldr	r3, [r3, #8]
 8003766:	f003 030c 	and.w	r3, r3, #12
 800376a:	2b00      	cmp	r3, #0
 800376c:	d00b      	beq.n	8003786 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800376e:	4b47      	ldr	r3, [pc, #284]	; (800388c <HAL_RCC_OscConfig+0x240>)
 8003770:	689b      	ldr	r3, [r3, #8]
 8003772:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003776:	2b08      	cmp	r3, #8
 8003778:	d11c      	bne.n	80037b4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800377a:	4b44      	ldr	r3, [pc, #272]	; (800388c <HAL_RCC_OscConfig+0x240>)
 800377c:	685b      	ldr	r3, [r3, #4]
 800377e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003782:	2b00      	cmp	r3, #0
 8003784:	d116      	bne.n	80037b4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003786:	4b41      	ldr	r3, [pc, #260]	; (800388c <HAL_RCC_OscConfig+0x240>)
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f003 0302 	and.w	r3, r3, #2
 800378e:	2b00      	cmp	r3, #0
 8003790:	d005      	beq.n	800379e <HAL_RCC_OscConfig+0x152>
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	68db      	ldr	r3, [r3, #12]
 8003796:	2b01      	cmp	r3, #1
 8003798:	d001      	beq.n	800379e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800379a:	2301      	movs	r3, #1
 800379c:	e1c7      	b.n	8003b2e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800379e:	4b3b      	ldr	r3, [pc, #236]	; (800388c <HAL_RCC_OscConfig+0x240>)
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	691b      	ldr	r3, [r3, #16]
 80037aa:	00db      	lsls	r3, r3, #3
 80037ac:	4937      	ldr	r1, [pc, #220]	; (800388c <HAL_RCC_OscConfig+0x240>)
 80037ae:	4313      	orrs	r3, r2
 80037b0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80037b2:	e03a      	b.n	800382a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	68db      	ldr	r3, [r3, #12]
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d020      	beq.n	80037fe <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80037bc:	4b34      	ldr	r3, [pc, #208]	; (8003890 <HAL_RCC_OscConfig+0x244>)
 80037be:	2201      	movs	r2, #1
 80037c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037c2:	f7fe f8a1 	bl	8001908 <HAL_GetTick>
 80037c6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037c8:	e008      	b.n	80037dc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80037ca:	f7fe f89d 	bl	8001908 <HAL_GetTick>
 80037ce:	4602      	mov	r2, r0
 80037d0:	693b      	ldr	r3, [r7, #16]
 80037d2:	1ad3      	subs	r3, r2, r3
 80037d4:	2b02      	cmp	r3, #2
 80037d6:	d901      	bls.n	80037dc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80037d8:	2303      	movs	r3, #3
 80037da:	e1a8      	b.n	8003b2e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037dc:	4b2b      	ldr	r3, [pc, #172]	; (800388c <HAL_RCC_OscConfig+0x240>)
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f003 0302 	and.w	r3, r3, #2
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d0f0      	beq.n	80037ca <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80037e8:	4b28      	ldr	r3, [pc, #160]	; (800388c <HAL_RCC_OscConfig+0x240>)
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	691b      	ldr	r3, [r3, #16]
 80037f4:	00db      	lsls	r3, r3, #3
 80037f6:	4925      	ldr	r1, [pc, #148]	; (800388c <HAL_RCC_OscConfig+0x240>)
 80037f8:	4313      	orrs	r3, r2
 80037fa:	600b      	str	r3, [r1, #0]
 80037fc:	e015      	b.n	800382a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80037fe:	4b24      	ldr	r3, [pc, #144]	; (8003890 <HAL_RCC_OscConfig+0x244>)
 8003800:	2200      	movs	r2, #0
 8003802:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003804:	f7fe f880 	bl	8001908 <HAL_GetTick>
 8003808:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800380a:	e008      	b.n	800381e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800380c:	f7fe f87c 	bl	8001908 <HAL_GetTick>
 8003810:	4602      	mov	r2, r0
 8003812:	693b      	ldr	r3, [r7, #16]
 8003814:	1ad3      	subs	r3, r2, r3
 8003816:	2b02      	cmp	r3, #2
 8003818:	d901      	bls.n	800381e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800381a:	2303      	movs	r3, #3
 800381c:	e187      	b.n	8003b2e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800381e:	4b1b      	ldr	r3, [pc, #108]	; (800388c <HAL_RCC_OscConfig+0x240>)
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f003 0302 	and.w	r3, r3, #2
 8003826:	2b00      	cmp	r3, #0
 8003828:	d1f0      	bne.n	800380c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f003 0308 	and.w	r3, r3, #8
 8003832:	2b00      	cmp	r3, #0
 8003834:	d036      	beq.n	80038a4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	695b      	ldr	r3, [r3, #20]
 800383a:	2b00      	cmp	r3, #0
 800383c:	d016      	beq.n	800386c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800383e:	4b15      	ldr	r3, [pc, #84]	; (8003894 <HAL_RCC_OscConfig+0x248>)
 8003840:	2201      	movs	r2, #1
 8003842:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003844:	f7fe f860 	bl	8001908 <HAL_GetTick>
 8003848:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800384a:	e008      	b.n	800385e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800384c:	f7fe f85c 	bl	8001908 <HAL_GetTick>
 8003850:	4602      	mov	r2, r0
 8003852:	693b      	ldr	r3, [r7, #16]
 8003854:	1ad3      	subs	r3, r2, r3
 8003856:	2b02      	cmp	r3, #2
 8003858:	d901      	bls.n	800385e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800385a:	2303      	movs	r3, #3
 800385c:	e167      	b.n	8003b2e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800385e:	4b0b      	ldr	r3, [pc, #44]	; (800388c <HAL_RCC_OscConfig+0x240>)
 8003860:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003862:	f003 0302 	and.w	r3, r3, #2
 8003866:	2b00      	cmp	r3, #0
 8003868:	d0f0      	beq.n	800384c <HAL_RCC_OscConfig+0x200>
 800386a:	e01b      	b.n	80038a4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800386c:	4b09      	ldr	r3, [pc, #36]	; (8003894 <HAL_RCC_OscConfig+0x248>)
 800386e:	2200      	movs	r2, #0
 8003870:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003872:	f7fe f849 	bl	8001908 <HAL_GetTick>
 8003876:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003878:	e00e      	b.n	8003898 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800387a:	f7fe f845 	bl	8001908 <HAL_GetTick>
 800387e:	4602      	mov	r2, r0
 8003880:	693b      	ldr	r3, [r7, #16]
 8003882:	1ad3      	subs	r3, r2, r3
 8003884:	2b02      	cmp	r3, #2
 8003886:	d907      	bls.n	8003898 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003888:	2303      	movs	r3, #3
 800388a:	e150      	b.n	8003b2e <HAL_RCC_OscConfig+0x4e2>
 800388c:	40023800 	.word	0x40023800
 8003890:	42470000 	.word	0x42470000
 8003894:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003898:	4b88      	ldr	r3, [pc, #544]	; (8003abc <HAL_RCC_OscConfig+0x470>)
 800389a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800389c:	f003 0302 	and.w	r3, r3, #2
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d1ea      	bne.n	800387a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f003 0304 	and.w	r3, r3, #4
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	f000 8097 	beq.w	80039e0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80038b2:	2300      	movs	r3, #0
 80038b4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80038b6:	4b81      	ldr	r3, [pc, #516]	; (8003abc <HAL_RCC_OscConfig+0x470>)
 80038b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d10f      	bne.n	80038e2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80038c2:	2300      	movs	r3, #0
 80038c4:	60bb      	str	r3, [r7, #8]
 80038c6:	4b7d      	ldr	r3, [pc, #500]	; (8003abc <HAL_RCC_OscConfig+0x470>)
 80038c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038ca:	4a7c      	ldr	r2, [pc, #496]	; (8003abc <HAL_RCC_OscConfig+0x470>)
 80038cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80038d0:	6413      	str	r3, [r2, #64]	; 0x40
 80038d2:	4b7a      	ldr	r3, [pc, #488]	; (8003abc <HAL_RCC_OscConfig+0x470>)
 80038d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038da:	60bb      	str	r3, [r7, #8]
 80038dc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80038de:	2301      	movs	r3, #1
 80038e0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038e2:	4b77      	ldr	r3, [pc, #476]	; (8003ac0 <HAL_RCC_OscConfig+0x474>)
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d118      	bne.n	8003920 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80038ee:	4b74      	ldr	r3, [pc, #464]	; (8003ac0 <HAL_RCC_OscConfig+0x474>)
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	4a73      	ldr	r2, [pc, #460]	; (8003ac0 <HAL_RCC_OscConfig+0x474>)
 80038f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80038f8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80038fa:	f7fe f805 	bl	8001908 <HAL_GetTick>
 80038fe:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003900:	e008      	b.n	8003914 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003902:	f7fe f801 	bl	8001908 <HAL_GetTick>
 8003906:	4602      	mov	r2, r0
 8003908:	693b      	ldr	r3, [r7, #16]
 800390a:	1ad3      	subs	r3, r2, r3
 800390c:	2b02      	cmp	r3, #2
 800390e:	d901      	bls.n	8003914 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003910:	2303      	movs	r3, #3
 8003912:	e10c      	b.n	8003b2e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003914:	4b6a      	ldr	r3, [pc, #424]	; (8003ac0 <HAL_RCC_OscConfig+0x474>)
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800391c:	2b00      	cmp	r3, #0
 800391e:	d0f0      	beq.n	8003902 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	689b      	ldr	r3, [r3, #8]
 8003924:	2b01      	cmp	r3, #1
 8003926:	d106      	bne.n	8003936 <HAL_RCC_OscConfig+0x2ea>
 8003928:	4b64      	ldr	r3, [pc, #400]	; (8003abc <HAL_RCC_OscConfig+0x470>)
 800392a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800392c:	4a63      	ldr	r2, [pc, #396]	; (8003abc <HAL_RCC_OscConfig+0x470>)
 800392e:	f043 0301 	orr.w	r3, r3, #1
 8003932:	6713      	str	r3, [r2, #112]	; 0x70
 8003934:	e01c      	b.n	8003970 <HAL_RCC_OscConfig+0x324>
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	689b      	ldr	r3, [r3, #8]
 800393a:	2b05      	cmp	r3, #5
 800393c:	d10c      	bne.n	8003958 <HAL_RCC_OscConfig+0x30c>
 800393e:	4b5f      	ldr	r3, [pc, #380]	; (8003abc <HAL_RCC_OscConfig+0x470>)
 8003940:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003942:	4a5e      	ldr	r2, [pc, #376]	; (8003abc <HAL_RCC_OscConfig+0x470>)
 8003944:	f043 0304 	orr.w	r3, r3, #4
 8003948:	6713      	str	r3, [r2, #112]	; 0x70
 800394a:	4b5c      	ldr	r3, [pc, #368]	; (8003abc <HAL_RCC_OscConfig+0x470>)
 800394c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800394e:	4a5b      	ldr	r2, [pc, #364]	; (8003abc <HAL_RCC_OscConfig+0x470>)
 8003950:	f043 0301 	orr.w	r3, r3, #1
 8003954:	6713      	str	r3, [r2, #112]	; 0x70
 8003956:	e00b      	b.n	8003970 <HAL_RCC_OscConfig+0x324>
 8003958:	4b58      	ldr	r3, [pc, #352]	; (8003abc <HAL_RCC_OscConfig+0x470>)
 800395a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800395c:	4a57      	ldr	r2, [pc, #348]	; (8003abc <HAL_RCC_OscConfig+0x470>)
 800395e:	f023 0301 	bic.w	r3, r3, #1
 8003962:	6713      	str	r3, [r2, #112]	; 0x70
 8003964:	4b55      	ldr	r3, [pc, #340]	; (8003abc <HAL_RCC_OscConfig+0x470>)
 8003966:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003968:	4a54      	ldr	r2, [pc, #336]	; (8003abc <HAL_RCC_OscConfig+0x470>)
 800396a:	f023 0304 	bic.w	r3, r3, #4
 800396e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	689b      	ldr	r3, [r3, #8]
 8003974:	2b00      	cmp	r3, #0
 8003976:	d015      	beq.n	80039a4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003978:	f7fd ffc6 	bl	8001908 <HAL_GetTick>
 800397c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800397e:	e00a      	b.n	8003996 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003980:	f7fd ffc2 	bl	8001908 <HAL_GetTick>
 8003984:	4602      	mov	r2, r0
 8003986:	693b      	ldr	r3, [r7, #16]
 8003988:	1ad3      	subs	r3, r2, r3
 800398a:	f241 3288 	movw	r2, #5000	; 0x1388
 800398e:	4293      	cmp	r3, r2
 8003990:	d901      	bls.n	8003996 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003992:	2303      	movs	r3, #3
 8003994:	e0cb      	b.n	8003b2e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003996:	4b49      	ldr	r3, [pc, #292]	; (8003abc <HAL_RCC_OscConfig+0x470>)
 8003998:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800399a:	f003 0302 	and.w	r3, r3, #2
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d0ee      	beq.n	8003980 <HAL_RCC_OscConfig+0x334>
 80039a2:	e014      	b.n	80039ce <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80039a4:	f7fd ffb0 	bl	8001908 <HAL_GetTick>
 80039a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80039aa:	e00a      	b.n	80039c2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80039ac:	f7fd ffac 	bl	8001908 <HAL_GetTick>
 80039b0:	4602      	mov	r2, r0
 80039b2:	693b      	ldr	r3, [r7, #16]
 80039b4:	1ad3      	subs	r3, r2, r3
 80039b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80039ba:	4293      	cmp	r3, r2
 80039bc:	d901      	bls.n	80039c2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80039be:	2303      	movs	r3, #3
 80039c0:	e0b5      	b.n	8003b2e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80039c2:	4b3e      	ldr	r3, [pc, #248]	; (8003abc <HAL_RCC_OscConfig+0x470>)
 80039c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039c6:	f003 0302 	and.w	r3, r3, #2
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d1ee      	bne.n	80039ac <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80039ce:	7dfb      	ldrb	r3, [r7, #23]
 80039d0:	2b01      	cmp	r3, #1
 80039d2:	d105      	bne.n	80039e0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80039d4:	4b39      	ldr	r3, [pc, #228]	; (8003abc <HAL_RCC_OscConfig+0x470>)
 80039d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039d8:	4a38      	ldr	r2, [pc, #224]	; (8003abc <HAL_RCC_OscConfig+0x470>)
 80039da:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80039de:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	699b      	ldr	r3, [r3, #24]
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	f000 80a1 	beq.w	8003b2c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80039ea:	4b34      	ldr	r3, [pc, #208]	; (8003abc <HAL_RCC_OscConfig+0x470>)
 80039ec:	689b      	ldr	r3, [r3, #8]
 80039ee:	f003 030c 	and.w	r3, r3, #12
 80039f2:	2b08      	cmp	r3, #8
 80039f4:	d05c      	beq.n	8003ab0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	699b      	ldr	r3, [r3, #24]
 80039fa:	2b02      	cmp	r3, #2
 80039fc:	d141      	bne.n	8003a82 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80039fe:	4b31      	ldr	r3, [pc, #196]	; (8003ac4 <HAL_RCC_OscConfig+0x478>)
 8003a00:	2200      	movs	r2, #0
 8003a02:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a04:	f7fd ff80 	bl	8001908 <HAL_GetTick>
 8003a08:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a0a:	e008      	b.n	8003a1e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003a0c:	f7fd ff7c 	bl	8001908 <HAL_GetTick>
 8003a10:	4602      	mov	r2, r0
 8003a12:	693b      	ldr	r3, [r7, #16]
 8003a14:	1ad3      	subs	r3, r2, r3
 8003a16:	2b02      	cmp	r3, #2
 8003a18:	d901      	bls.n	8003a1e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003a1a:	2303      	movs	r3, #3
 8003a1c:	e087      	b.n	8003b2e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a1e:	4b27      	ldr	r3, [pc, #156]	; (8003abc <HAL_RCC_OscConfig+0x470>)
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d1f0      	bne.n	8003a0c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	69da      	ldr	r2, [r3, #28]
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	6a1b      	ldr	r3, [r3, #32]
 8003a32:	431a      	orrs	r2, r3
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a38:	019b      	lsls	r3, r3, #6
 8003a3a:	431a      	orrs	r2, r3
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a40:	085b      	lsrs	r3, r3, #1
 8003a42:	3b01      	subs	r3, #1
 8003a44:	041b      	lsls	r3, r3, #16
 8003a46:	431a      	orrs	r2, r3
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a4c:	061b      	lsls	r3, r3, #24
 8003a4e:	491b      	ldr	r1, [pc, #108]	; (8003abc <HAL_RCC_OscConfig+0x470>)
 8003a50:	4313      	orrs	r3, r2
 8003a52:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003a54:	4b1b      	ldr	r3, [pc, #108]	; (8003ac4 <HAL_RCC_OscConfig+0x478>)
 8003a56:	2201      	movs	r2, #1
 8003a58:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a5a:	f7fd ff55 	bl	8001908 <HAL_GetTick>
 8003a5e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a60:	e008      	b.n	8003a74 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003a62:	f7fd ff51 	bl	8001908 <HAL_GetTick>
 8003a66:	4602      	mov	r2, r0
 8003a68:	693b      	ldr	r3, [r7, #16]
 8003a6a:	1ad3      	subs	r3, r2, r3
 8003a6c:	2b02      	cmp	r3, #2
 8003a6e:	d901      	bls.n	8003a74 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003a70:	2303      	movs	r3, #3
 8003a72:	e05c      	b.n	8003b2e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a74:	4b11      	ldr	r3, [pc, #68]	; (8003abc <HAL_RCC_OscConfig+0x470>)
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d0f0      	beq.n	8003a62 <HAL_RCC_OscConfig+0x416>
 8003a80:	e054      	b.n	8003b2c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a82:	4b10      	ldr	r3, [pc, #64]	; (8003ac4 <HAL_RCC_OscConfig+0x478>)
 8003a84:	2200      	movs	r2, #0
 8003a86:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a88:	f7fd ff3e 	bl	8001908 <HAL_GetTick>
 8003a8c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a8e:	e008      	b.n	8003aa2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003a90:	f7fd ff3a 	bl	8001908 <HAL_GetTick>
 8003a94:	4602      	mov	r2, r0
 8003a96:	693b      	ldr	r3, [r7, #16]
 8003a98:	1ad3      	subs	r3, r2, r3
 8003a9a:	2b02      	cmp	r3, #2
 8003a9c:	d901      	bls.n	8003aa2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003a9e:	2303      	movs	r3, #3
 8003aa0:	e045      	b.n	8003b2e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003aa2:	4b06      	ldr	r3, [pc, #24]	; (8003abc <HAL_RCC_OscConfig+0x470>)
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d1f0      	bne.n	8003a90 <HAL_RCC_OscConfig+0x444>
 8003aae:	e03d      	b.n	8003b2c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	699b      	ldr	r3, [r3, #24]
 8003ab4:	2b01      	cmp	r3, #1
 8003ab6:	d107      	bne.n	8003ac8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003ab8:	2301      	movs	r3, #1
 8003aba:	e038      	b.n	8003b2e <HAL_RCC_OscConfig+0x4e2>
 8003abc:	40023800 	.word	0x40023800
 8003ac0:	40007000 	.word	0x40007000
 8003ac4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003ac8:	4b1b      	ldr	r3, [pc, #108]	; (8003b38 <HAL_RCC_OscConfig+0x4ec>)
 8003aca:	685b      	ldr	r3, [r3, #4]
 8003acc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	699b      	ldr	r3, [r3, #24]
 8003ad2:	2b01      	cmp	r3, #1
 8003ad4:	d028      	beq.n	8003b28 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003ae0:	429a      	cmp	r2, r3
 8003ae2:	d121      	bne.n	8003b28 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003aee:	429a      	cmp	r2, r3
 8003af0:	d11a      	bne.n	8003b28 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003af2:	68fa      	ldr	r2, [r7, #12]
 8003af4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003af8:	4013      	ands	r3, r2
 8003afa:	687a      	ldr	r2, [r7, #4]
 8003afc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003afe:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003b00:	4293      	cmp	r3, r2
 8003b02:	d111      	bne.n	8003b28 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b0e:	085b      	lsrs	r3, r3, #1
 8003b10:	3b01      	subs	r3, #1
 8003b12:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003b14:	429a      	cmp	r2, r3
 8003b16:	d107      	bne.n	8003b28 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b22:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003b24:	429a      	cmp	r2, r3
 8003b26:	d001      	beq.n	8003b2c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003b28:	2301      	movs	r3, #1
 8003b2a:	e000      	b.n	8003b2e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003b2c:	2300      	movs	r3, #0
}
 8003b2e:	4618      	mov	r0, r3
 8003b30:	3718      	adds	r7, #24
 8003b32:	46bd      	mov	sp, r7
 8003b34:	bd80      	pop	{r7, pc}
 8003b36:	bf00      	nop
 8003b38:	40023800 	.word	0x40023800

08003b3c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003b3c:	b580      	push	{r7, lr}
 8003b3e:	b084      	sub	sp, #16
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	6078      	str	r0, [r7, #4]
 8003b44:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d101      	bne.n	8003b50 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003b4c:	2301      	movs	r3, #1
 8003b4e:	e0cc      	b.n	8003cea <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003b50:	4b68      	ldr	r3, [pc, #416]	; (8003cf4 <HAL_RCC_ClockConfig+0x1b8>)
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f003 0307 	and.w	r3, r3, #7
 8003b58:	683a      	ldr	r2, [r7, #0]
 8003b5a:	429a      	cmp	r2, r3
 8003b5c:	d90c      	bls.n	8003b78 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b5e:	4b65      	ldr	r3, [pc, #404]	; (8003cf4 <HAL_RCC_ClockConfig+0x1b8>)
 8003b60:	683a      	ldr	r2, [r7, #0]
 8003b62:	b2d2      	uxtb	r2, r2
 8003b64:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b66:	4b63      	ldr	r3, [pc, #396]	; (8003cf4 <HAL_RCC_ClockConfig+0x1b8>)
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f003 0307 	and.w	r3, r3, #7
 8003b6e:	683a      	ldr	r2, [r7, #0]
 8003b70:	429a      	cmp	r2, r3
 8003b72:	d001      	beq.n	8003b78 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003b74:	2301      	movs	r3, #1
 8003b76:	e0b8      	b.n	8003cea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	f003 0302 	and.w	r3, r3, #2
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d020      	beq.n	8003bc6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f003 0304 	and.w	r3, r3, #4
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d005      	beq.n	8003b9c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003b90:	4b59      	ldr	r3, [pc, #356]	; (8003cf8 <HAL_RCC_ClockConfig+0x1bc>)
 8003b92:	689b      	ldr	r3, [r3, #8]
 8003b94:	4a58      	ldr	r2, [pc, #352]	; (8003cf8 <HAL_RCC_ClockConfig+0x1bc>)
 8003b96:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003b9a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f003 0308 	and.w	r3, r3, #8
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d005      	beq.n	8003bb4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003ba8:	4b53      	ldr	r3, [pc, #332]	; (8003cf8 <HAL_RCC_ClockConfig+0x1bc>)
 8003baa:	689b      	ldr	r3, [r3, #8]
 8003bac:	4a52      	ldr	r2, [pc, #328]	; (8003cf8 <HAL_RCC_ClockConfig+0x1bc>)
 8003bae:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003bb2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003bb4:	4b50      	ldr	r3, [pc, #320]	; (8003cf8 <HAL_RCC_ClockConfig+0x1bc>)
 8003bb6:	689b      	ldr	r3, [r3, #8]
 8003bb8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	689b      	ldr	r3, [r3, #8]
 8003bc0:	494d      	ldr	r1, [pc, #308]	; (8003cf8 <HAL_RCC_ClockConfig+0x1bc>)
 8003bc2:	4313      	orrs	r3, r2
 8003bc4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f003 0301 	and.w	r3, r3, #1
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d044      	beq.n	8003c5c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	685b      	ldr	r3, [r3, #4]
 8003bd6:	2b01      	cmp	r3, #1
 8003bd8:	d107      	bne.n	8003bea <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003bda:	4b47      	ldr	r3, [pc, #284]	; (8003cf8 <HAL_RCC_ClockConfig+0x1bc>)
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d119      	bne.n	8003c1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003be6:	2301      	movs	r3, #1
 8003be8:	e07f      	b.n	8003cea <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	685b      	ldr	r3, [r3, #4]
 8003bee:	2b02      	cmp	r3, #2
 8003bf0:	d003      	beq.n	8003bfa <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003bf6:	2b03      	cmp	r3, #3
 8003bf8:	d107      	bne.n	8003c0a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003bfa:	4b3f      	ldr	r3, [pc, #252]	; (8003cf8 <HAL_RCC_ClockConfig+0x1bc>)
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d109      	bne.n	8003c1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c06:	2301      	movs	r3, #1
 8003c08:	e06f      	b.n	8003cea <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c0a:	4b3b      	ldr	r3, [pc, #236]	; (8003cf8 <HAL_RCC_ClockConfig+0x1bc>)
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f003 0302 	and.w	r3, r3, #2
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d101      	bne.n	8003c1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c16:	2301      	movs	r3, #1
 8003c18:	e067      	b.n	8003cea <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003c1a:	4b37      	ldr	r3, [pc, #220]	; (8003cf8 <HAL_RCC_ClockConfig+0x1bc>)
 8003c1c:	689b      	ldr	r3, [r3, #8]
 8003c1e:	f023 0203 	bic.w	r2, r3, #3
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	685b      	ldr	r3, [r3, #4]
 8003c26:	4934      	ldr	r1, [pc, #208]	; (8003cf8 <HAL_RCC_ClockConfig+0x1bc>)
 8003c28:	4313      	orrs	r3, r2
 8003c2a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003c2c:	f7fd fe6c 	bl	8001908 <HAL_GetTick>
 8003c30:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c32:	e00a      	b.n	8003c4a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c34:	f7fd fe68 	bl	8001908 <HAL_GetTick>
 8003c38:	4602      	mov	r2, r0
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	1ad3      	subs	r3, r2, r3
 8003c3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c42:	4293      	cmp	r3, r2
 8003c44:	d901      	bls.n	8003c4a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003c46:	2303      	movs	r3, #3
 8003c48:	e04f      	b.n	8003cea <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c4a:	4b2b      	ldr	r3, [pc, #172]	; (8003cf8 <HAL_RCC_ClockConfig+0x1bc>)
 8003c4c:	689b      	ldr	r3, [r3, #8]
 8003c4e:	f003 020c 	and.w	r2, r3, #12
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	685b      	ldr	r3, [r3, #4]
 8003c56:	009b      	lsls	r3, r3, #2
 8003c58:	429a      	cmp	r2, r3
 8003c5a:	d1eb      	bne.n	8003c34 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003c5c:	4b25      	ldr	r3, [pc, #148]	; (8003cf4 <HAL_RCC_ClockConfig+0x1b8>)
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	f003 0307 	and.w	r3, r3, #7
 8003c64:	683a      	ldr	r2, [r7, #0]
 8003c66:	429a      	cmp	r2, r3
 8003c68:	d20c      	bcs.n	8003c84 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c6a:	4b22      	ldr	r3, [pc, #136]	; (8003cf4 <HAL_RCC_ClockConfig+0x1b8>)
 8003c6c:	683a      	ldr	r2, [r7, #0]
 8003c6e:	b2d2      	uxtb	r2, r2
 8003c70:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c72:	4b20      	ldr	r3, [pc, #128]	; (8003cf4 <HAL_RCC_ClockConfig+0x1b8>)
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f003 0307 	and.w	r3, r3, #7
 8003c7a:	683a      	ldr	r2, [r7, #0]
 8003c7c:	429a      	cmp	r2, r3
 8003c7e:	d001      	beq.n	8003c84 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003c80:	2301      	movs	r3, #1
 8003c82:	e032      	b.n	8003cea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f003 0304 	and.w	r3, r3, #4
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d008      	beq.n	8003ca2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003c90:	4b19      	ldr	r3, [pc, #100]	; (8003cf8 <HAL_RCC_ClockConfig+0x1bc>)
 8003c92:	689b      	ldr	r3, [r3, #8]
 8003c94:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	68db      	ldr	r3, [r3, #12]
 8003c9c:	4916      	ldr	r1, [pc, #88]	; (8003cf8 <HAL_RCC_ClockConfig+0x1bc>)
 8003c9e:	4313      	orrs	r3, r2
 8003ca0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	f003 0308 	and.w	r3, r3, #8
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d009      	beq.n	8003cc2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003cae:	4b12      	ldr	r3, [pc, #72]	; (8003cf8 <HAL_RCC_ClockConfig+0x1bc>)
 8003cb0:	689b      	ldr	r3, [r3, #8]
 8003cb2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	691b      	ldr	r3, [r3, #16]
 8003cba:	00db      	lsls	r3, r3, #3
 8003cbc:	490e      	ldr	r1, [pc, #56]	; (8003cf8 <HAL_RCC_ClockConfig+0x1bc>)
 8003cbe:	4313      	orrs	r3, r2
 8003cc0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003cc2:	f000 f82d 	bl	8003d20 <HAL_RCC_GetSysClockFreq>
 8003cc6:	4602      	mov	r2, r0
 8003cc8:	4b0b      	ldr	r3, [pc, #44]	; (8003cf8 <HAL_RCC_ClockConfig+0x1bc>)
 8003cca:	689b      	ldr	r3, [r3, #8]
 8003ccc:	091b      	lsrs	r3, r3, #4
 8003cce:	f003 030f 	and.w	r3, r3, #15
 8003cd2:	490a      	ldr	r1, [pc, #40]	; (8003cfc <HAL_RCC_ClockConfig+0x1c0>)
 8003cd4:	5ccb      	ldrb	r3, [r1, r3]
 8003cd6:	fa22 f303 	lsr.w	r3, r2, r3
 8003cda:	4a09      	ldr	r2, [pc, #36]	; (8003d00 <HAL_RCC_ClockConfig+0x1c4>)
 8003cdc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003cde:	4b09      	ldr	r3, [pc, #36]	; (8003d04 <HAL_RCC_ClockConfig+0x1c8>)
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	4618      	mov	r0, r3
 8003ce4:	f7fd fdcc 	bl	8001880 <HAL_InitTick>

  return HAL_OK;
 8003ce8:	2300      	movs	r3, #0
}
 8003cea:	4618      	mov	r0, r3
 8003cec:	3710      	adds	r7, #16
 8003cee:	46bd      	mov	sp, r7
 8003cf0:	bd80      	pop	{r7, pc}
 8003cf2:	bf00      	nop
 8003cf4:	40023c00 	.word	0x40023c00
 8003cf8:	40023800 	.word	0x40023800
 8003cfc:	08007590 	.word	0x08007590
 8003d00:	20000090 	.word	0x20000090
 8003d04:	20000094 	.word	0x20000094

08003d08 <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 8003d08:	b480      	push	{r7}
 8003d0a:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 8003d0c:	4b03      	ldr	r3, [pc, #12]	; (8003d1c <HAL_RCC_EnableCSS+0x14>)
 8003d0e:	2201      	movs	r2, #1
 8003d10:	601a      	str	r2, [r3, #0]
}
 8003d12:	bf00      	nop
 8003d14:	46bd      	mov	sp, r7
 8003d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d1a:	4770      	bx	lr
 8003d1c:	4247004c 	.word	0x4247004c

08003d20 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003d20:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003d24:	b090      	sub	sp, #64	; 0x40
 8003d26:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003d28:	2300      	movs	r3, #0
 8003d2a:	637b      	str	r3, [r7, #52]	; 0x34
 8003d2c:	2300      	movs	r3, #0
 8003d2e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003d30:	2300      	movs	r3, #0
 8003d32:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8003d34:	2300      	movs	r3, #0
 8003d36:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003d38:	4b59      	ldr	r3, [pc, #356]	; (8003ea0 <HAL_RCC_GetSysClockFreq+0x180>)
 8003d3a:	689b      	ldr	r3, [r3, #8]
 8003d3c:	f003 030c 	and.w	r3, r3, #12
 8003d40:	2b08      	cmp	r3, #8
 8003d42:	d00d      	beq.n	8003d60 <HAL_RCC_GetSysClockFreq+0x40>
 8003d44:	2b08      	cmp	r3, #8
 8003d46:	f200 80a1 	bhi.w	8003e8c <HAL_RCC_GetSysClockFreq+0x16c>
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d002      	beq.n	8003d54 <HAL_RCC_GetSysClockFreq+0x34>
 8003d4e:	2b04      	cmp	r3, #4
 8003d50:	d003      	beq.n	8003d5a <HAL_RCC_GetSysClockFreq+0x3a>
 8003d52:	e09b      	b.n	8003e8c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003d54:	4b53      	ldr	r3, [pc, #332]	; (8003ea4 <HAL_RCC_GetSysClockFreq+0x184>)
 8003d56:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8003d58:	e09b      	b.n	8003e92 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003d5a:	4b53      	ldr	r3, [pc, #332]	; (8003ea8 <HAL_RCC_GetSysClockFreq+0x188>)
 8003d5c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003d5e:	e098      	b.n	8003e92 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003d60:	4b4f      	ldr	r3, [pc, #316]	; (8003ea0 <HAL_RCC_GetSysClockFreq+0x180>)
 8003d62:	685b      	ldr	r3, [r3, #4]
 8003d64:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003d68:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003d6a:	4b4d      	ldr	r3, [pc, #308]	; (8003ea0 <HAL_RCC_GetSysClockFreq+0x180>)
 8003d6c:	685b      	ldr	r3, [r3, #4]
 8003d6e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d028      	beq.n	8003dc8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003d76:	4b4a      	ldr	r3, [pc, #296]	; (8003ea0 <HAL_RCC_GetSysClockFreq+0x180>)
 8003d78:	685b      	ldr	r3, [r3, #4]
 8003d7a:	099b      	lsrs	r3, r3, #6
 8003d7c:	2200      	movs	r2, #0
 8003d7e:	623b      	str	r3, [r7, #32]
 8003d80:	627a      	str	r2, [r7, #36]	; 0x24
 8003d82:	6a3b      	ldr	r3, [r7, #32]
 8003d84:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003d88:	2100      	movs	r1, #0
 8003d8a:	4b47      	ldr	r3, [pc, #284]	; (8003ea8 <HAL_RCC_GetSysClockFreq+0x188>)
 8003d8c:	fb03 f201 	mul.w	r2, r3, r1
 8003d90:	2300      	movs	r3, #0
 8003d92:	fb00 f303 	mul.w	r3, r0, r3
 8003d96:	4413      	add	r3, r2
 8003d98:	4a43      	ldr	r2, [pc, #268]	; (8003ea8 <HAL_RCC_GetSysClockFreq+0x188>)
 8003d9a:	fba0 1202 	umull	r1, r2, r0, r2
 8003d9e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003da0:	460a      	mov	r2, r1
 8003da2:	62ba      	str	r2, [r7, #40]	; 0x28
 8003da4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003da6:	4413      	add	r3, r2
 8003da8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003daa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003dac:	2200      	movs	r2, #0
 8003dae:	61bb      	str	r3, [r7, #24]
 8003db0:	61fa      	str	r2, [r7, #28]
 8003db2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003db6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003dba:	f7fc fe79 	bl	8000ab0 <__aeabi_uldivmod>
 8003dbe:	4602      	mov	r2, r0
 8003dc0:	460b      	mov	r3, r1
 8003dc2:	4613      	mov	r3, r2
 8003dc4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003dc6:	e053      	b.n	8003e70 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003dc8:	4b35      	ldr	r3, [pc, #212]	; (8003ea0 <HAL_RCC_GetSysClockFreq+0x180>)
 8003dca:	685b      	ldr	r3, [r3, #4]
 8003dcc:	099b      	lsrs	r3, r3, #6
 8003dce:	2200      	movs	r2, #0
 8003dd0:	613b      	str	r3, [r7, #16]
 8003dd2:	617a      	str	r2, [r7, #20]
 8003dd4:	693b      	ldr	r3, [r7, #16]
 8003dd6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003dda:	f04f 0b00 	mov.w	fp, #0
 8003dde:	4652      	mov	r2, sl
 8003de0:	465b      	mov	r3, fp
 8003de2:	f04f 0000 	mov.w	r0, #0
 8003de6:	f04f 0100 	mov.w	r1, #0
 8003dea:	0159      	lsls	r1, r3, #5
 8003dec:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003df0:	0150      	lsls	r0, r2, #5
 8003df2:	4602      	mov	r2, r0
 8003df4:	460b      	mov	r3, r1
 8003df6:	ebb2 080a 	subs.w	r8, r2, sl
 8003dfa:	eb63 090b 	sbc.w	r9, r3, fp
 8003dfe:	f04f 0200 	mov.w	r2, #0
 8003e02:	f04f 0300 	mov.w	r3, #0
 8003e06:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003e0a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003e0e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003e12:	ebb2 0408 	subs.w	r4, r2, r8
 8003e16:	eb63 0509 	sbc.w	r5, r3, r9
 8003e1a:	f04f 0200 	mov.w	r2, #0
 8003e1e:	f04f 0300 	mov.w	r3, #0
 8003e22:	00eb      	lsls	r3, r5, #3
 8003e24:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003e28:	00e2      	lsls	r2, r4, #3
 8003e2a:	4614      	mov	r4, r2
 8003e2c:	461d      	mov	r5, r3
 8003e2e:	eb14 030a 	adds.w	r3, r4, sl
 8003e32:	603b      	str	r3, [r7, #0]
 8003e34:	eb45 030b 	adc.w	r3, r5, fp
 8003e38:	607b      	str	r3, [r7, #4]
 8003e3a:	f04f 0200 	mov.w	r2, #0
 8003e3e:	f04f 0300 	mov.w	r3, #0
 8003e42:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003e46:	4629      	mov	r1, r5
 8003e48:	028b      	lsls	r3, r1, #10
 8003e4a:	4621      	mov	r1, r4
 8003e4c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003e50:	4621      	mov	r1, r4
 8003e52:	028a      	lsls	r2, r1, #10
 8003e54:	4610      	mov	r0, r2
 8003e56:	4619      	mov	r1, r3
 8003e58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e5a:	2200      	movs	r2, #0
 8003e5c:	60bb      	str	r3, [r7, #8]
 8003e5e:	60fa      	str	r2, [r7, #12]
 8003e60:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003e64:	f7fc fe24 	bl	8000ab0 <__aeabi_uldivmod>
 8003e68:	4602      	mov	r2, r0
 8003e6a:	460b      	mov	r3, r1
 8003e6c:	4613      	mov	r3, r2
 8003e6e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003e70:	4b0b      	ldr	r3, [pc, #44]	; (8003ea0 <HAL_RCC_GetSysClockFreq+0x180>)
 8003e72:	685b      	ldr	r3, [r3, #4]
 8003e74:	0c1b      	lsrs	r3, r3, #16
 8003e76:	f003 0303 	and.w	r3, r3, #3
 8003e7a:	3301      	adds	r3, #1
 8003e7c:	005b      	lsls	r3, r3, #1
 8003e7e:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8003e80:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003e82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e84:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e88:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003e8a:	e002      	b.n	8003e92 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003e8c:	4b05      	ldr	r3, [pc, #20]	; (8003ea4 <HAL_RCC_GetSysClockFreq+0x184>)
 8003e8e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003e90:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003e92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8003e94:	4618      	mov	r0, r3
 8003e96:	3740      	adds	r7, #64	; 0x40
 8003e98:	46bd      	mov	sp, r7
 8003e9a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003e9e:	bf00      	nop
 8003ea0:	40023800 	.word	0x40023800
 8003ea4:	00f42400 	.word	0x00f42400
 8003ea8:	017d7840 	.word	0x017d7840

08003eac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003eac:	b480      	push	{r7}
 8003eae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003eb0:	4b03      	ldr	r3, [pc, #12]	; (8003ec0 <HAL_RCC_GetHCLKFreq+0x14>)
 8003eb2:	681b      	ldr	r3, [r3, #0]
}
 8003eb4:	4618      	mov	r0, r3
 8003eb6:	46bd      	mov	sp, r7
 8003eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ebc:	4770      	bx	lr
 8003ebe:	bf00      	nop
 8003ec0:	20000090 	.word	0x20000090

08003ec4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003ec4:	b580      	push	{r7, lr}
 8003ec6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003ec8:	f7ff fff0 	bl	8003eac <HAL_RCC_GetHCLKFreq>
 8003ecc:	4602      	mov	r2, r0
 8003ece:	4b05      	ldr	r3, [pc, #20]	; (8003ee4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003ed0:	689b      	ldr	r3, [r3, #8]
 8003ed2:	0a9b      	lsrs	r3, r3, #10
 8003ed4:	f003 0307 	and.w	r3, r3, #7
 8003ed8:	4903      	ldr	r1, [pc, #12]	; (8003ee8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003eda:	5ccb      	ldrb	r3, [r1, r3]
 8003edc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ee0:	4618      	mov	r0, r3
 8003ee2:	bd80      	pop	{r7, pc}
 8003ee4:	40023800 	.word	0x40023800
 8003ee8:	080075a0 	.word	0x080075a0

08003eec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003eec:	b580      	push	{r7, lr}
 8003eee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003ef0:	f7ff ffdc 	bl	8003eac <HAL_RCC_GetHCLKFreq>
 8003ef4:	4602      	mov	r2, r0
 8003ef6:	4b05      	ldr	r3, [pc, #20]	; (8003f0c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003ef8:	689b      	ldr	r3, [r3, #8]
 8003efa:	0b5b      	lsrs	r3, r3, #13
 8003efc:	f003 0307 	and.w	r3, r3, #7
 8003f00:	4903      	ldr	r1, [pc, #12]	; (8003f10 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003f02:	5ccb      	ldrb	r3, [r1, r3]
 8003f04:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003f08:	4618      	mov	r0, r3
 8003f0a:	bd80      	pop	{r7, pc}
 8003f0c:	40023800 	.word	0x40023800
 8003f10:	080075a0 	.word	0x080075a0

08003f14 <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 8003f14:	b580      	push	{r7, lr}
 8003f16:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 8003f18:	4b06      	ldr	r3, [pc, #24]	; (8003f34 <HAL_RCC_NMI_IRQHandler+0x20>)
 8003f1a:	68db      	ldr	r3, [r3, #12]
 8003f1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f20:	2b80      	cmp	r3, #128	; 0x80
 8003f22:	d104      	bne.n	8003f2e <HAL_RCC_NMI_IRQHandler+0x1a>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 8003f24:	f000 f80a 	bl	8003f3c <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 8003f28:	4b03      	ldr	r3, [pc, #12]	; (8003f38 <HAL_RCC_NMI_IRQHandler+0x24>)
 8003f2a:	2280      	movs	r2, #128	; 0x80
 8003f2c:	701a      	strb	r2, [r3, #0]
  }
}
 8003f2e:	bf00      	nop
 8003f30:	bd80      	pop	{r7, pc}
 8003f32:	bf00      	nop
 8003f34:	40023800 	.word	0x40023800
 8003f38:	4002380e 	.word	0x4002380e

08003f3c <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval None
  */
__weak void HAL_RCC_CSSCallback(void)
{
 8003f3c:	b480      	push	{r7}
 8003f3e:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback could be implemented in the user file
   */
}
 8003f40:	bf00      	nop
 8003f42:	46bd      	mov	sp, r7
 8003f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f48:	4770      	bx	lr

08003f4a <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003f4a:	b580      	push	{r7, lr}
 8003f4c:	b082      	sub	sp, #8
 8003f4e:	af00      	add	r7, sp, #0
 8003f50:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d101      	bne.n	8003f5c <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003f58:	2301      	movs	r3, #1
 8003f5a:	e07b      	b.n	8004054 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d108      	bne.n	8003f76 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	685b      	ldr	r3, [r3, #4]
 8003f68:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003f6c:	d009      	beq.n	8003f82 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	2200      	movs	r2, #0
 8003f72:	61da      	str	r2, [r3, #28]
 8003f74:	e005      	b.n	8003f82 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	2200      	movs	r2, #0
 8003f7a:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	2200      	movs	r2, #0
 8003f80:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	2200      	movs	r2, #0
 8003f86:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003f8e:	b2db      	uxtb	r3, r3
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d106      	bne.n	8003fa2 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	2200      	movs	r2, #0
 8003f98:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003f9c:	6878      	ldr	r0, [r7, #4]
 8003f9e:	f7fd f8e3 	bl	8001168 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	2202      	movs	r2, #2
 8003fa6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	681a      	ldr	r2, [r3, #0]
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003fb8:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	685b      	ldr	r3, [r3, #4]
 8003fbe:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	689b      	ldr	r3, [r3, #8]
 8003fc6:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003fca:	431a      	orrs	r2, r3
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	68db      	ldr	r3, [r3, #12]
 8003fd0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003fd4:	431a      	orrs	r2, r3
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	691b      	ldr	r3, [r3, #16]
 8003fda:	f003 0302 	and.w	r3, r3, #2
 8003fde:	431a      	orrs	r2, r3
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	695b      	ldr	r3, [r3, #20]
 8003fe4:	f003 0301 	and.w	r3, r3, #1
 8003fe8:	431a      	orrs	r2, r3
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	699b      	ldr	r3, [r3, #24]
 8003fee:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003ff2:	431a      	orrs	r2, r3
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	69db      	ldr	r3, [r3, #28]
 8003ff8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003ffc:	431a      	orrs	r2, r3
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	6a1b      	ldr	r3, [r3, #32]
 8004002:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004006:	ea42 0103 	orr.w	r1, r2, r3
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800400e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	430a      	orrs	r2, r1
 8004018:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	699b      	ldr	r3, [r3, #24]
 800401e:	0c1b      	lsrs	r3, r3, #16
 8004020:	f003 0104 	and.w	r1, r3, #4
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004028:	f003 0210 	and.w	r2, r3, #16
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	430a      	orrs	r2, r1
 8004032:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	69da      	ldr	r2, [r3, #28]
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004042:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	2200      	movs	r2, #0
 8004048:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	2201      	movs	r2, #1
 800404e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004052:	2300      	movs	r3, #0
}
 8004054:	4618      	mov	r0, r3
 8004056:	3708      	adds	r7, #8
 8004058:	46bd      	mov	sp, r7
 800405a:	bd80      	pop	{r7, pc}

0800405c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800405c:	b580      	push	{r7, lr}
 800405e:	b088      	sub	sp, #32
 8004060:	af00      	add	r7, sp, #0
 8004062:	60f8      	str	r0, [r7, #12]
 8004064:	60b9      	str	r1, [r7, #8]
 8004066:	603b      	str	r3, [r7, #0]
 8004068:	4613      	mov	r3, r2
 800406a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800406c:	2300      	movs	r3, #0
 800406e:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004076:	2b01      	cmp	r3, #1
 8004078:	d101      	bne.n	800407e <HAL_SPI_Transmit+0x22>
 800407a:	2302      	movs	r3, #2
 800407c:	e126      	b.n	80042cc <HAL_SPI_Transmit+0x270>
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	2201      	movs	r2, #1
 8004082:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004086:	f7fd fc3f 	bl	8001908 <HAL_GetTick>
 800408a:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800408c:	88fb      	ldrh	r3, [r7, #6]
 800408e:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004096:	b2db      	uxtb	r3, r3
 8004098:	2b01      	cmp	r3, #1
 800409a:	d002      	beq.n	80040a2 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800409c:	2302      	movs	r3, #2
 800409e:	77fb      	strb	r3, [r7, #31]
    goto error;
 80040a0:	e10b      	b.n	80042ba <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80040a2:	68bb      	ldr	r3, [r7, #8]
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d002      	beq.n	80040ae <HAL_SPI_Transmit+0x52>
 80040a8:	88fb      	ldrh	r3, [r7, #6]
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d102      	bne.n	80040b4 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80040ae:	2301      	movs	r3, #1
 80040b0:	77fb      	strb	r3, [r7, #31]
    goto error;
 80040b2:	e102      	b.n	80042ba <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	2203      	movs	r2, #3
 80040b8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	2200      	movs	r2, #0
 80040c0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	68ba      	ldr	r2, [r7, #8]
 80040c6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	88fa      	ldrh	r2, [r7, #6]
 80040cc:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	88fa      	ldrh	r2, [r7, #6]
 80040d2:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	2200      	movs	r2, #0
 80040d8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	2200      	movs	r2, #0
 80040de:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	2200      	movs	r2, #0
 80040e4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	2200      	movs	r2, #0
 80040ea:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	2200      	movs	r2, #0
 80040f0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	689b      	ldr	r3, [r3, #8]
 80040f6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80040fa:	d10f      	bne.n	800411c <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	681a      	ldr	r2, [r3, #0]
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800410a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	681a      	ldr	r2, [r3, #0]
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800411a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004126:	2b40      	cmp	r3, #64	; 0x40
 8004128:	d007      	beq.n	800413a <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	681a      	ldr	r2, [r3, #0]
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004138:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	68db      	ldr	r3, [r3, #12]
 800413e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004142:	d14b      	bne.n	80041dc <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	685b      	ldr	r3, [r3, #4]
 8004148:	2b00      	cmp	r3, #0
 800414a:	d002      	beq.n	8004152 <HAL_SPI_Transmit+0xf6>
 800414c:	8afb      	ldrh	r3, [r7, #22]
 800414e:	2b01      	cmp	r3, #1
 8004150:	d13e      	bne.n	80041d0 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004156:	881a      	ldrh	r2, [r3, #0]
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004162:	1c9a      	adds	r2, r3, #2
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800416c:	b29b      	uxth	r3, r3
 800416e:	3b01      	subs	r3, #1
 8004170:	b29a      	uxth	r2, r3
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004176:	e02b      	b.n	80041d0 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	689b      	ldr	r3, [r3, #8]
 800417e:	f003 0302 	and.w	r3, r3, #2
 8004182:	2b02      	cmp	r3, #2
 8004184:	d112      	bne.n	80041ac <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800418a:	881a      	ldrh	r2, [r3, #0]
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004196:	1c9a      	adds	r2, r3, #2
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80041a0:	b29b      	uxth	r3, r3
 80041a2:	3b01      	subs	r3, #1
 80041a4:	b29a      	uxth	r2, r3
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	86da      	strh	r2, [r3, #54]	; 0x36
 80041aa:	e011      	b.n	80041d0 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80041ac:	f7fd fbac 	bl	8001908 <HAL_GetTick>
 80041b0:	4602      	mov	r2, r0
 80041b2:	69bb      	ldr	r3, [r7, #24]
 80041b4:	1ad3      	subs	r3, r2, r3
 80041b6:	683a      	ldr	r2, [r7, #0]
 80041b8:	429a      	cmp	r2, r3
 80041ba:	d803      	bhi.n	80041c4 <HAL_SPI_Transmit+0x168>
 80041bc:	683b      	ldr	r3, [r7, #0]
 80041be:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80041c2:	d102      	bne.n	80041ca <HAL_SPI_Transmit+0x16e>
 80041c4:	683b      	ldr	r3, [r7, #0]
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d102      	bne.n	80041d0 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80041ca:	2303      	movs	r3, #3
 80041cc:	77fb      	strb	r3, [r7, #31]
          goto error;
 80041ce:	e074      	b.n	80042ba <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80041d4:	b29b      	uxth	r3, r3
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d1ce      	bne.n	8004178 <HAL_SPI_Transmit+0x11c>
 80041da:	e04c      	b.n	8004276 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	685b      	ldr	r3, [r3, #4]
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d002      	beq.n	80041ea <HAL_SPI_Transmit+0x18e>
 80041e4:	8afb      	ldrh	r3, [r7, #22]
 80041e6:	2b01      	cmp	r3, #1
 80041e8:	d140      	bne.n	800426c <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	330c      	adds	r3, #12
 80041f4:	7812      	ldrb	r2, [r2, #0]
 80041f6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041fc:	1c5a      	adds	r2, r3, #1
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004206:	b29b      	uxth	r3, r3
 8004208:	3b01      	subs	r3, #1
 800420a:	b29a      	uxth	r2, r3
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004210:	e02c      	b.n	800426c <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	689b      	ldr	r3, [r3, #8]
 8004218:	f003 0302 	and.w	r3, r3, #2
 800421c:	2b02      	cmp	r3, #2
 800421e:	d113      	bne.n	8004248 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	330c      	adds	r3, #12
 800422a:	7812      	ldrb	r2, [r2, #0]
 800422c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004232:	1c5a      	adds	r2, r3, #1
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800423c:	b29b      	uxth	r3, r3
 800423e:	3b01      	subs	r3, #1
 8004240:	b29a      	uxth	r2, r3
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	86da      	strh	r2, [r3, #54]	; 0x36
 8004246:	e011      	b.n	800426c <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004248:	f7fd fb5e 	bl	8001908 <HAL_GetTick>
 800424c:	4602      	mov	r2, r0
 800424e:	69bb      	ldr	r3, [r7, #24]
 8004250:	1ad3      	subs	r3, r2, r3
 8004252:	683a      	ldr	r2, [r7, #0]
 8004254:	429a      	cmp	r2, r3
 8004256:	d803      	bhi.n	8004260 <HAL_SPI_Transmit+0x204>
 8004258:	683b      	ldr	r3, [r7, #0]
 800425a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800425e:	d102      	bne.n	8004266 <HAL_SPI_Transmit+0x20a>
 8004260:	683b      	ldr	r3, [r7, #0]
 8004262:	2b00      	cmp	r3, #0
 8004264:	d102      	bne.n	800426c <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8004266:	2303      	movs	r3, #3
 8004268:	77fb      	strb	r3, [r7, #31]
          goto error;
 800426a:	e026      	b.n	80042ba <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004270:	b29b      	uxth	r3, r3
 8004272:	2b00      	cmp	r3, #0
 8004274:	d1cd      	bne.n	8004212 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004276:	69ba      	ldr	r2, [r7, #24]
 8004278:	6839      	ldr	r1, [r7, #0]
 800427a:	68f8      	ldr	r0, [r7, #12]
 800427c:	f000 f8b2 	bl	80043e4 <SPI_EndRxTxTransaction>
 8004280:	4603      	mov	r3, r0
 8004282:	2b00      	cmp	r3, #0
 8004284:	d002      	beq.n	800428c <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	2220      	movs	r2, #32
 800428a:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	689b      	ldr	r3, [r3, #8]
 8004290:	2b00      	cmp	r3, #0
 8004292:	d10a      	bne.n	80042aa <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004294:	2300      	movs	r3, #0
 8004296:	613b      	str	r3, [r7, #16]
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	68db      	ldr	r3, [r3, #12]
 800429e:	613b      	str	r3, [r7, #16]
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	689b      	ldr	r3, [r3, #8]
 80042a6:	613b      	str	r3, [r7, #16]
 80042a8:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d002      	beq.n	80042b8 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80042b2:	2301      	movs	r3, #1
 80042b4:	77fb      	strb	r3, [r7, #31]
 80042b6:	e000      	b.n	80042ba <HAL_SPI_Transmit+0x25e>
  }

error:
 80042b8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	2201      	movs	r2, #1
 80042be:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	2200      	movs	r2, #0
 80042c6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80042ca:	7ffb      	ldrb	r3, [r7, #31]
}
 80042cc:	4618      	mov	r0, r3
 80042ce:	3720      	adds	r7, #32
 80042d0:	46bd      	mov	sp, r7
 80042d2:	bd80      	pop	{r7, pc}

080042d4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80042d4:	b580      	push	{r7, lr}
 80042d6:	b088      	sub	sp, #32
 80042d8:	af00      	add	r7, sp, #0
 80042da:	60f8      	str	r0, [r7, #12]
 80042dc:	60b9      	str	r1, [r7, #8]
 80042de:	603b      	str	r3, [r7, #0]
 80042e0:	4613      	mov	r3, r2
 80042e2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80042e4:	f7fd fb10 	bl	8001908 <HAL_GetTick>
 80042e8:	4602      	mov	r2, r0
 80042ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042ec:	1a9b      	subs	r3, r3, r2
 80042ee:	683a      	ldr	r2, [r7, #0]
 80042f0:	4413      	add	r3, r2
 80042f2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80042f4:	f7fd fb08 	bl	8001908 <HAL_GetTick>
 80042f8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80042fa:	4b39      	ldr	r3, [pc, #228]	; (80043e0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	015b      	lsls	r3, r3, #5
 8004300:	0d1b      	lsrs	r3, r3, #20
 8004302:	69fa      	ldr	r2, [r7, #28]
 8004304:	fb02 f303 	mul.w	r3, r2, r3
 8004308:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800430a:	e054      	b.n	80043b6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800430c:	683b      	ldr	r3, [r7, #0]
 800430e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004312:	d050      	beq.n	80043b6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004314:	f7fd faf8 	bl	8001908 <HAL_GetTick>
 8004318:	4602      	mov	r2, r0
 800431a:	69bb      	ldr	r3, [r7, #24]
 800431c:	1ad3      	subs	r3, r2, r3
 800431e:	69fa      	ldr	r2, [r7, #28]
 8004320:	429a      	cmp	r2, r3
 8004322:	d902      	bls.n	800432a <SPI_WaitFlagStateUntilTimeout+0x56>
 8004324:	69fb      	ldr	r3, [r7, #28]
 8004326:	2b00      	cmp	r3, #0
 8004328:	d13d      	bne.n	80043a6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	685a      	ldr	r2, [r3, #4]
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004338:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	685b      	ldr	r3, [r3, #4]
 800433e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004342:	d111      	bne.n	8004368 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	689b      	ldr	r3, [r3, #8]
 8004348:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800434c:	d004      	beq.n	8004358 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	689b      	ldr	r3, [r3, #8]
 8004352:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004356:	d107      	bne.n	8004368 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	681a      	ldr	r2, [r3, #0]
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004366:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800436c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004370:	d10f      	bne.n	8004392 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	681a      	ldr	r2, [r3, #0]
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004380:	601a      	str	r2, [r3, #0]
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	681a      	ldr	r2, [r3, #0]
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004390:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	2201      	movs	r2, #1
 8004396:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	2200      	movs	r2, #0
 800439e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80043a2:	2303      	movs	r3, #3
 80043a4:	e017      	b.n	80043d6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80043a6:	697b      	ldr	r3, [r7, #20]
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d101      	bne.n	80043b0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80043ac:	2300      	movs	r3, #0
 80043ae:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80043b0:	697b      	ldr	r3, [r7, #20]
 80043b2:	3b01      	subs	r3, #1
 80043b4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	689a      	ldr	r2, [r3, #8]
 80043bc:	68bb      	ldr	r3, [r7, #8]
 80043be:	4013      	ands	r3, r2
 80043c0:	68ba      	ldr	r2, [r7, #8]
 80043c2:	429a      	cmp	r2, r3
 80043c4:	bf0c      	ite	eq
 80043c6:	2301      	moveq	r3, #1
 80043c8:	2300      	movne	r3, #0
 80043ca:	b2db      	uxtb	r3, r3
 80043cc:	461a      	mov	r2, r3
 80043ce:	79fb      	ldrb	r3, [r7, #7]
 80043d0:	429a      	cmp	r2, r3
 80043d2:	d19b      	bne.n	800430c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80043d4:	2300      	movs	r3, #0
}
 80043d6:	4618      	mov	r0, r3
 80043d8:	3720      	adds	r7, #32
 80043da:	46bd      	mov	sp, r7
 80043dc:	bd80      	pop	{r7, pc}
 80043de:	bf00      	nop
 80043e0:	20000090 	.word	0x20000090

080043e4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80043e4:	b580      	push	{r7, lr}
 80043e6:	b088      	sub	sp, #32
 80043e8:	af02      	add	r7, sp, #8
 80043ea:	60f8      	str	r0, [r7, #12]
 80043ec:	60b9      	str	r1, [r7, #8]
 80043ee:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80043f0:	4b1b      	ldr	r3, [pc, #108]	; (8004460 <SPI_EndRxTxTransaction+0x7c>)
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	4a1b      	ldr	r2, [pc, #108]	; (8004464 <SPI_EndRxTxTransaction+0x80>)
 80043f6:	fba2 2303 	umull	r2, r3, r2, r3
 80043fa:	0d5b      	lsrs	r3, r3, #21
 80043fc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004400:	fb02 f303 	mul.w	r3, r2, r3
 8004404:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	685b      	ldr	r3, [r3, #4]
 800440a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800440e:	d112      	bne.n	8004436 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	9300      	str	r3, [sp, #0]
 8004414:	68bb      	ldr	r3, [r7, #8]
 8004416:	2200      	movs	r2, #0
 8004418:	2180      	movs	r1, #128	; 0x80
 800441a:	68f8      	ldr	r0, [r7, #12]
 800441c:	f7ff ff5a 	bl	80042d4 <SPI_WaitFlagStateUntilTimeout>
 8004420:	4603      	mov	r3, r0
 8004422:	2b00      	cmp	r3, #0
 8004424:	d016      	beq.n	8004454 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800442a:	f043 0220 	orr.w	r2, r3, #32
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004432:	2303      	movs	r3, #3
 8004434:	e00f      	b.n	8004456 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004436:	697b      	ldr	r3, [r7, #20]
 8004438:	2b00      	cmp	r3, #0
 800443a:	d00a      	beq.n	8004452 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800443c:	697b      	ldr	r3, [r7, #20]
 800443e:	3b01      	subs	r3, #1
 8004440:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	689b      	ldr	r3, [r3, #8]
 8004448:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800444c:	2b80      	cmp	r3, #128	; 0x80
 800444e:	d0f2      	beq.n	8004436 <SPI_EndRxTxTransaction+0x52>
 8004450:	e000      	b.n	8004454 <SPI_EndRxTxTransaction+0x70>
        break;
 8004452:	bf00      	nop
  }

  return HAL_OK;
 8004454:	2300      	movs	r3, #0
}
 8004456:	4618      	mov	r0, r3
 8004458:	3718      	adds	r7, #24
 800445a:	46bd      	mov	sp, r7
 800445c:	bd80      	pop	{r7, pc}
 800445e:	bf00      	nop
 8004460:	20000090 	.word	0x20000090
 8004464:	165e9f81 	.word	0x165e9f81

08004468 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004468:	b580      	push	{r7, lr}
 800446a:	b082      	sub	sp, #8
 800446c:	af00      	add	r7, sp, #0
 800446e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	2b00      	cmp	r3, #0
 8004474:	d101      	bne.n	800447a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004476:	2301      	movs	r3, #1
 8004478:	e041      	b.n	80044fe <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004480:	b2db      	uxtb	r3, r3
 8004482:	2b00      	cmp	r3, #0
 8004484:	d106      	bne.n	8004494 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	2200      	movs	r2, #0
 800448a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800448e:	6878      	ldr	r0, [r7, #4]
 8004490:	f7fc ffe2 	bl	8001458 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	2202      	movs	r2, #2
 8004498:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681a      	ldr	r2, [r3, #0]
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	3304      	adds	r3, #4
 80044a4:	4619      	mov	r1, r3
 80044a6:	4610      	mov	r0, r2
 80044a8:	f000 fb4a 	bl	8004b40 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	2201      	movs	r2, #1
 80044b0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	2201      	movs	r2, #1
 80044b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	2201      	movs	r2, #1
 80044c0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	2201      	movs	r2, #1
 80044c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	2201      	movs	r2, #1
 80044d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	2201      	movs	r2, #1
 80044d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	2201      	movs	r2, #1
 80044e0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	2201      	movs	r2, #1
 80044e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	2201      	movs	r2, #1
 80044f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	2201      	movs	r2, #1
 80044f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80044fc:	2300      	movs	r3, #0
}
 80044fe:	4618      	mov	r0, r3
 8004500:	3708      	adds	r7, #8
 8004502:	46bd      	mov	sp, r7
 8004504:	bd80      	pop	{r7, pc}

08004506 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004506:	b580      	push	{r7, lr}
 8004508:	b082      	sub	sp, #8
 800450a:	af00      	add	r7, sp, #0
 800450c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	2b00      	cmp	r3, #0
 8004512:	d101      	bne.n	8004518 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004514:	2301      	movs	r3, #1
 8004516:	e041      	b.n	800459c <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800451e:	b2db      	uxtb	r3, r3
 8004520:	2b00      	cmp	r3, #0
 8004522:	d106      	bne.n	8004532 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	2200      	movs	r2, #0
 8004528:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800452c:	6878      	ldr	r0, [r7, #4]
 800452e:	f000 f839 	bl	80045a4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	2202      	movs	r2, #2
 8004536:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681a      	ldr	r2, [r3, #0]
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	3304      	adds	r3, #4
 8004542:	4619      	mov	r1, r3
 8004544:	4610      	mov	r0, r2
 8004546:	f000 fafb 	bl	8004b40 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	2201      	movs	r2, #1
 800454e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	2201      	movs	r2, #1
 8004556:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	2201      	movs	r2, #1
 800455e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	2201      	movs	r2, #1
 8004566:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	2201      	movs	r2, #1
 800456e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	2201      	movs	r2, #1
 8004576:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	2201      	movs	r2, #1
 800457e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	2201      	movs	r2, #1
 8004586:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	2201      	movs	r2, #1
 800458e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	2201      	movs	r2, #1
 8004596:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800459a:	2300      	movs	r3, #0
}
 800459c:	4618      	mov	r0, r3
 800459e:	3708      	adds	r7, #8
 80045a0:	46bd      	mov	sp, r7
 80045a2:	bd80      	pop	{r7, pc}

080045a4 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80045a4:	b480      	push	{r7}
 80045a6:	b083      	sub	sp, #12
 80045a8:	af00      	add	r7, sp, #0
 80045aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80045ac:	bf00      	nop
 80045ae:	370c      	adds	r7, #12
 80045b0:	46bd      	mov	sp, r7
 80045b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b6:	4770      	bx	lr

080045b8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80045b8:	b580      	push	{r7, lr}
 80045ba:	b082      	sub	sp, #8
 80045bc:	af00      	add	r7, sp, #0
 80045be:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	691b      	ldr	r3, [r3, #16]
 80045c6:	f003 0302 	and.w	r3, r3, #2
 80045ca:	2b02      	cmp	r3, #2
 80045cc:	d122      	bne.n	8004614 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	68db      	ldr	r3, [r3, #12]
 80045d4:	f003 0302 	and.w	r3, r3, #2
 80045d8:	2b02      	cmp	r3, #2
 80045da:	d11b      	bne.n	8004614 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	f06f 0202 	mvn.w	r2, #2
 80045e4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	2201      	movs	r2, #1
 80045ea:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	699b      	ldr	r3, [r3, #24]
 80045f2:	f003 0303 	and.w	r3, r3, #3
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d003      	beq.n	8004602 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80045fa:	6878      	ldr	r0, [r7, #4]
 80045fc:	f000 fa81 	bl	8004b02 <HAL_TIM_IC_CaptureCallback>
 8004600:	e005      	b.n	800460e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004602:	6878      	ldr	r0, [r7, #4]
 8004604:	f000 fa73 	bl	8004aee <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004608:	6878      	ldr	r0, [r7, #4]
 800460a:	f000 fa84 	bl	8004b16 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	2200      	movs	r2, #0
 8004612:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	691b      	ldr	r3, [r3, #16]
 800461a:	f003 0304 	and.w	r3, r3, #4
 800461e:	2b04      	cmp	r3, #4
 8004620:	d122      	bne.n	8004668 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	68db      	ldr	r3, [r3, #12]
 8004628:	f003 0304 	and.w	r3, r3, #4
 800462c:	2b04      	cmp	r3, #4
 800462e:	d11b      	bne.n	8004668 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	f06f 0204 	mvn.w	r2, #4
 8004638:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	2202      	movs	r2, #2
 800463e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	699b      	ldr	r3, [r3, #24]
 8004646:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800464a:	2b00      	cmp	r3, #0
 800464c:	d003      	beq.n	8004656 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800464e:	6878      	ldr	r0, [r7, #4]
 8004650:	f000 fa57 	bl	8004b02 <HAL_TIM_IC_CaptureCallback>
 8004654:	e005      	b.n	8004662 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004656:	6878      	ldr	r0, [r7, #4]
 8004658:	f000 fa49 	bl	8004aee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800465c:	6878      	ldr	r0, [r7, #4]
 800465e:	f000 fa5a 	bl	8004b16 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	2200      	movs	r2, #0
 8004666:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	691b      	ldr	r3, [r3, #16]
 800466e:	f003 0308 	and.w	r3, r3, #8
 8004672:	2b08      	cmp	r3, #8
 8004674:	d122      	bne.n	80046bc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	68db      	ldr	r3, [r3, #12]
 800467c:	f003 0308 	and.w	r3, r3, #8
 8004680:	2b08      	cmp	r3, #8
 8004682:	d11b      	bne.n	80046bc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	f06f 0208 	mvn.w	r2, #8
 800468c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	2204      	movs	r2, #4
 8004692:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	69db      	ldr	r3, [r3, #28]
 800469a:	f003 0303 	and.w	r3, r3, #3
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d003      	beq.n	80046aa <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80046a2:	6878      	ldr	r0, [r7, #4]
 80046a4:	f000 fa2d 	bl	8004b02 <HAL_TIM_IC_CaptureCallback>
 80046a8:	e005      	b.n	80046b6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80046aa:	6878      	ldr	r0, [r7, #4]
 80046ac:	f000 fa1f 	bl	8004aee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80046b0:	6878      	ldr	r0, [r7, #4]
 80046b2:	f000 fa30 	bl	8004b16 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	2200      	movs	r2, #0
 80046ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	691b      	ldr	r3, [r3, #16]
 80046c2:	f003 0310 	and.w	r3, r3, #16
 80046c6:	2b10      	cmp	r3, #16
 80046c8:	d122      	bne.n	8004710 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	68db      	ldr	r3, [r3, #12]
 80046d0:	f003 0310 	and.w	r3, r3, #16
 80046d4:	2b10      	cmp	r3, #16
 80046d6:	d11b      	bne.n	8004710 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	f06f 0210 	mvn.w	r2, #16
 80046e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	2208      	movs	r2, #8
 80046e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	69db      	ldr	r3, [r3, #28]
 80046ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d003      	beq.n	80046fe <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80046f6:	6878      	ldr	r0, [r7, #4]
 80046f8:	f000 fa03 	bl	8004b02 <HAL_TIM_IC_CaptureCallback>
 80046fc:	e005      	b.n	800470a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80046fe:	6878      	ldr	r0, [r7, #4]
 8004700:	f000 f9f5 	bl	8004aee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004704:	6878      	ldr	r0, [r7, #4]
 8004706:	f000 fa06 	bl	8004b16 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	2200      	movs	r2, #0
 800470e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	691b      	ldr	r3, [r3, #16]
 8004716:	f003 0301 	and.w	r3, r3, #1
 800471a:	2b01      	cmp	r3, #1
 800471c:	d10e      	bne.n	800473c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	68db      	ldr	r3, [r3, #12]
 8004724:	f003 0301 	and.w	r3, r3, #1
 8004728:	2b01      	cmp	r3, #1
 800472a:	d107      	bne.n	800473c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	f06f 0201 	mvn.w	r2, #1
 8004734:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004736:	6878      	ldr	r0, [r7, #4]
 8004738:	f000 f9cf 	bl	8004ada <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	691b      	ldr	r3, [r3, #16]
 8004742:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004746:	2b80      	cmp	r3, #128	; 0x80
 8004748:	d10e      	bne.n	8004768 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	68db      	ldr	r3, [r3, #12]
 8004750:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004754:	2b80      	cmp	r3, #128	; 0x80
 8004756:	d107      	bne.n	8004768 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004760:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004762:	6878      	ldr	r0, [r7, #4]
 8004764:	f000 fd0a 	bl	800517c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	691b      	ldr	r3, [r3, #16]
 800476e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004772:	2b40      	cmp	r3, #64	; 0x40
 8004774:	d10e      	bne.n	8004794 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	68db      	ldr	r3, [r3, #12]
 800477c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004780:	2b40      	cmp	r3, #64	; 0x40
 8004782:	d107      	bne.n	8004794 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800478c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800478e:	6878      	ldr	r0, [r7, #4]
 8004790:	f000 f9cb 	bl	8004b2a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	691b      	ldr	r3, [r3, #16]
 800479a:	f003 0320 	and.w	r3, r3, #32
 800479e:	2b20      	cmp	r3, #32
 80047a0:	d10e      	bne.n	80047c0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	68db      	ldr	r3, [r3, #12]
 80047a8:	f003 0320 	and.w	r3, r3, #32
 80047ac:	2b20      	cmp	r3, #32
 80047ae:	d107      	bne.n	80047c0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	f06f 0220 	mvn.w	r2, #32
 80047b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80047ba:	6878      	ldr	r0, [r7, #4]
 80047bc:	f000 fcd4 	bl	8005168 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80047c0:	bf00      	nop
 80047c2:	3708      	adds	r7, #8
 80047c4:	46bd      	mov	sp, r7
 80047c6:	bd80      	pop	{r7, pc}

080047c8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80047c8:	b580      	push	{r7, lr}
 80047ca:	b086      	sub	sp, #24
 80047cc:	af00      	add	r7, sp, #0
 80047ce:	60f8      	str	r0, [r7, #12]
 80047d0:	60b9      	str	r1, [r7, #8]
 80047d2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80047d4:	2300      	movs	r3, #0
 80047d6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80047de:	2b01      	cmp	r3, #1
 80047e0:	d101      	bne.n	80047e6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80047e2:	2302      	movs	r3, #2
 80047e4:	e0ae      	b.n	8004944 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	2201      	movs	r2, #1
 80047ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	2b0c      	cmp	r3, #12
 80047f2:	f200 809f 	bhi.w	8004934 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80047f6:	a201      	add	r2, pc, #4	; (adr r2, 80047fc <HAL_TIM_PWM_ConfigChannel+0x34>)
 80047f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047fc:	08004831 	.word	0x08004831
 8004800:	08004935 	.word	0x08004935
 8004804:	08004935 	.word	0x08004935
 8004808:	08004935 	.word	0x08004935
 800480c:	08004871 	.word	0x08004871
 8004810:	08004935 	.word	0x08004935
 8004814:	08004935 	.word	0x08004935
 8004818:	08004935 	.word	0x08004935
 800481c:	080048b3 	.word	0x080048b3
 8004820:	08004935 	.word	0x08004935
 8004824:	08004935 	.word	0x08004935
 8004828:	08004935 	.word	0x08004935
 800482c:	080048f3 	.word	0x080048f3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	68b9      	ldr	r1, [r7, #8]
 8004836:	4618      	mov	r0, r3
 8004838:	f000 fa02 	bl	8004c40 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	699a      	ldr	r2, [r3, #24]
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	f042 0208 	orr.w	r2, r2, #8
 800484a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	699a      	ldr	r2, [r3, #24]
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	f022 0204 	bic.w	r2, r2, #4
 800485a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	6999      	ldr	r1, [r3, #24]
 8004862:	68bb      	ldr	r3, [r7, #8]
 8004864:	691a      	ldr	r2, [r3, #16]
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	430a      	orrs	r2, r1
 800486c:	619a      	str	r2, [r3, #24]
      break;
 800486e:	e064      	b.n	800493a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	68b9      	ldr	r1, [r7, #8]
 8004876:	4618      	mov	r0, r3
 8004878:	f000 fa48 	bl	8004d0c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	699a      	ldr	r2, [r3, #24]
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800488a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	699a      	ldr	r2, [r3, #24]
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800489a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	6999      	ldr	r1, [r3, #24]
 80048a2:	68bb      	ldr	r3, [r7, #8]
 80048a4:	691b      	ldr	r3, [r3, #16]
 80048a6:	021a      	lsls	r2, r3, #8
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	430a      	orrs	r2, r1
 80048ae:	619a      	str	r2, [r3, #24]
      break;
 80048b0:	e043      	b.n	800493a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	68b9      	ldr	r1, [r7, #8]
 80048b8:	4618      	mov	r0, r3
 80048ba:	f000 fa93 	bl	8004de4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	69da      	ldr	r2, [r3, #28]
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	f042 0208 	orr.w	r2, r2, #8
 80048cc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	69da      	ldr	r2, [r3, #28]
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	f022 0204 	bic.w	r2, r2, #4
 80048dc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	69d9      	ldr	r1, [r3, #28]
 80048e4:	68bb      	ldr	r3, [r7, #8]
 80048e6:	691a      	ldr	r2, [r3, #16]
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	430a      	orrs	r2, r1
 80048ee:	61da      	str	r2, [r3, #28]
      break;
 80048f0:	e023      	b.n	800493a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	68b9      	ldr	r1, [r7, #8]
 80048f8:	4618      	mov	r0, r3
 80048fa:	f000 fadd 	bl	8004eb8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	69da      	ldr	r2, [r3, #28]
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800490c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	69da      	ldr	r2, [r3, #28]
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800491c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	69d9      	ldr	r1, [r3, #28]
 8004924:	68bb      	ldr	r3, [r7, #8]
 8004926:	691b      	ldr	r3, [r3, #16]
 8004928:	021a      	lsls	r2, r3, #8
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	430a      	orrs	r2, r1
 8004930:	61da      	str	r2, [r3, #28]
      break;
 8004932:	e002      	b.n	800493a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004934:	2301      	movs	r3, #1
 8004936:	75fb      	strb	r3, [r7, #23]
      break;
 8004938:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	2200      	movs	r2, #0
 800493e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004942:	7dfb      	ldrb	r3, [r7, #23]
}
 8004944:	4618      	mov	r0, r3
 8004946:	3718      	adds	r7, #24
 8004948:	46bd      	mov	sp, r7
 800494a:	bd80      	pop	{r7, pc}

0800494c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800494c:	b580      	push	{r7, lr}
 800494e:	b084      	sub	sp, #16
 8004950:	af00      	add	r7, sp, #0
 8004952:	6078      	str	r0, [r7, #4]
 8004954:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004956:	2300      	movs	r3, #0
 8004958:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004960:	2b01      	cmp	r3, #1
 8004962:	d101      	bne.n	8004968 <HAL_TIM_ConfigClockSource+0x1c>
 8004964:	2302      	movs	r3, #2
 8004966:	e0b4      	b.n	8004ad2 <HAL_TIM_ConfigClockSource+0x186>
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	2201      	movs	r2, #1
 800496c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	2202      	movs	r2, #2
 8004974:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	689b      	ldr	r3, [r3, #8]
 800497e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004980:	68bb      	ldr	r3, [r7, #8]
 8004982:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004986:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004988:	68bb      	ldr	r3, [r7, #8]
 800498a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800498e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	68ba      	ldr	r2, [r7, #8]
 8004996:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004998:	683b      	ldr	r3, [r7, #0]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80049a0:	d03e      	beq.n	8004a20 <HAL_TIM_ConfigClockSource+0xd4>
 80049a2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80049a6:	f200 8087 	bhi.w	8004ab8 <HAL_TIM_ConfigClockSource+0x16c>
 80049aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80049ae:	f000 8086 	beq.w	8004abe <HAL_TIM_ConfigClockSource+0x172>
 80049b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80049b6:	d87f      	bhi.n	8004ab8 <HAL_TIM_ConfigClockSource+0x16c>
 80049b8:	2b70      	cmp	r3, #112	; 0x70
 80049ba:	d01a      	beq.n	80049f2 <HAL_TIM_ConfigClockSource+0xa6>
 80049bc:	2b70      	cmp	r3, #112	; 0x70
 80049be:	d87b      	bhi.n	8004ab8 <HAL_TIM_ConfigClockSource+0x16c>
 80049c0:	2b60      	cmp	r3, #96	; 0x60
 80049c2:	d050      	beq.n	8004a66 <HAL_TIM_ConfigClockSource+0x11a>
 80049c4:	2b60      	cmp	r3, #96	; 0x60
 80049c6:	d877      	bhi.n	8004ab8 <HAL_TIM_ConfigClockSource+0x16c>
 80049c8:	2b50      	cmp	r3, #80	; 0x50
 80049ca:	d03c      	beq.n	8004a46 <HAL_TIM_ConfigClockSource+0xfa>
 80049cc:	2b50      	cmp	r3, #80	; 0x50
 80049ce:	d873      	bhi.n	8004ab8 <HAL_TIM_ConfigClockSource+0x16c>
 80049d0:	2b40      	cmp	r3, #64	; 0x40
 80049d2:	d058      	beq.n	8004a86 <HAL_TIM_ConfigClockSource+0x13a>
 80049d4:	2b40      	cmp	r3, #64	; 0x40
 80049d6:	d86f      	bhi.n	8004ab8 <HAL_TIM_ConfigClockSource+0x16c>
 80049d8:	2b30      	cmp	r3, #48	; 0x30
 80049da:	d064      	beq.n	8004aa6 <HAL_TIM_ConfigClockSource+0x15a>
 80049dc:	2b30      	cmp	r3, #48	; 0x30
 80049de:	d86b      	bhi.n	8004ab8 <HAL_TIM_ConfigClockSource+0x16c>
 80049e0:	2b20      	cmp	r3, #32
 80049e2:	d060      	beq.n	8004aa6 <HAL_TIM_ConfigClockSource+0x15a>
 80049e4:	2b20      	cmp	r3, #32
 80049e6:	d867      	bhi.n	8004ab8 <HAL_TIM_ConfigClockSource+0x16c>
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d05c      	beq.n	8004aa6 <HAL_TIM_ConfigClockSource+0x15a>
 80049ec:	2b10      	cmp	r3, #16
 80049ee:	d05a      	beq.n	8004aa6 <HAL_TIM_ConfigClockSource+0x15a>
 80049f0:	e062      	b.n	8004ab8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	6818      	ldr	r0, [r3, #0]
 80049f6:	683b      	ldr	r3, [r7, #0]
 80049f8:	6899      	ldr	r1, [r3, #8]
 80049fa:	683b      	ldr	r3, [r7, #0]
 80049fc:	685a      	ldr	r2, [r3, #4]
 80049fe:	683b      	ldr	r3, [r7, #0]
 8004a00:	68db      	ldr	r3, [r3, #12]
 8004a02:	f000 fb23 	bl	800504c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	689b      	ldr	r3, [r3, #8]
 8004a0c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004a0e:	68bb      	ldr	r3, [r7, #8]
 8004a10:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004a14:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	68ba      	ldr	r2, [r7, #8]
 8004a1c:	609a      	str	r2, [r3, #8]
      break;
 8004a1e:	e04f      	b.n	8004ac0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	6818      	ldr	r0, [r3, #0]
 8004a24:	683b      	ldr	r3, [r7, #0]
 8004a26:	6899      	ldr	r1, [r3, #8]
 8004a28:	683b      	ldr	r3, [r7, #0]
 8004a2a:	685a      	ldr	r2, [r3, #4]
 8004a2c:	683b      	ldr	r3, [r7, #0]
 8004a2e:	68db      	ldr	r3, [r3, #12]
 8004a30:	f000 fb0c 	bl	800504c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	689a      	ldr	r2, [r3, #8]
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004a42:	609a      	str	r2, [r3, #8]
      break;
 8004a44:	e03c      	b.n	8004ac0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	6818      	ldr	r0, [r3, #0]
 8004a4a:	683b      	ldr	r3, [r7, #0]
 8004a4c:	6859      	ldr	r1, [r3, #4]
 8004a4e:	683b      	ldr	r3, [r7, #0]
 8004a50:	68db      	ldr	r3, [r3, #12]
 8004a52:	461a      	mov	r2, r3
 8004a54:	f000 fa80 	bl	8004f58 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	2150      	movs	r1, #80	; 0x50
 8004a5e:	4618      	mov	r0, r3
 8004a60:	f000 fad9 	bl	8005016 <TIM_ITRx_SetConfig>
      break;
 8004a64:	e02c      	b.n	8004ac0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	6818      	ldr	r0, [r3, #0]
 8004a6a:	683b      	ldr	r3, [r7, #0]
 8004a6c:	6859      	ldr	r1, [r3, #4]
 8004a6e:	683b      	ldr	r3, [r7, #0]
 8004a70:	68db      	ldr	r3, [r3, #12]
 8004a72:	461a      	mov	r2, r3
 8004a74:	f000 fa9f 	bl	8004fb6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	2160      	movs	r1, #96	; 0x60
 8004a7e:	4618      	mov	r0, r3
 8004a80:	f000 fac9 	bl	8005016 <TIM_ITRx_SetConfig>
      break;
 8004a84:	e01c      	b.n	8004ac0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	6818      	ldr	r0, [r3, #0]
 8004a8a:	683b      	ldr	r3, [r7, #0]
 8004a8c:	6859      	ldr	r1, [r3, #4]
 8004a8e:	683b      	ldr	r3, [r7, #0]
 8004a90:	68db      	ldr	r3, [r3, #12]
 8004a92:	461a      	mov	r2, r3
 8004a94:	f000 fa60 	bl	8004f58 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	2140      	movs	r1, #64	; 0x40
 8004a9e:	4618      	mov	r0, r3
 8004aa0:	f000 fab9 	bl	8005016 <TIM_ITRx_SetConfig>
      break;
 8004aa4:	e00c      	b.n	8004ac0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681a      	ldr	r2, [r3, #0]
 8004aaa:	683b      	ldr	r3, [r7, #0]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	4619      	mov	r1, r3
 8004ab0:	4610      	mov	r0, r2
 8004ab2:	f000 fab0 	bl	8005016 <TIM_ITRx_SetConfig>
      break;
 8004ab6:	e003      	b.n	8004ac0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004ab8:	2301      	movs	r3, #1
 8004aba:	73fb      	strb	r3, [r7, #15]
      break;
 8004abc:	e000      	b.n	8004ac0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004abe:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	2201      	movs	r2, #1
 8004ac4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	2200      	movs	r2, #0
 8004acc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004ad0:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ad2:	4618      	mov	r0, r3
 8004ad4:	3710      	adds	r7, #16
 8004ad6:	46bd      	mov	sp, r7
 8004ad8:	bd80      	pop	{r7, pc}

08004ada <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004ada:	b480      	push	{r7}
 8004adc:	b083      	sub	sp, #12
 8004ade:	af00      	add	r7, sp, #0
 8004ae0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004ae2:	bf00      	nop
 8004ae4:	370c      	adds	r7, #12
 8004ae6:	46bd      	mov	sp, r7
 8004ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aec:	4770      	bx	lr

08004aee <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004aee:	b480      	push	{r7}
 8004af0:	b083      	sub	sp, #12
 8004af2:	af00      	add	r7, sp, #0
 8004af4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004af6:	bf00      	nop
 8004af8:	370c      	adds	r7, #12
 8004afa:	46bd      	mov	sp, r7
 8004afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b00:	4770      	bx	lr

08004b02 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004b02:	b480      	push	{r7}
 8004b04:	b083      	sub	sp, #12
 8004b06:	af00      	add	r7, sp, #0
 8004b08:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004b0a:	bf00      	nop
 8004b0c:	370c      	adds	r7, #12
 8004b0e:	46bd      	mov	sp, r7
 8004b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b14:	4770      	bx	lr

08004b16 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004b16:	b480      	push	{r7}
 8004b18:	b083      	sub	sp, #12
 8004b1a:	af00      	add	r7, sp, #0
 8004b1c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004b1e:	bf00      	nop
 8004b20:	370c      	adds	r7, #12
 8004b22:	46bd      	mov	sp, r7
 8004b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b28:	4770      	bx	lr

08004b2a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004b2a:	b480      	push	{r7}
 8004b2c:	b083      	sub	sp, #12
 8004b2e:	af00      	add	r7, sp, #0
 8004b30:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004b32:	bf00      	nop
 8004b34:	370c      	adds	r7, #12
 8004b36:	46bd      	mov	sp, r7
 8004b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b3c:	4770      	bx	lr
	...

08004b40 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004b40:	b480      	push	{r7}
 8004b42:	b085      	sub	sp, #20
 8004b44:	af00      	add	r7, sp, #0
 8004b46:	6078      	str	r0, [r7, #4]
 8004b48:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	4a34      	ldr	r2, [pc, #208]	; (8004c24 <TIM_Base_SetConfig+0xe4>)
 8004b54:	4293      	cmp	r3, r2
 8004b56:	d00f      	beq.n	8004b78 <TIM_Base_SetConfig+0x38>
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b5e:	d00b      	beq.n	8004b78 <TIM_Base_SetConfig+0x38>
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	4a31      	ldr	r2, [pc, #196]	; (8004c28 <TIM_Base_SetConfig+0xe8>)
 8004b64:	4293      	cmp	r3, r2
 8004b66:	d007      	beq.n	8004b78 <TIM_Base_SetConfig+0x38>
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	4a30      	ldr	r2, [pc, #192]	; (8004c2c <TIM_Base_SetConfig+0xec>)
 8004b6c:	4293      	cmp	r3, r2
 8004b6e:	d003      	beq.n	8004b78 <TIM_Base_SetConfig+0x38>
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	4a2f      	ldr	r2, [pc, #188]	; (8004c30 <TIM_Base_SetConfig+0xf0>)
 8004b74:	4293      	cmp	r3, r2
 8004b76:	d108      	bne.n	8004b8a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b7e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004b80:	683b      	ldr	r3, [r7, #0]
 8004b82:	685b      	ldr	r3, [r3, #4]
 8004b84:	68fa      	ldr	r2, [r7, #12]
 8004b86:	4313      	orrs	r3, r2
 8004b88:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	4a25      	ldr	r2, [pc, #148]	; (8004c24 <TIM_Base_SetConfig+0xe4>)
 8004b8e:	4293      	cmp	r3, r2
 8004b90:	d01b      	beq.n	8004bca <TIM_Base_SetConfig+0x8a>
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b98:	d017      	beq.n	8004bca <TIM_Base_SetConfig+0x8a>
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	4a22      	ldr	r2, [pc, #136]	; (8004c28 <TIM_Base_SetConfig+0xe8>)
 8004b9e:	4293      	cmp	r3, r2
 8004ba0:	d013      	beq.n	8004bca <TIM_Base_SetConfig+0x8a>
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	4a21      	ldr	r2, [pc, #132]	; (8004c2c <TIM_Base_SetConfig+0xec>)
 8004ba6:	4293      	cmp	r3, r2
 8004ba8:	d00f      	beq.n	8004bca <TIM_Base_SetConfig+0x8a>
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	4a20      	ldr	r2, [pc, #128]	; (8004c30 <TIM_Base_SetConfig+0xf0>)
 8004bae:	4293      	cmp	r3, r2
 8004bb0:	d00b      	beq.n	8004bca <TIM_Base_SetConfig+0x8a>
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	4a1f      	ldr	r2, [pc, #124]	; (8004c34 <TIM_Base_SetConfig+0xf4>)
 8004bb6:	4293      	cmp	r3, r2
 8004bb8:	d007      	beq.n	8004bca <TIM_Base_SetConfig+0x8a>
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	4a1e      	ldr	r2, [pc, #120]	; (8004c38 <TIM_Base_SetConfig+0xf8>)
 8004bbe:	4293      	cmp	r3, r2
 8004bc0:	d003      	beq.n	8004bca <TIM_Base_SetConfig+0x8a>
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	4a1d      	ldr	r2, [pc, #116]	; (8004c3c <TIM_Base_SetConfig+0xfc>)
 8004bc6:	4293      	cmp	r3, r2
 8004bc8:	d108      	bne.n	8004bdc <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004bd0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004bd2:	683b      	ldr	r3, [r7, #0]
 8004bd4:	68db      	ldr	r3, [r3, #12]
 8004bd6:	68fa      	ldr	r2, [r7, #12]
 8004bd8:	4313      	orrs	r3, r2
 8004bda:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004be2:	683b      	ldr	r3, [r7, #0]
 8004be4:	695b      	ldr	r3, [r3, #20]
 8004be6:	4313      	orrs	r3, r2
 8004be8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	68fa      	ldr	r2, [r7, #12]
 8004bee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004bf0:	683b      	ldr	r3, [r7, #0]
 8004bf2:	689a      	ldr	r2, [r3, #8]
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004bf8:	683b      	ldr	r3, [r7, #0]
 8004bfa:	681a      	ldr	r2, [r3, #0]
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	4a08      	ldr	r2, [pc, #32]	; (8004c24 <TIM_Base_SetConfig+0xe4>)
 8004c04:	4293      	cmp	r3, r2
 8004c06:	d103      	bne.n	8004c10 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004c08:	683b      	ldr	r3, [r7, #0]
 8004c0a:	691a      	ldr	r2, [r3, #16]
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	2201      	movs	r2, #1
 8004c14:	615a      	str	r2, [r3, #20]
}
 8004c16:	bf00      	nop
 8004c18:	3714      	adds	r7, #20
 8004c1a:	46bd      	mov	sp, r7
 8004c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c20:	4770      	bx	lr
 8004c22:	bf00      	nop
 8004c24:	40010000 	.word	0x40010000
 8004c28:	40000400 	.word	0x40000400
 8004c2c:	40000800 	.word	0x40000800
 8004c30:	40000c00 	.word	0x40000c00
 8004c34:	40014000 	.word	0x40014000
 8004c38:	40014400 	.word	0x40014400
 8004c3c:	40014800 	.word	0x40014800

08004c40 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004c40:	b480      	push	{r7}
 8004c42:	b087      	sub	sp, #28
 8004c44:	af00      	add	r7, sp, #0
 8004c46:	6078      	str	r0, [r7, #4]
 8004c48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	6a1b      	ldr	r3, [r3, #32]
 8004c4e:	f023 0201 	bic.w	r2, r3, #1
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	6a1b      	ldr	r3, [r3, #32]
 8004c5a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	685b      	ldr	r3, [r3, #4]
 8004c60:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	699b      	ldr	r3, [r3, #24]
 8004c66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c6e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	f023 0303 	bic.w	r3, r3, #3
 8004c76:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004c78:	683b      	ldr	r3, [r7, #0]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	68fa      	ldr	r2, [r7, #12]
 8004c7e:	4313      	orrs	r3, r2
 8004c80:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004c82:	697b      	ldr	r3, [r7, #20]
 8004c84:	f023 0302 	bic.w	r3, r3, #2
 8004c88:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004c8a:	683b      	ldr	r3, [r7, #0]
 8004c8c:	689b      	ldr	r3, [r3, #8]
 8004c8e:	697a      	ldr	r2, [r7, #20]
 8004c90:	4313      	orrs	r3, r2
 8004c92:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	4a1c      	ldr	r2, [pc, #112]	; (8004d08 <TIM_OC1_SetConfig+0xc8>)
 8004c98:	4293      	cmp	r3, r2
 8004c9a:	d10c      	bne.n	8004cb6 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004c9c:	697b      	ldr	r3, [r7, #20]
 8004c9e:	f023 0308 	bic.w	r3, r3, #8
 8004ca2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004ca4:	683b      	ldr	r3, [r7, #0]
 8004ca6:	68db      	ldr	r3, [r3, #12]
 8004ca8:	697a      	ldr	r2, [r7, #20]
 8004caa:	4313      	orrs	r3, r2
 8004cac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004cae:	697b      	ldr	r3, [r7, #20]
 8004cb0:	f023 0304 	bic.w	r3, r3, #4
 8004cb4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	4a13      	ldr	r2, [pc, #76]	; (8004d08 <TIM_OC1_SetConfig+0xc8>)
 8004cba:	4293      	cmp	r3, r2
 8004cbc:	d111      	bne.n	8004ce2 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004cbe:	693b      	ldr	r3, [r7, #16]
 8004cc0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004cc4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004cc6:	693b      	ldr	r3, [r7, #16]
 8004cc8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004ccc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004cce:	683b      	ldr	r3, [r7, #0]
 8004cd0:	695b      	ldr	r3, [r3, #20]
 8004cd2:	693a      	ldr	r2, [r7, #16]
 8004cd4:	4313      	orrs	r3, r2
 8004cd6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004cd8:	683b      	ldr	r3, [r7, #0]
 8004cda:	699b      	ldr	r3, [r3, #24]
 8004cdc:	693a      	ldr	r2, [r7, #16]
 8004cde:	4313      	orrs	r3, r2
 8004ce0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	693a      	ldr	r2, [r7, #16]
 8004ce6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	68fa      	ldr	r2, [r7, #12]
 8004cec:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004cee:	683b      	ldr	r3, [r7, #0]
 8004cf0:	685a      	ldr	r2, [r3, #4]
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	697a      	ldr	r2, [r7, #20]
 8004cfa:	621a      	str	r2, [r3, #32]
}
 8004cfc:	bf00      	nop
 8004cfe:	371c      	adds	r7, #28
 8004d00:	46bd      	mov	sp, r7
 8004d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d06:	4770      	bx	lr
 8004d08:	40010000 	.word	0x40010000

08004d0c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004d0c:	b480      	push	{r7}
 8004d0e:	b087      	sub	sp, #28
 8004d10:	af00      	add	r7, sp, #0
 8004d12:	6078      	str	r0, [r7, #4]
 8004d14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	6a1b      	ldr	r3, [r3, #32]
 8004d1a:	f023 0210 	bic.w	r2, r3, #16
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	6a1b      	ldr	r3, [r3, #32]
 8004d26:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	685b      	ldr	r3, [r3, #4]
 8004d2c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	699b      	ldr	r3, [r3, #24]
 8004d32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d3a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d42:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004d44:	683b      	ldr	r3, [r7, #0]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	021b      	lsls	r3, r3, #8
 8004d4a:	68fa      	ldr	r2, [r7, #12]
 8004d4c:	4313      	orrs	r3, r2
 8004d4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004d50:	697b      	ldr	r3, [r7, #20]
 8004d52:	f023 0320 	bic.w	r3, r3, #32
 8004d56:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004d58:	683b      	ldr	r3, [r7, #0]
 8004d5a:	689b      	ldr	r3, [r3, #8]
 8004d5c:	011b      	lsls	r3, r3, #4
 8004d5e:	697a      	ldr	r2, [r7, #20]
 8004d60:	4313      	orrs	r3, r2
 8004d62:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	4a1e      	ldr	r2, [pc, #120]	; (8004de0 <TIM_OC2_SetConfig+0xd4>)
 8004d68:	4293      	cmp	r3, r2
 8004d6a:	d10d      	bne.n	8004d88 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004d6c:	697b      	ldr	r3, [r7, #20]
 8004d6e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004d72:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004d74:	683b      	ldr	r3, [r7, #0]
 8004d76:	68db      	ldr	r3, [r3, #12]
 8004d78:	011b      	lsls	r3, r3, #4
 8004d7a:	697a      	ldr	r2, [r7, #20]
 8004d7c:	4313      	orrs	r3, r2
 8004d7e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004d80:	697b      	ldr	r3, [r7, #20]
 8004d82:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004d86:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	4a15      	ldr	r2, [pc, #84]	; (8004de0 <TIM_OC2_SetConfig+0xd4>)
 8004d8c:	4293      	cmp	r3, r2
 8004d8e:	d113      	bne.n	8004db8 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004d90:	693b      	ldr	r3, [r7, #16]
 8004d92:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004d96:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004d98:	693b      	ldr	r3, [r7, #16]
 8004d9a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004d9e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004da0:	683b      	ldr	r3, [r7, #0]
 8004da2:	695b      	ldr	r3, [r3, #20]
 8004da4:	009b      	lsls	r3, r3, #2
 8004da6:	693a      	ldr	r2, [r7, #16]
 8004da8:	4313      	orrs	r3, r2
 8004daa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004dac:	683b      	ldr	r3, [r7, #0]
 8004dae:	699b      	ldr	r3, [r3, #24]
 8004db0:	009b      	lsls	r3, r3, #2
 8004db2:	693a      	ldr	r2, [r7, #16]
 8004db4:	4313      	orrs	r3, r2
 8004db6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	693a      	ldr	r2, [r7, #16]
 8004dbc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	68fa      	ldr	r2, [r7, #12]
 8004dc2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004dc4:	683b      	ldr	r3, [r7, #0]
 8004dc6:	685a      	ldr	r2, [r3, #4]
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	697a      	ldr	r2, [r7, #20]
 8004dd0:	621a      	str	r2, [r3, #32]
}
 8004dd2:	bf00      	nop
 8004dd4:	371c      	adds	r7, #28
 8004dd6:	46bd      	mov	sp, r7
 8004dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ddc:	4770      	bx	lr
 8004dde:	bf00      	nop
 8004de0:	40010000 	.word	0x40010000

08004de4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004de4:	b480      	push	{r7}
 8004de6:	b087      	sub	sp, #28
 8004de8:	af00      	add	r7, sp, #0
 8004dea:	6078      	str	r0, [r7, #4]
 8004dec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	6a1b      	ldr	r3, [r3, #32]
 8004df2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	6a1b      	ldr	r3, [r3, #32]
 8004dfe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	685b      	ldr	r3, [r3, #4]
 8004e04:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	69db      	ldr	r3, [r3, #28]
 8004e0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e12:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	f023 0303 	bic.w	r3, r3, #3
 8004e1a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004e1c:	683b      	ldr	r3, [r7, #0]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	68fa      	ldr	r2, [r7, #12]
 8004e22:	4313      	orrs	r3, r2
 8004e24:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004e26:	697b      	ldr	r3, [r7, #20]
 8004e28:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004e2c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004e2e:	683b      	ldr	r3, [r7, #0]
 8004e30:	689b      	ldr	r3, [r3, #8]
 8004e32:	021b      	lsls	r3, r3, #8
 8004e34:	697a      	ldr	r2, [r7, #20]
 8004e36:	4313      	orrs	r3, r2
 8004e38:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	4a1d      	ldr	r2, [pc, #116]	; (8004eb4 <TIM_OC3_SetConfig+0xd0>)
 8004e3e:	4293      	cmp	r3, r2
 8004e40:	d10d      	bne.n	8004e5e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004e42:	697b      	ldr	r3, [r7, #20]
 8004e44:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004e48:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004e4a:	683b      	ldr	r3, [r7, #0]
 8004e4c:	68db      	ldr	r3, [r3, #12]
 8004e4e:	021b      	lsls	r3, r3, #8
 8004e50:	697a      	ldr	r2, [r7, #20]
 8004e52:	4313      	orrs	r3, r2
 8004e54:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004e56:	697b      	ldr	r3, [r7, #20]
 8004e58:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004e5c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	4a14      	ldr	r2, [pc, #80]	; (8004eb4 <TIM_OC3_SetConfig+0xd0>)
 8004e62:	4293      	cmp	r3, r2
 8004e64:	d113      	bne.n	8004e8e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004e66:	693b      	ldr	r3, [r7, #16]
 8004e68:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004e6c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004e6e:	693b      	ldr	r3, [r7, #16]
 8004e70:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004e74:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004e76:	683b      	ldr	r3, [r7, #0]
 8004e78:	695b      	ldr	r3, [r3, #20]
 8004e7a:	011b      	lsls	r3, r3, #4
 8004e7c:	693a      	ldr	r2, [r7, #16]
 8004e7e:	4313      	orrs	r3, r2
 8004e80:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004e82:	683b      	ldr	r3, [r7, #0]
 8004e84:	699b      	ldr	r3, [r3, #24]
 8004e86:	011b      	lsls	r3, r3, #4
 8004e88:	693a      	ldr	r2, [r7, #16]
 8004e8a:	4313      	orrs	r3, r2
 8004e8c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	693a      	ldr	r2, [r7, #16]
 8004e92:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	68fa      	ldr	r2, [r7, #12]
 8004e98:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004e9a:	683b      	ldr	r3, [r7, #0]
 8004e9c:	685a      	ldr	r2, [r3, #4]
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	697a      	ldr	r2, [r7, #20]
 8004ea6:	621a      	str	r2, [r3, #32]
}
 8004ea8:	bf00      	nop
 8004eaa:	371c      	adds	r7, #28
 8004eac:	46bd      	mov	sp, r7
 8004eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb2:	4770      	bx	lr
 8004eb4:	40010000 	.word	0x40010000

08004eb8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004eb8:	b480      	push	{r7}
 8004eba:	b087      	sub	sp, #28
 8004ebc:	af00      	add	r7, sp, #0
 8004ebe:	6078      	str	r0, [r7, #4]
 8004ec0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	6a1b      	ldr	r3, [r3, #32]
 8004ec6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	6a1b      	ldr	r3, [r3, #32]
 8004ed2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	685b      	ldr	r3, [r3, #4]
 8004ed8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	69db      	ldr	r3, [r3, #28]
 8004ede:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ee6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004eee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004ef0:	683b      	ldr	r3, [r7, #0]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	021b      	lsls	r3, r3, #8
 8004ef6:	68fa      	ldr	r2, [r7, #12]
 8004ef8:	4313      	orrs	r3, r2
 8004efa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004efc:	693b      	ldr	r3, [r7, #16]
 8004efe:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004f02:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004f04:	683b      	ldr	r3, [r7, #0]
 8004f06:	689b      	ldr	r3, [r3, #8]
 8004f08:	031b      	lsls	r3, r3, #12
 8004f0a:	693a      	ldr	r2, [r7, #16]
 8004f0c:	4313      	orrs	r3, r2
 8004f0e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	4a10      	ldr	r2, [pc, #64]	; (8004f54 <TIM_OC4_SetConfig+0x9c>)
 8004f14:	4293      	cmp	r3, r2
 8004f16:	d109      	bne.n	8004f2c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004f18:	697b      	ldr	r3, [r7, #20]
 8004f1a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004f1e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004f20:	683b      	ldr	r3, [r7, #0]
 8004f22:	695b      	ldr	r3, [r3, #20]
 8004f24:	019b      	lsls	r3, r3, #6
 8004f26:	697a      	ldr	r2, [r7, #20]
 8004f28:	4313      	orrs	r3, r2
 8004f2a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	697a      	ldr	r2, [r7, #20]
 8004f30:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	68fa      	ldr	r2, [r7, #12]
 8004f36:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004f38:	683b      	ldr	r3, [r7, #0]
 8004f3a:	685a      	ldr	r2, [r3, #4]
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	693a      	ldr	r2, [r7, #16]
 8004f44:	621a      	str	r2, [r3, #32]
}
 8004f46:	bf00      	nop
 8004f48:	371c      	adds	r7, #28
 8004f4a:	46bd      	mov	sp, r7
 8004f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f50:	4770      	bx	lr
 8004f52:	bf00      	nop
 8004f54:	40010000 	.word	0x40010000

08004f58 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004f58:	b480      	push	{r7}
 8004f5a:	b087      	sub	sp, #28
 8004f5c:	af00      	add	r7, sp, #0
 8004f5e:	60f8      	str	r0, [r7, #12]
 8004f60:	60b9      	str	r1, [r7, #8]
 8004f62:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	6a1b      	ldr	r3, [r3, #32]
 8004f68:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	6a1b      	ldr	r3, [r3, #32]
 8004f6e:	f023 0201 	bic.w	r2, r3, #1
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	699b      	ldr	r3, [r3, #24]
 8004f7a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004f7c:	693b      	ldr	r3, [r7, #16]
 8004f7e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004f82:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	011b      	lsls	r3, r3, #4
 8004f88:	693a      	ldr	r2, [r7, #16]
 8004f8a:	4313      	orrs	r3, r2
 8004f8c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004f8e:	697b      	ldr	r3, [r7, #20]
 8004f90:	f023 030a 	bic.w	r3, r3, #10
 8004f94:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004f96:	697a      	ldr	r2, [r7, #20]
 8004f98:	68bb      	ldr	r3, [r7, #8]
 8004f9a:	4313      	orrs	r3, r2
 8004f9c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	693a      	ldr	r2, [r7, #16]
 8004fa2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	697a      	ldr	r2, [r7, #20]
 8004fa8:	621a      	str	r2, [r3, #32]
}
 8004faa:	bf00      	nop
 8004fac:	371c      	adds	r7, #28
 8004fae:	46bd      	mov	sp, r7
 8004fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb4:	4770      	bx	lr

08004fb6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004fb6:	b480      	push	{r7}
 8004fb8:	b087      	sub	sp, #28
 8004fba:	af00      	add	r7, sp, #0
 8004fbc:	60f8      	str	r0, [r7, #12]
 8004fbe:	60b9      	str	r1, [r7, #8]
 8004fc0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	6a1b      	ldr	r3, [r3, #32]
 8004fc6:	f023 0210 	bic.w	r2, r3, #16
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	699b      	ldr	r3, [r3, #24]
 8004fd2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	6a1b      	ldr	r3, [r3, #32]
 8004fd8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004fda:	697b      	ldr	r3, [r7, #20]
 8004fdc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004fe0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	031b      	lsls	r3, r3, #12
 8004fe6:	697a      	ldr	r2, [r7, #20]
 8004fe8:	4313      	orrs	r3, r2
 8004fea:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004fec:	693b      	ldr	r3, [r7, #16]
 8004fee:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004ff2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004ff4:	68bb      	ldr	r3, [r7, #8]
 8004ff6:	011b      	lsls	r3, r3, #4
 8004ff8:	693a      	ldr	r2, [r7, #16]
 8004ffa:	4313      	orrs	r3, r2
 8004ffc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	697a      	ldr	r2, [r7, #20]
 8005002:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	693a      	ldr	r2, [r7, #16]
 8005008:	621a      	str	r2, [r3, #32]
}
 800500a:	bf00      	nop
 800500c:	371c      	adds	r7, #28
 800500e:	46bd      	mov	sp, r7
 8005010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005014:	4770      	bx	lr

08005016 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005016:	b480      	push	{r7}
 8005018:	b085      	sub	sp, #20
 800501a:	af00      	add	r7, sp, #0
 800501c:	6078      	str	r0, [r7, #4]
 800501e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	689b      	ldr	r3, [r3, #8]
 8005024:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800502c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800502e:	683a      	ldr	r2, [r7, #0]
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	4313      	orrs	r3, r2
 8005034:	f043 0307 	orr.w	r3, r3, #7
 8005038:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	68fa      	ldr	r2, [r7, #12]
 800503e:	609a      	str	r2, [r3, #8]
}
 8005040:	bf00      	nop
 8005042:	3714      	adds	r7, #20
 8005044:	46bd      	mov	sp, r7
 8005046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800504a:	4770      	bx	lr

0800504c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800504c:	b480      	push	{r7}
 800504e:	b087      	sub	sp, #28
 8005050:	af00      	add	r7, sp, #0
 8005052:	60f8      	str	r0, [r7, #12]
 8005054:	60b9      	str	r1, [r7, #8]
 8005056:	607a      	str	r2, [r7, #4]
 8005058:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	689b      	ldr	r3, [r3, #8]
 800505e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005060:	697b      	ldr	r3, [r7, #20]
 8005062:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005066:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005068:	683b      	ldr	r3, [r7, #0]
 800506a:	021a      	lsls	r2, r3, #8
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	431a      	orrs	r2, r3
 8005070:	68bb      	ldr	r3, [r7, #8]
 8005072:	4313      	orrs	r3, r2
 8005074:	697a      	ldr	r2, [r7, #20]
 8005076:	4313      	orrs	r3, r2
 8005078:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	697a      	ldr	r2, [r7, #20]
 800507e:	609a      	str	r2, [r3, #8]
}
 8005080:	bf00      	nop
 8005082:	371c      	adds	r7, #28
 8005084:	46bd      	mov	sp, r7
 8005086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800508a:	4770      	bx	lr

0800508c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800508c:	b480      	push	{r7}
 800508e:	b085      	sub	sp, #20
 8005090:	af00      	add	r7, sp, #0
 8005092:	6078      	str	r0, [r7, #4]
 8005094:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800509c:	2b01      	cmp	r3, #1
 800509e:	d101      	bne.n	80050a4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80050a0:	2302      	movs	r3, #2
 80050a2:	e050      	b.n	8005146 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	2201      	movs	r2, #1
 80050a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	2202      	movs	r2, #2
 80050b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	685b      	ldr	r3, [r3, #4]
 80050ba:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	689b      	ldr	r3, [r3, #8]
 80050c2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050ca:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80050cc:	683b      	ldr	r3, [r7, #0]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	68fa      	ldr	r2, [r7, #12]
 80050d2:	4313      	orrs	r3, r2
 80050d4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	68fa      	ldr	r2, [r7, #12]
 80050dc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	4a1c      	ldr	r2, [pc, #112]	; (8005154 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80050e4:	4293      	cmp	r3, r2
 80050e6:	d018      	beq.n	800511a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80050f0:	d013      	beq.n	800511a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	4a18      	ldr	r2, [pc, #96]	; (8005158 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80050f8:	4293      	cmp	r3, r2
 80050fa:	d00e      	beq.n	800511a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	4a16      	ldr	r2, [pc, #88]	; (800515c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005102:	4293      	cmp	r3, r2
 8005104:	d009      	beq.n	800511a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	4a15      	ldr	r2, [pc, #84]	; (8005160 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800510c:	4293      	cmp	r3, r2
 800510e:	d004      	beq.n	800511a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	4a13      	ldr	r2, [pc, #76]	; (8005164 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8005116:	4293      	cmp	r3, r2
 8005118:	d10c      	bne.n	8005134 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800511a:	68bb      	ldr	r3, [r7, #8]
 800511c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005120:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005122:	683b      	ldr	r3, [r7, #0]
 8005124:	685b      	ldr	r3, [r3, #4]
 8005126:	68ba      	ldr	r2, [r7, #8]
 8005128:	4313      	orrs	r3, r2
 800512a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	68ba      	ldr	r2, [r7, #8]
 8005132:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	2201      	movs	r2, #1
 8005138:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	2200      	movs	r2, #0
 8005140:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005144:	2300      	movs	r3, #0
}
 8005146:	4618      	mov	r0, r3
 8005148:	3714      	adds	r7, #20
 800514a:	46bd      	mov	sp, r7
 800514c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005150:	4770      	bx	lr
 8005152:	bf00      	nop
 8005154:	40010000 	.word	0x40010000
 8005158:	40000400 	.word	0x40000400
 800515c:	40000800 	.word	0x40000800
 8005160:	40000c00 	.word	0x40000c00
 8005164:	40014000 	.word	0x40014000

08005168 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005168:	b480      	push	{r7}
 800516a:	b083      	sub	sp, #12
 800516c:	af00      	add	r7, sp, #0
 800516e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005170:	bf00      	nop
 8005172:	370c      	adds	r7, #12
 8005174:	46bd      	mov	sp, r7
 8005176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800517a:	4770      	bx	lr

0800517c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800517c:	b480      	push	{r7}
 800517e:	b083      	sub	sp, #12
 8005180:	af00      	add	r7, sp, #0
 8005182:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005184:	bf00      	nop
 8005186:	370c      	adds	r7, #12
 8005188:	46bd      	mov	sp, r7
 800518a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800518e:	4770      	bx	lr

08005190 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005190:	b580      	push	{r7, lr}
 8005192:	b082      	sub	sp, #8
 8005194:	af00      	add	r7, sp, #0
 8005196:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	2b00      	cmp	r3, #0
 800519c:	d101      	bne.n	80051a2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800519e:	2301      	movs	r3, #1
 80051a0:	e04a      	b.n	8005238 <HAL_UART_Init+0xa8>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80051a8:	b2db      	uxtb	r3, r3
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d111      	bne.n	80051d2 <HAL_UART_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	2200      	movs	r2, #0
 80051b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 80051b6:	6878      	ldr	r0, [r7, #4]
 80051b8:	f000 fb58 	bl	800586c <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d102      	bne.n	80051ca <HAL_UART_Init+0x3a>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	4a1e      	ldr	r2, [pc, #120]	; (8005240 <HAL_UART_Init+0xb0>)
 80051c8:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80051ce:	6878      	ldr	r0, [r7, #4]
 80051d0:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	2224      	movs	r2, #36	; 0x24
 80051d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	68da      	ldr	r2, [r3, #12]
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80051e8:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80051ea:	6878      	ldr	r0, [r7, #4]
 80051ec:	f000 fed8 	bl	8005fa0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	691a      	ldr	r2, [r3, #16]
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80051fe:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	695a      	ldr	r2, [r3, #20]
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800520e:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	68da      	ldr	r2, [r3, #12]
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800521e:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	2200      	movs	r2, #0
 8005224:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	2220      	movs	r2, #32
 800522a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	2220      	movs	r2, #32
 8005232:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005236:	2300      	movs	r3, #0
}
 8005238:	4618      	mov	r0, r3
 800523a:	3708      	adds	r7, #8
 800523c:	46bd      	mov	sp, r7
 800523e:	bd80      	pop	{r7, pc}
 8005240:	08001605 	.word	0x08001605

08005244 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005244:	b580      	push	{r7, lr}
 8005246:	b084      	sub	sp, #16
 8005248:	af00      	add	r7, sp, #0
 800524a:	60f8      	str	r0, [r7, #12]
 800524c:	60b9      	str	r1, [r7, #8]
 800524e:	4613      	mov	r3, r2
 8005250:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005258:	b2db      	uxtb	r3, r3
 800525a:	2b20      	cmp	r3, #32
 800525c:	d11d      	bne.n	800529a <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800525e:	68bb      	ldr	r3, [r7, #8]
 8005260:	2b00      	cmp	r3, #0
 8005262:	d002      	beq.n	800526a <HAL_UART_Receive_DMA+0x26>
 8005264:	88fb      	ldrh	r3, [r7, #6]
 8005266:	2b00      	cmp	r3, #0
 8005268:	d101      	bne.n	800526e <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800526a:	2301      	movs	r3, #1
 800526c:	e016      	b.n	800529c <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005274:	2b01      	cmp	r3, #1
 8005276:	d101      	bne.n	800527c <HAL_UART_Receive_DMA+0x38>
 8005278:	2302      	movs	r3, #2
 800527a:	e00f      	b.n	800529c <HAL_UART_Receive_DMA+0x58>
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	2201      	movs	r2, #1
 8005280:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	2200      	movs	r2, #0
 8005288:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800528a:	88fb      	ldrh	r3, [r7, #6]
 800528c:	461a      	mov	r2, r3
 800528e:	68b9      	ldr	r1, [r7, #8]
 8005290:	68f8      	ldr	r0, [r7, #12]
 8005292:	f000 fc21 	bl	8005ad8 <UART_Start_Receive_DMA>
 8005296:	4603      	mov	r3, r0
 8005298:	e000      	b.n	800529c <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 800529a:	2302      	movs	r3, #2
  }
}
 800529c:	4618      	mov	r0, r3
 800529e:	3710      	adds	r7, #16
 80052a0:	46bd      	mov	sp, r7
 80052a2:	bd80      	pop	{r7, pc}

080052a4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80052a4:	b580      	push	{r7, lr}
 80052a6:	b0ba      	sub	sp, #232	; 0xe8
 80052a8:	af00      	add	r7, sp, #0
 80052aa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	68db      	ldr	r3, [r3, #12]
 80052bc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	695b      	ldr	r3, [r3, #20]
 80052c6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80052ca:	2300      	movs	r3, #0
 80052cc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80052d0:	2300      	movs	r3, #0
 80052d2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80052d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80052da:	f003 030f 	and.w	r3, r3, #15
 80052de:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80052e2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d10f      	bne.n	800530a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80052ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80052ee:	f003 0320 	and.w	r3, r3, #32
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d009      	beq.n	800530a <HAL_UART_IRQHandler+0x66>
 80052f6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80052fa:	f003 0320 	and.w	r3, r3, #32
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d003      	beq.n	800530a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005302:	6878      	ldr	r0, [r7, #4]
 8005304:	f000 fd8f 	bl	8005e26 <UART_Receive_IT>
      return;
 8005308:	e25b      	b.n	80057c2 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800530a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800530e:	2b00      	cmp	r3, #0
 8005310:	f000 80e1 	beq.w	80054d6 <HAL_UART_IRQHandler+0x232>
 8005314:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005318:	f003 0301 	and.w	r3, r3, #1
 800531c:	2b00      	cmp	r3, #0
 800531e:	d106      	bne.n	800532e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005320:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005324:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005328:	2b00      	cmp	r3, #0
 800532a:	f000 80d4 	beq.w	80054d6 <HAL_UART_IRQHandler+0x232>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800532e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005332:	f003 0301 	and.w	r3, r3, #1
 8005336:	2b00      	cmp	r3, #0
 8005338:	d00b      	beq.n	8005352 <HAL_UART_IRQHandler+0xae>
 800533a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800533e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005342:	2b00      	cmp	r3, #0
 8005344:	d005      	beq.n	8005352 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800534a:	f043 0201 	orr.w	r2, r3, #1
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005352:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005356:	f003 0304 	and.w	r3, r3, #4
 800535a:	2b00      	cmp	r3, #0
 800535c:	d00b      	beq.n	8005376 <HAL_UART_IRQHandler+0xd2>
 800535e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005362:	f003 0301 	and.w	r3, r3, #1
 8005366:	2b00      	cmp	r3, #0
 8005368:	d005      	beq.n	8005376 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800536e:	f043 0202 	orr.w	r2, r3, #2
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005376:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800537a:	f003 0302 	and.w	r3, r3, #2
 800537e:	2b00      	cmp	r3, #0
 8005380:	d00b      	beq.n	800539a <HAL_UART_IRQHandler+0xf6>
 8005382:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005386:	f003 0301 	and.w	r3, r3, #1
 800538a:	2b00      	cmp	r3, #0
 800538c:	d005      	beq.n	800539a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005392:	f043 0204 	orr.w	r2, r3, #4
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800539a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800539e:	f003 0308 	and.w	r3, r3, #8
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d011      	beq.n	80053ca <HAL_UART_IRQHandler+0x126>
 80053a6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80053aa:	f003 0320 	and.w	r3, r3, #32
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d105      	bne.n	80053be <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80053b2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80053b6:	f003 0301 	and.w	r3, r3, #1
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d005      	beq.n	80053ca <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053c2:	f043 0208 	orr.w	r2, r3, #8
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	f000 81f2 	beq.w	80057b8 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80053d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80053d8:	f003 0320 	and.w	r3, r3, #32
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d008      	beq.n	80053f2 <HAL_UART_IRQHandler+0x14e>
 80053e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80053e4:	f003 0320 	and.w	r3, r3, #32
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d002      	beq.n	80053f2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80053ec:	6878      	ldr	r0, [r7, #4]
 80053ee:	f000 fd1a 	bl	8005e26 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	695b      	ldr	r3, [r3, #20]
 80053f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053fc:	2b40      	cmp	r3, #64	; 0x40
 80053fe:	bf0c      	ite	eq
 8005400:	2301      	moveq	r3, #1
 8005402:	2300      	movne	r3, #0
 8005404:	b2db      	uxtb	r3, r3
 8005406:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800540e:	f003 0308 	and.w	r3, r3, #8
 8005412:	2b00      	cmp	r3, #0
 8005414:	d103      	bne.n	800541e <HAL_UART_IRQHandler+0x17a>
 8005416:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800541a:	2b00      	cmp	r3, #0
 800541c:	d051      	beq.n	80054c2 <HAL_UART_IRQHandler+0x21e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800541e:	6878      	ldr	r0, [r7, #4]
 8005420:	f000 fc20 	bl	8005c64 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	695b      	ldr	r3, [r3, #20]
 800542a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800542e:	2b40      	cmp	r3, #64	; 0x40
 8005430:	d142      	bne.n	80054b8 <HAL_UART_IRQHandler+0x214>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	3314      	adds	r3, #20
 8005438:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800543c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005440:	e853 3f00 	ldrex	r3, [r3]
 8005444:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005448:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800544c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005450:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	3314      	adds	r3, #20
 800545a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800545e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005462:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005466:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800546a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800546e:	e841 2300 	strex	r3, r2, [r1]
 8005472:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005476:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800547a:	2b00      	cmp	r3, #0
 800547c:	d1d9      	bne.n	8005432 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005482:	2b00      	cmp	r3, #0
 8005484:	d013      	beq.n	80054ae <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800548a:	4a7f      	ldr	r2, [pc, #508]	; (8005688 <HAL_UART_IRQHandler+0x3e4>)
 800548c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005492:	4618      	mov	r0, r3
 8005494:	f7fc fcf0 	bl	8001e78 <HAL_DMA_Abort_IT>
 8005498:	4603      	mov	r3, r0
 800549a:	2b00      	cmp	r3, #0
 800549c:	d019      	beq.n	80054d2 <HAL_UART_IRQHandler+0x22e>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80054a4:	687a      	ldr	r2, [r7, #4]
 80054a6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80054a8:	4610      	mov	r0, r2
 80054aa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80054ac:	e011      	b.n	80054d2 <HAL_UART_IRQHandler+0x22e>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054b2:	6878      	ldr	r0, [r7, #4]
 80054b4:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80054b6:	e00c      	b.n	80054d2 <HAL_UART_IRQHandler+0x22e>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054bc:	6878      	ldr	r0, [r7, #4]
 80054be:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80054c0:	e007      	b.n	80054d2 <HAL_UART_IRQHandler+0x22e>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054c6:	6878      	ldr	r0, [r7, #4]
 80054c8:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	2200      	movs	r2, #0
 80054ce:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80054d0:	e172      	b.n	80057b8 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80054d2:	bf00      	nop
    return;
 80054d4:	e170      	b.n	80057b8 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054da:	2b01      	cmp	r3, #1
 80054dc:	f040 814c 	bne.w	8005778 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80054e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80054e4:	f003 0310 	and.w	r3, r3, #16
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	f000 8145 	beq.w	8005778 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80054ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80054f2:	f003 0310 	and.w	r3, r3, #16
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	f000 813e 	beq.w	8005778 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80054fc:	2300      	movs	r3, #0
 80054fe:	60bb      	str	r3, [r7, #8]
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	60bb      	str	r3, [r7, #8]
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	685b      	ldr	r3, [r3, #4]
 800550e:	60bb      	str	r3, [r7, #8]
 8005510:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	695b      	ldr	r3, [r3, #20]
 8005518:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800551c:	2b40      	cmp	r3, #64	; 0x40
 800551e:	f040 80b5 	bne.w	800568c <HAL_UART_IRQHandler+0x3e8>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	685b      	ldr	r3, [r3, #4]
 800552a:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800552e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005532:	2b00      	cmp	r3, #0
 8005534:	f000 8142 	beq.w	80057bc <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800553c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005540:	429a      	cmp	r2, r3
 8005542:	f080 813b 	bcs.w	80057bc <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800554c:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005552:	69db      	ldr	r3, [r3, #28]
 8005554:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005558:	f000 8088 	beq.w	800566c <HAL_UART_IRQHandler+0x3c8>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	330c      	adds	r3, #12
 8005562:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005566:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800556a:	e853 3f00 	ldrex	r3, [r3]
 800556e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005572:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005576:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800557a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	330c      	adds	r3, #12
 8005584:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8005588:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800558c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005590:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005594:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005598:	e841 2300 	strex	r3, r2, [r1]
 800559c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80055a0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d1d9      	bne.n	800555c <HAL_UART_IRQHandler+0x2b8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	3314      	adds	r3, #20
 80055ae:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055b0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80055b2:	e853 3f00 	ldrex	r3, [r3]
 80055b6:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80055b8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80055ba:	f023 0301 	bic.w	r3, r3, #1
 80055be:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	3314      	adds	r3, #20
 80055c8:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80055cc:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80055d0:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055d2:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80055d4:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80055d8:	e841 2300 	strex	r3, r2, [r1]
 80055dc:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80055de:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d1e1      	bne.n	80055a8 <HAL_UART_IRQHandler+0x304>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	3314      	adds	r3, #20
 80055ea:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055ec:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80055ee:	e853 3f00 	ldrex	r3, [r3]
 80055f2:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80055f4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80055f6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80055fa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	3314      	adds	r3, #20
 8005604:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005608:	66fa      	str	r2, [r7, #108]	; 0x6c
 800560a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800560c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800560e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005610:	e841 2300 	strex	r3, r2, [r1]
 8005614:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005616:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005618:	2b00      	cmp	r3, #0
 800561a:	d1e3      	bne.n	80055e4 <HAL_UART_IRQHandler+0x340>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	2220      	movs	r2, #32
 8005620:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	2200      	movs	r2, #0
 8005628:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	330c      	adds	r3, #12
 8005630:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005632:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005634:	e853 3f00 	ldrex	r3, [r3]
 8005638:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800563a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800563c:	f023 0310 	bic.w	r3, r3, #16
 8005640:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	330c      	adds	r3, #12
 800564a:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800564e:	65ba      	str	r2, [r7, #88]	; 0x58
 8005650:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005652:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005654:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005656:	e841 2300 	strex	r3, r2, [r1]
 800565a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800565c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800565e:	2b00      	cmp	r3, #0
 8005660:	d1e3      	bne.n	800562a <HAL_UART_IRQHandler+0x386>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005666:	4618      	mov	r0, r3
 8005668:	f7fc fb96 	bl	8001d98 <HAL_DMA_Abort>
        }
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005670:	687a      	ldr	r2, [r7, #4]
 8005672:	8d91      	ldrh	r1, [r2, #44]	; 0x2c
 8005674:	687a      	ldr	r2, [r7, #4]
 8005676:	8dd2      	ldrh	r2, [r2, #46]	; 0x2e
 8005678:	b292      	uxth	r2, r2
 800567a:	1a8a      	subs	r2, r1, r2
 800567c:	b292      	uxth	r2, r2
 800567e:	4611      	mov	r1, r2
 8005680:	6878      	ldr	r0, [r7, #4]
 8005682:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005684:	e09a      	b.n	80057bc <HAL_UART_IRQHandler+0x518>
 8005686:	bf00      	nop
 8005688:	08005d2b 	.word	0x08005d2b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005694:	b29b      	uxth	r3, r3
 8005696:	1ad3      	subs	r3, r2, r3
 8005698:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80056a0:	b29b      	uxth	r3, r3
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	f000 808c 	beq.w	80057c0 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80056a8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	f000 8087 	beq.w	80057c0 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	330c      	adds	r3, #12
 80056b8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056bc:	e853 3f00 	ldrex	r3, [r3]
 80056c0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80056c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056c4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80056c8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	330c      	adds	r3, #12
 80056d2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80056d6:	647a      	str	r2, [r7, #68]	; 0x44
 80056d8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056da:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80056dc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80056de:	e841 2300 	strex	r3, r2, [r1]
 80056e2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80056e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d1e3      	bne.n	80056b2 <HAL_UART_IRQHandler+0x40e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	3314      	adds	r3, #20
 80056f0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056f4:	e853 3f00 	ldrex	r3, [r3]
 80056f8:	623b      	str	r3, [r7, #32]
   return(result);
 80056fa:	6a3b      	ldr	r3, [r7, #32]
 80056fc:	f023 0301 	bic.w	r3, r3, #1
 8005700:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	3314      	adds	r3, #20
 800570a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800570e:	633a      	str	r2, [r7, #48]	; 0x30
 8005710:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005712:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005714:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005716:	e841 2300 	strex	r3, r2, [r1]
 800571a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800571c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800571e:	2b00      	cmp	r3, #0
 8005720:	d1e3      	bne.n	80056ea <HAL_UART_IRQHandler+0x446>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	2220      	movs	r2, #32
 8005726:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	2200      	movs	r2, #0
 800572e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	330c      	adds	r3, #12
 8005736:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005738:	693b      	ldr	r3, [r7, #16]
 800573a:	e853 3f00 	ldrex	r3, [r3]
 800573e:	60fb      	str	r3, [r7, #12]
   return(result);
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	f023 0310 	bic.w	r3, r3, #16
 8005746:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	330c      	adds	r3, #12
 8005750:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8005754:	61fa      	str	r2, [r7, #28]
 8005756:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005758:	69b9      	ldr	r1, [r7, #24]
 800575a:	69fa      	ldr	r2, [r7, #28]
 800575c:	e841 2300 	strex	r3, r2, [r1]
 8005760:	617b      	str	r3, [r7, #20]
   return(result);
 8005762:	697b      	ldr	r3, [r7, #20]
 8005764:	2b00      	cmp	r3, #0
 8005766:	d1e3      	bne.n	8005730 <HAL_UART_IRQHandler+0x48c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800576c:	f8b7 20ce 	ldrh.w	r2, [r7, #206]	; 0xce
 8005770:	4611      	mov	r1, r2
 8005772:	6878      	ldr	r0, [r7, #4]
 8005774:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005776:	e023      	b.n	80057c0 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005778:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800577c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005780:	2b00      	cmp	r3, #0
 8005782:	d009      	beq.n	8005798 <HAL_UART_IRQHandler+0x4f4>
 8005784:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005788:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800578c:	2b00      	cmp	r3, #0
 800578e:	d003      	beq.n	8005798 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8005790:	6878      	ldr	r0, [r7, #4]
 8005792:	f000 fadf 	bl	8005d54 <UART_Transmit_IT>
    return;
 8005796:	e014      	b.n	80057c2 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005798:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800579c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d00e      	beq.n	80057c2 <HAL_UART_IRQHandler+0x51e>
 80057a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80057a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d008      	beq.n	80057c2 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80057b0:	6878      	ldr	r0, [r7, #4]
 80057b2:	f000 fb1f 	bl	8005df4 <UART_EndTransmit_IT>
    return;
 80057b6:	e004      	b.n	80057c2 <HAL_UART_IRQHandler+0x51e>
    return;
 80057b8:	bf00      	nop
 80057ba:	e002      	b.n	80057c2 <HAL_UART_IRQHandler+0x51e>
      return;
 80057bc:	bf00      	nop
 80057be:	e000      	b.n	80057c2 <HAL_UART_IRQHandler+0x51e>
      return;
 80057c0:	bf00      	nop
  }
}
 80057c2:	37e8      	adds	r7, #232	; 0xe8
 80057c4:	46bd      	mov	sp, r7
 80057c6:	bd80      	pop	{r7, pc}

080057c8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80057c8:	b480      	push	{r7}
 80057ca:	b083      	sub	sp, #12
 80057cc:	af00      	add	r7, sp, #0
 80057ce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80057d0:	bf00      	nop
 80057d2:	370c      	adds	r7, #12
 80057d4:	46bd      	mov	sp, r7
 80057d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057da:	4770      	bx	lr

080057dc <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80057dc:	b480      	push	{r7}
 80057de:	b083      	sub	sp, #12
 80057e0:	af00      	add	r7, sp, #0
 80057e2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 80057e4:	bf00      	nop
 80057e6:	370c      	adds	r7, #12
 80057e8:	46bd      	mov	sp, r7
 80057ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ee:	4770      	bx	lr

080057f0 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80057f0:	b480      	push	{r7}
 80057f2:	b083      	sub	sp, #12
 80057f4:	af00      	add	r7, sp, #0
 80057f6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80057f8:	bf00      	nop
 80057fa:	370c      	adds	r7, #12
 80057fc:	46bd      	mov	sp, r7
 80057fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005802:	4770      	bx	lr

08005804 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005804:	b480      	push	{r7}
 8005806:	b083      	sub	sp, #12
 8005808:	af00      	add	r7, sp, #0
 800580a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800580c:	bf00      	nop
 800580e:	370c      	adds	r7, #12
 8005810:	46bd      	mov	sp, r7
 8005812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005816:	4770      	bx	lr

08005818 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 8005818:	b480      	push	{r7}
 800581a:	b083      	sub	sp, #12
 800581c:	af00      	add	r7, sp, #0
 800581e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 8005820:	bf00      	nop
 8005822:	370c      	adds	r7, #12
 8005824:	46bd      	mov	sp, r7
 8005826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800582a:	4770      	bx	lr

0800582c <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 800582c:	b480      	push	{r7}
 800582e:	b083      	sub	sp, #12
 8005830:	af00      	add	r7, sp, #0
 8005832:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 8005834:	bf00      	nop
 8005836:	370c      	adds	r7, #12
 8005838:	46bd      	mov	sp, r7
 800583a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800583e:	4770      	bx	lr

08005840 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 8005840:	b480      	push	{r7}
 8005842:	b083      	sub	sp, #12
 8005844:	af00      	add	r7, sp, #0
 8005846:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 8005848:	bf00      	nop
 800584a:	370c      	adds	r7, #12
 800584c:	46bd      	mov	sp, r7
 800584e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005852:	4770      	bx	lr

08005854 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005854:	b480      	push	{r7}
 8005856:	b083      	sub	sp, #12
 8005858:	af00      	add	r7, sp, #0
 800585a:	6078      	str	r0, [r7, #4]
 800585c:	460b      	mov	r3, r1
 800585e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005860:	bf00      	nop
 8005862:	370c      	adds	r7, #12
 8005864:	46bd      	mov	sp, r7
 8005866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800586a:	4770      	bx	lr

0800586c <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 800586c:	b480      	push	{r7}
 800586e:	b083      	sub	sp, #12
 8005870:	af00      	add	r7, sp, #0
 8005872:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	4a10      	ldr	r2, [pc, #64]	; (80058b8 <UART_InitCallbacksToDefault+0x4c>)
 8005878:	645a      	str	r2, [r3, #68]	; 0x44
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	4a0f      	ldr	r2, [pc, #60]	; (80058bc <UART_InitCallbacksToDefault+0x50>)
 800587e:	649a      	str	r2, [r3, #72]	; 0x48
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	4a0f      	ldr	r2, [pc, #60]	; (80058c0 <UART_InitCallbacksToDefault+0x54>)
 8005884:	64da      	str	r2, [r3, #76]	; 0x4c
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	4a0e      	ldr	r2, [pc, #56]	; (80058c4 <UART_InitCallbacksToDefault+0x58>)
 800588a:	651a      	str	r2, [r3, #80]	; 0x50
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	4a0e      	ldr	r2, [pc, #56]	; (80058c8 <UART_InitCallbacksToDefault+0x5c>)
 8005890:	655a      	str	r2, [r3, #84]	; 0x54
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	4a0d      	ldr	r2, [pc, #52]	; (80058cc <UART_InitCallbacksToDefault+0x60>)
 8005896:	659a      	str	r2, [r3, #88]	; 0x58
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	4a0d      	ldr	r2, [pc, #52]	; (80058d0 <UART_InitCallbacksToDefault+0x64>)
 800589c:	65da      	str	r2, [r3, #92]	; 0x5c
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	4a0c      	ldr	r2, [pc, #48]	; (80058d4 <UART_InitCallbacksToDefault+0x68>)
 80058a2:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	4a0c      	ldr	r2, [pc, #48]	; (80058d8 <UART_InitCallbacksToDefault+0x6c>)
 80058a8:	669a      	str	r2, [r3, #104]	; 0x68

}
 80058aa:	bf00      	nop
 80058ac:	370c      	adds	r7, #12
 80058ae:	46bd      	mov	sp, r7
 80058b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b4:	4770      	bx	lr
 80058b6:	bf00      	nop
 80058b8:	080057dd 	.word	0x080057dd
 80058bc:	080057c9 	.word	0x080057c9
 80058c0:	080057f1 	.word	0x080057f1
 80058c4:	080010d1 	.word	0x080010d1
 80058c8:	08005805 	.word	0x08005805
 80058cc:	08005819 	.word	0x08005819
 80058d0:	0800582d 	.word	0x0800582d
 80058d4:	08005841 	.word	0x08005841
 80058d8:	08005855 	.word	0x08005855

080058dc <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80058dc:	b580      	push	{r7, lr}
 80058de:	b09c      	sub	sp, #112	; 0x70
 80058e0:	af00      	add	r7, sp, #0
 80058e2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058e8:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d172      	bne.n	80059de <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 80058f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80058fa:	2200      	movs	r2, #0
 80058fc:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80058fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	330c      	adds	r3, #12
 8005904:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005906:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005908:	e853 3f00 	ldrex	r3, [r3]
 800590c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800590e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005910:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005914:	66bb      	str	r3, [r7, #104]	; 0x68
 8005916:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	330c      	adds	r3, #12
 800591c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800591e:	65ba      	str	r2, [r7, #88]	; 0x58
 8005920:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005922:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005924:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005926:	e841 2300 	strex	r3, r2, [r1]
 800592a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800592c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800592e:	2b00      	cmp	r3, #0
 8005930:	d1e5      	bne.n	80058fe <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005932:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	3314      	adds	r3, #20
 8005938:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800593a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800593c:	e853 3f00 	ldrex	r3, [r3]
 8005940:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005942:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005944:	f023 0301 	bic.w	r3, r3, #1
 8005948:	667b      	str	r3, [r7, #100]	; 0x64
 800594a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	3314      	adds	r3, #20
 8005950:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8005952:	647a      	str	r2, [r7, #68]	; 0x44
 8005954:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005956:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005958:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800595a:	e841 2300 	strex	r3, r2, [r1]
 800595e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005960:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005962:	2b00      	cmp	r3, #0
 8005964:	d1e5      	bne.n	8005932 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005966:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	3314      	adds	r3, #20
 800596c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800596e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005970:	e853 3f00 	ldrex	r3, [r3]
 8005974:	623b      	str	r3, [r7, #32]
   return(result);
 8005976:	6a3b      	ldr	r3, [r7, #32]
 8005978:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800597c:	663b      	str	r3, [r7, #96]	; 0x60
 800597e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	3314      	adds	r3, #20
 8005984:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005986:	633a      	str	r2, [r7, #48]	; 0x30
 8005988:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800598a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800598c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800598e:	e841 2300 	strex	r3, r2, [r1]
 8005992:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005994:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005996:	2b00      	cmp	r3, #0
 8005998:	d1e5      	bne.n	8005966 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800599a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800599c:	2220      	movs	r2, #32
 800599e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80059a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80059a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059a6:	2b01      	cmp	r3, #1
 80059a8:	d119      	bne.n	80059de <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80059aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	330c      	adds	r3, #12
 80059b0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059b2:	693b      	ldr	r3, [r7, #16]
 80059b4:	e853 3f00 	ldrex	r3, [r3]
 80059b8:	60fb      	str	r3, [r7, #12]
   return(result);
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	f023 0310 	bic.w	r3, r3, #16
 80059c0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80059c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	330c      	adds	r3, #12
 80059c8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80059ca:	61fa      	str	r2, [r7, #28]
 80059cc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059ce:	69b9      	ldr	r1, [r7, #24]
 80059d0:	69fa      	ldr	r2, [r7, #28]
 80059d2:	e841 2300 	strex	r3, r2, [r1]
 80059d6:	617b      	str	r3, [r7, #20]
   return(result);
 80059d8:	697b      	ldr	r3, [r7, #20]
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d1e5      	bne.n	80059aa <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80059de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80059e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059e2:	2b01      	cmp	r3, #1
 80059e4:	d107      	bne.n	80059f6 <UART_DMAReceiveCplt+0x11a>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
 80059e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80059e8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80059ea:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80059ec:	8d92      	ldrh	r2, [r2, #44]	; 0x2c
 80059ee:	4611      	mov	r1, r2
 80059f0:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80059f2:	4798      	blx	r3
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80059f4:	e003      	b.n	80059fe <UART_DMAReceiveCplt+0x122>
    huart->RxCpltCallback(huart);
 80059f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80059f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80059fa:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80059fc:	4798      	blx	r3
}
 80059fe:	bf00      	nop
 8005a00:	3770      	adds	r7, #112	; 0x70
 8005a02:	46bd      	mov	sp, r7
 8005a04:	bd80      	pop	{r7, pc}

08005a06 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005a06:	b580      	push	{r7, lr}
 8005a08:	b084      	sub	sp, #16
 8005a0a:	af00      	add	r7, sp, #0
 8005a0c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a12:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a18:	2b01      	cmp	r3, #1
 8005a1a:	d109      	bne.n	8005a30 <UART_DMARxHalfCplt+0x2a>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005a20:	68fa      	ldr	r2, [r7, #12]
 8005a22:	8d92      	ldrh	r2, [r2, #44]	; 0x2c
 8005a24:	0852      	lsrs	r2, r2, #1
 8005a26:	b292      	uxth	r2, r2
 8005a28:	4611      	mov	r1, r2
 8005a2a:	68f8      	ldr	r0, [r7, #12]
 8005a2c:	4798      	blx	r3
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005a2e:	e003      	b.n	8005a38 <UART_DMARxHalfCplt+0x32>
    huart->RxHalfCpltCallback(huart);
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005a34:	68f8      	ldr	r0, [r7, #12]
 8005a36:	4798      	blx	r3
}
 8005a38:	bf00      	nop
 8005a3a:	3710      	adds	r7, #16
 8005a3c:	46bd      	mov	sp, r7
 8005a3e:	bd80      	pop	{r7, pc}

08005a40 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8005a40:	b580      	push	{r7, lr}
 8005a42:	b084      	sub	sp, #16
 8005a44:	af00      	add	r7, sp, #0
 8005a46:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8005a48:	2300      	movs	r3, #0
 8005a4a:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a50:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8005a52:	68bb      	ldr	r3, [r7, #8]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	695b      	ldr	r3, [r3, #20]
 8005a58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a5c:	2b80      	cmp	r3, #128	; 0x80
 8005a5e:	bf0c      	ite	eq
 8005a60:	2301      	moveq	r3, #1
 8005a62:	2300      	movne	r3, #0
 8005a64:	b2db      	uxtb	r3, r3
 8005a66:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8005a68:	68bb      	ldr	r3, [r7, #8]
 8005a6a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a6e:	b2db      	uxtb	r3, r3
 8005a70:	2b21      	cmp	r3, #33	; 0x21
 8005a72:	d108      	bne.n	8005a86 <UART_DMAError+0x46>
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d005      	beq.n	8005a86 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8005a7a:	68bb      	ldr	r3, [r7, #8]
 8005a7c:	2200      	movs	r2, #0
 8005a7e:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8005a80:	68b8      	ldr	r0, [r7, #8]
 8005a82:	f000 f8c7 	bl	8005c14 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005a86:	68bb      	ldr	r3, [r7, #8]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	695b      	ldr	r3, [r3, #20]
 8005a8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a90:	2b40      	cmp	r3, #64	; 0x40
 8005a92:	bf0c      	ite	eq
 8005a94:	2301      	moveq	r3, #1
 8005a96:	2300      	movne	r3, #0
 8005a98:	b2db      	uxtb	r3, r3
 8005a9a:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8005a9c:	68bb      	ldr	r3, [r7, #8]
 8005a9e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005aa2:	b2db      	uxtb	r3, r3
 8005aa4:	2b22      	cmp	r3, #34	; 0x22
 8005aa6:	d108      	bne.n	8005aba <UART_DMAError+0x7a>
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d005      	beq.n	8005aba <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8005aae:	68bb      	ldr	r3, [r7, #8]
 8005ab0:	2200      	movs	r2, #0
 8005ab2:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8005ab4:	68b8      	ldr	r0, [r7, #8]
 8005ab6:	f000 f8d5 	bl	8005c64 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8005aba:	68bb      	ldr	r3, [r7, #8]
 8005abc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005abe:	f043 0210 	orr.w	r2, r3, #16
 8005ac2:	68bb      	ldr	r3, [r7, #8]
 8005ac4:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 8005ac6:	68bb      	ldr	r3, [r7, #8]
 8005ac8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005aca:	68b8      	ldr	r0, [r7, #8]
 8005acc:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005ace:	bf00      	nop
 8005ad0:	3710      	adds	r7, #16
 8005ad2:	46bd      	mov	sp, r7
 8005ad4:	bd80      	pop	{r7, pc}
	...

08005ad8 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005ad8:	b580      	push	{r7, lr}
 8005ada:	b098      	sub	sp, #96	; 0x60
 8005adc:	af00      	add	r7, sp, #0
 8005ade:	60f8      	str	r0, [r7, #12]
 8005ae0:	60b9      	str	r1, [r7, #8]
 8005ae2:	4613      	mov	r3, r2
 8005ae4:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8005ae6:	68ba      	ldr	r2, [r7, #8]
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	88fa      	ldrh	r2, [r7, #6]
 8005af0:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	2200      	movs	r2, #0
 8005af6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	2222      	movs	r2, #34	; 0x22
 8005afc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b04:	4a40      	ldr	r2, [pc, #256]	; (8005c08 <UART_Start_Receive_DMA+0x130>)
 8005b06:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b0c:	4a3f      	ldr	r2, [pc, #252]	; (8005c0c <UART_Start_Receive_DMA+0x134>)
 8005b0e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b14:	4a3e      	ldr	r2, [pc, #248]	; (8005c10 <UART_Start_Receive_DMA+0x138>)
 8005b16:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b1c:	2200      	movs	r2, #0
 8005b1e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8005b20:	f107 0308 	add.w	r3, r7, #8
 8005b24:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	3304      	adds	r3, #4
 8005b30:	4619      	mov	r1, r3
 8005b32:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005b34:	681a      	ldr	r2, [r3, #0]
 8005b36:	88fb      	ldrh	r3, [r7, #6]
 8005b38:	f7fc f8d6 	bl	8001ce8 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8005b3c:	2300      	movs	r3, #0
 8005b3e:	613b      	str	r3, [r7, #16]
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	613b      	str	r3, [r7, #16]
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	685b      	ldr	r3, [r3, #4]
 8005b4e:	613b      	str	r3, [r7, #16]
 8005b50:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	2200      	movs	r2, #0
 8005b56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	691b      	ldr	r3, [r3, #16]
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d019      	beq.n	8005b96 <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	330c      	adds	r3, #12
 8005b68:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b6a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005b6c:	e853 3f00 	ldrex	r3, [r3]
 8005b70:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005b72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b74:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005b78:	65bb      	str	r3, [r7, #88]	; 0x58
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	330c      	adds	r3, #12
 8005b80:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005b82:	64fa      	str	r2, [r7, #76]	; 0x4c
 8005b84:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b86:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8005b88:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005b8a:	e841 2300 	strex	r3, r2, [r1]
 8005b8e:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8005b90:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d1e5      	bne.n	8005b62 <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	3314      	adds	r3, #20
 8005b9c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ba0:	e853 3f00 	ldrex	r3, [r3]
 8005ba4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005ba6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ba8:	f043 0301 	orr.w	r3, r3, #1
 8005bac:	657b      	str	r3, [r7, #84]	; 0x54
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	3314      	adds	r3, #20
 8005bb4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005bb6:	63ba      	str	r2, [r7, #56]	; 0x38
 8005bb8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bba:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005bbc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005bbe:	e841 2300 	strex	r3, r2, [r1]
 8005bc2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005bc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d1e5      	bne.n	8005b96 <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	3314      	adds	r3, #20
 8005bd0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bd2:	69bb      	ldr	r3, [r7, #24]
 8005bd4:	e853 3f00 	ldrex	r3, [r3]
 8005bd8:	617b      	str	r3, [r7, #20]
   return(result);
 8005bda:	697b      	ldr	r3, [r7, #20]
 8005bdc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005be0:	653b      	str	r3, [r7, #80]	; 0x50
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	3314      	adds	r3, #20
 8005be8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005bea:	627a      	str	r2, [r7, #36]	; 0x24
 8005bec:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bee:	6a39      	ldr	r1, [r7, #32]
 8005bf0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005bf2:	e841 2300 	strex	r3, r2, [r1]
 8005bf6:	61fb      	str	r3, [r7, #28]
   return(result);
 8005bf8:	69fb      	ldr	r3, [r7, #28]
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d1e5      	bne.n	8005bca <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 8005bfe:	2300      	movs	r3, #0
}
 8005c00:	4618      	mov	r0, r3
 8005c02:	3760      	adds	r7, #96	; 0x60
 8005c04:	46bd      	mov	sp, r7
 8005c06:	bd80      	pop	{r7, pc}
 8005c08:	080058dd 	.word	0x080058dd
 8005c0c:	08005a07 	.word	0x08005a07
 8005c10:	08005a41 	.word	0x08005a41

08005c14 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8005c14:	b480      	push	{r7}
 8005c16:	b089      	sub	sp, #36	; 0x24
 8005c18:	af00      	add	r7, sp, #0
 8005c1a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	330c      	adds	r3, #12
 8005c22:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	e853 3f00 	ldrex	r3, [r3]
 8005c2a:	60bb      	str	r3, [r7, #8]
   return(result);
 8005c2c:	68bb      	ldr	r3, [r7, #8]
 8005c2e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8005c32:	61fb      	str	r3, [r7, #28]
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	330c      	adds	r3, #12
 8005c3a:	69fa      	ldr	r2, [r7, #28]
 8005c3c:	61ba      	str	r2, [r7, #24]
 8005c3e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c40:	6979      	ldr	r1, [r7, #20]
 8005c42:	69ba      	ldr	r2, [r7, #24]
 8005c44:	e841 2300 	strex	r3, r2, [r1]
 8005c48:	613b      	str	r3, [r7, #16]
   return(result);
 8005c4a:	693b      	ldr	r3, [r7, #16]
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d1e5      	bne.n	8005c1c <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	2220      	movs	r2, #32
 8005c54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8005c58:	bf00      	nop
 8005c5a:	3724      	adds	r7, #36	; 0x24
 8005c5c:	46bd      	mov	sp, r7
 8005c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c62:	4770      	bx	lr

08005c64 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005c64:	b480      	push	{r7}
 8005c66:	b095      	sub	sp, #84	; 0x54
 8005c68:	af00      	add	r7, sp, #0
 8005c6a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	330c      	adds	r3, #12
 8005c72:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c76:	e853 3f00 	ldrex	r3, [r3]
 8005c7a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005c7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c7e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005c82:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	330c      	adds	r3, #12
 8005c8a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005c8c:	643a      	str	r2, [r7, #64]	; 0x40
 8005c8e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c90:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005c92:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005c94:	e841 2300 	strex	r3, r2, [r1]
 8005c98:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005c9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d1e5      	bne.n	8005c6c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	3314      	adds	r3, #20
 8005ca6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ca8:	6a3b      	ldr	r3, [r7, #32]
 8005caa:	e853 3f00 	ldrex	r3, [r3]
 8005cae:	61fb      	str	r3, [r7, #28]
   return(result);
 8005cb0:	69fb      	ldr	r3, [r7, #28]
 8005cb2:	f023 0301 	bic.w	r3, r3, #1
 8005cb6:	64bb      	str	r3, [r7, #72]	; 0x48
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	3314      	adds	r3, #20
 8005cbe:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005cc0:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005cc2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cc4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005cc6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005cc8:	e841 2300 	strex	r3, r2, [r1]
 8005ccc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005cce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d1e5      	bne.n	8005ca0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cd8:	2b01      	cmp	r3, #1
 8005cda:	d119      	bne.n	8005d10 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	330c      	adds	r3, #12
 8005ce2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	e853 3f00 	ldrex	r3, [r3]
 8005cea:	60bb      	str	r3, [r7, #8]
   return(result);
 8005cec:	68bb      	ldr	r3, [r7, #8]
 8005cee:	f023 0310 	bic.w	r3, r3, #16
 8005cf2:	647b      	str	r3, [r7, #68]	; 0x44
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	330c      	adds	r3, #12
 8005cfa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005cfc:	61ba      	str	r2, [r7, #24]
 8005cfe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d00:	6979      	ldr	r1, [r7, #20]
 8005d02:	69ba      	ldr	r2, [r7, #24]
 8005d04:	e841 2300 	strex	r3, r2, [r1]
 8005d08:	613b      	str	r3, [r7, #16]
   return(result);
 8005d0a:	693b      	ldr	r3, [r7, #16]
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d1e5      	bne.n	8005cdc <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	2220      	movs	r2, #32
 8005d14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	2200      	movs	r2, #0
 8005d1c:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005d1e:	bf00      	nop
 8005d20:	3754      	adds	r7, #84	; 0x54
 8005d22:	46bd      	mov	sp, r7
 8005d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d28:	4770      	bx	lr

08005d2a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005d2a:	b580      	push	{r7, lr}
 8005d2c:	b084      	sub	sp, #16
 8005d2e:	af00      	add	r7, sp, #0
 8005d30:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d36:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	2200      	movs	r2, #0
 8005d3c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	2200      	movs	r2, #0
 8005d42:	84da      	strh	r2, [r3, #38]	; 0x26

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d48:	68f8      	ldr	r0, [r7, #12]
 8005d4a:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005d4c:	bf00      	nop
 8005d4e:	3710      	adds	r7, #16
 8005d50:	46bd      	mov	sp, r7
 8005d52:	bd80      	pop	{r7, pc}

08005d54 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005d54:	b480      	push	{r7}
 8005d56:	b085      	sub	sp, #20
 8005d58:	af00      	add	r7, sp, #0
 8005d5a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d62:	b2db      	uxtb	r3, r3
 8005d64:	2b21      	cmp	r3, #33	; 0x21
 8005d66:	d13e      	bne.n	8005de6 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	689b      	ldr	r3, [r3, #8]
 8005d6c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d70:	d114      	bne.n	8005d9c <UART_Transmit_IT+0x48>
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	691b      	ldr	r3, [r3, #16]
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d110      	bne.n	8005d9c <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	6a1b      	ldr	r3, [r3, #32]
 8005d7e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	881b      	ldrh	r3, [r3, #0]
 8005d84:	461a      	mov	r2, r3
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005d8e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	6a1b      	ldr	r3, [r3, #32]
 8005d94:	1c9a      	adds	r2, r3, #2
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	621a      	str	r2, [r3, #32]
 8005d9a:	e008      	b.n	8005dae <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	6a1b      	ldr	r3, [r3, #32]
 8005da0:	1c59      	adds	r1, r3, #1
 8005da2:	687a      	ldr	r2, [r7, #4]
 8005da4:	6211      	str	r1, [r2, #32]
 8005da6:	781a      	ldrb	r2, [r3, #0]
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005db2:	b29b      	uxth	r3, r3
 8005db4:	3b01      	subs	r3, #1
 8005db6:	b29b      	uxth	r3, r3
 8005db8:	687a      	ldr	r2, [r7, #4]
 8005dba:	4619      	mov	r1, r3
 8005dbc:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d10f      	bne.n	8005de2 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	68da      	ldr	r2, [r3, #12]
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005dd0:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	68da      	ldr	r2, [r3, #12]
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005de0:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005de2:	2300      	movs	r3, #0
 8005de4:	e000      	b.n	8005de8 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005de6:	2302      	movs	r3, #2
  }
}
 8005de8:	4618      	mov	r0, r3
 8005dea:	3714      	adds	r7, #20
 8005dec:	46bd      	mov	sp, r7
 8005dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df2:	4770      	bx	lr

08005df4 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005df4:	b580      	push	{r7, lr}
 8005df6:	b082      	sub	sp, #8
 8005df8:	af00      	add	r7, sp, #0
 8005dfa:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	68da      	ldr	r2, [r3, #12]
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005e0a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	2220      	movs	r2, #32
 8005e10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005e18:	6878      	ldr	r0, [r7, #4]
 8005e1a:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005e1c:	2300      	movs	r3, #0
}
 8005e1e:	4618      	mov	r0, r3
 8005e20:	3708      	adds	r7, #8
 8005e22:	46bd      	mov	sp, r7
 8005e24:	bd80      	pop	{r7, pc}

08005e26 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005e26:	b580      	push	{r7, lr}
 8005e28:	b08c      	sub	sp, #48	; 0x30
 8005e2a:	af00      	add	r7, sp, #0
 8005e2c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005e34:	b2db      	uxtb	r3, r3
 8005e36:	2b22      	cmp	r3, #34	; 0x22
 8005e38:	f040 80ad 	bne.w	8005f96 <UART_Receive_IT+0x170>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	689b      	ldr	r3, [r3, #8]
 8005e40:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e44:	d117      	bne.n	8005e76 <UART_Receive_IT+0x50>
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	691b      	ldr	r3, [r3, #16]
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d113      	bne.n	8005e76 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005e4e:	2300      	movs	r3, #0
 8005e50:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e56:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	685b      	ldr	r3, [r3, #4]
 8005e5e:	b29b      	uxth	r3, r3
 8005e60:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e64:	b29a      	uxth	r2, r3
 8005e66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e68:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e6e:	1c9a      	adds	r2, r3, #2
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	629a      	str	r2, [r3, #40]	; 0x28
 8005e74:	e026      	b.n	8005ec4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e7a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8005e7c:	2300      	movs	r3, #0
 8005e7e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	689b      	ldr	r3, [r3, #8]
 8005e84:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e88:	d007      	beq.n	8005e9a <UART_Receive_IT+0x74>
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	689b      	ldr	r3, [r3, #8]
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d10a      	bne.n	8005ea8 <UART_Receive_IT+0x82>
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	691b      	ldr	r3, [r3, #16]
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d106      	bne.n	8005ea8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	685b      	ldr	r3, [r3, #4]
 8005ea0:	b2da      	uxtb	r2, r3
 8005ea2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ea4:	701a      	strb	r2, [r3, #0]
 8005ea6:	e008      	b.n	8005eba <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	685b      	ldr	r3, [r3, #4]
 8005eae:	b2db      	uxtb	r3, r3
 8005eb0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005eb4:	b2da      	uxtb	r2, r3
 8005eb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005eb8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ebe:	1c5a      	adds	r2, r3, #1
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005ec8:	b29b      	uxth	r3, r3
 8005eca:	3b01      	subs	r3, #1
 8005ecc:	b29b      	uxth	r3, r3
 8005ece:	687a      	ldr	r2, [r7, #4]
 8005ed0:	4619      	mov	r1, r3
 8005ed2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d15c      	bne.n	8005f92 <UART_Receive_IT+0x16c>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	68da      	ldr	r2, [r3, #12]
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	f022 0220 	bic.w	r2, r2, #32
 8005ee6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	68da      	ldr	r2, [r3, #12]
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005ef6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	695a      	ldr	r2, [r3, #20]
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	f022 0201 	bic.w	r2, r2, #1
 8005f06:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	2220      	movs	r2, #32
 8005f0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f14:	2b01      	cmp	r3, #1
 8005f16:	d136      	bne.n	8005f86 <UART_Receive_IT+0x160>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	2200      	movs	r2, #0
 8005f1c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	330c      	adds	r3, #12
 8005f24:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f26:	697b      	ldr	r3, [r7, #20]
 8005f28:	e853 3f00 	ldrex	r3, [r3]
 8005f2c:	613b      	str	r3, [r7, #16]
   return(result);
 8005f2e:	693b      	ldr	r3, [r7, #16]
 8005f30:	f023 0310 	bic.w	r3, r3, #16
 8005f34:	627b      	str	r3, [r7, #36]	; 0x24
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	330c      	adds	r3, #12
 8005f3c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f3e:	623a      	str	r2, [r7, #32]
 8005f40:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f42:	69f9      	ldr	r1, [r7, #28]
 8005f44:	6a3a      	ldr	r2, [r7, #32]
 8005f46:	e841 2300 	strex	r3, r2, [r1]
 8005f4a:	61bb      	str	r3, [r7, #24]
   return(result);
 8005f4c:	69bb      	ldr	r3, [r7, #24]
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d1e5      	bne.n	8005f1e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	f003 0310 	and.w	r3, r3, #16
 8005f5c:	2b10      	cmp	r3, #16
 8005f5e:	d10a      	bne.n	8005f76 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005f60:	2300      	movs	r3, #0
 8005f62:	60fb      	str	r3, [r7, #12]
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	60fb      	str	r3, [r7, #12]
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	685b      	ldr	r3, [r3, #4]
 8005f72:	60fb      	str	r3, [r7, #12]
 8005f74:	68fb      	ldr	r3, [r7, #12]
        }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005f7a:	687a      	ldr	r2, [r7, #4]
 8005f7c:	8d92      	ldrh	r2, [r2, #44]	; 0x2c
 8005f7e:	4611      	mov	r1, r2
 8005f80:	6878      	ldr	r0, [r7, #4]
 8005f82:	4798      	blx	r3
 8005f84:	e003      	b.n	8005f8e <UART_Receive_IT+0x168>
      else
      {
        /* Standard reception API called */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f8a:	6878      	ldr	r0, [r7, #4]
 8005f8c:	4798      	blx	r3
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005f8e:	2300      	movs	r3, #0
 8005f90:	e002      	b.n	8005f98 <UART_Receive_IT+0x172>
    }
    return HAL_OK;
 8005f92:	2300      	movs	r3, #0
 8005f94:	e000      	b.n	8005f98 <UART_Receive_IT+0x172>
  }
  else
  {
    return HAL_BUSY;
 8005f96:	2302      	movs	r3, #2
  }
}
 8005f98:	4618      	mov	r0, r3
 8005f9a:	3730      	adds	r7, #48	; 0x30
 8005f9c:	46bd      	mov	sp, r7
 8005f9e:	bd80      	pop	{r7, pc}

08005fa0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005fa0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005fa4:	b0c0      	sub	sp, #256	; 0x100
 8005fa6:	af00      	add	r7, sp, #0
 8005fa8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005fac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	691b      	ldr	r3, [r3, #16]
 8005fb4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005fb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005fbc:	68d9      	ldr	r1, [r3, #12]
 8005fbe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005fc2:	681a      	ldr	r2, [r3, #0]
 8005fc4:	ea40 0301 	orr.w	r3, r0, r1
 8005fc8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005fca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005fce:	689a      	ldr	r2, [r3, #8]
 8005fd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005fd4:	691b      	ldr	r3, [r3, #16]
 8005fd6:	431a      	orrs	r2, r3
 8005fd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005fdc:	695b      	ldr	r3, [r3, #20]
 8005fde:	431a      	orrs	r2, r3
 8005fe0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005fe4:	69db      	ldr	r3, [r3, #28]
 8005fe6:	4313      	orrs	r3, r2
 8005fe8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005fec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	68db      	ldr	r3, [r3, #12]
 8005ff4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005ff8:	f021 010c 	bic.w	r1, r1, #12
 8005ffc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006000:	681a      	ldr	r2, [r3, #0]
 8006002:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006006:	430b      	orrs	r3, r1
 8006008:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800600a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	695b      	ldr	r3, [r3, #20]
 8006012:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8006016:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800601a:	6999      	ldr	r1, [r3, #24]
 800601c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006020:	681a      	ldr	r2, [r3, #0]
 8006022:	ea40 0301 	orr.w	r3, r0, r1
 8006026:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006028:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800602c:	681a      	ldr	r2, [r3, #0]
 800602e:	4b8f      	ldr	r3, [pc, #572]	; (800626c <UART_SetConfig+0x2cc>)
 8006030:	429a      	cmp	r2, r3
 8006032:	d005      	beq.n	8006040 <UART_SetConfig+0xa0>
 8006034:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006038:	681a      	ldr	r2, [r3, #0]
 800603a:	4b8d      	ldr	r3, [pc, #564]	; (8006270 <UART_SetConfig+0x2d0>)
 800603c:	429a      	cmp	r2, r3
 800603e:	d104      	bne.n	800604a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006040:	f7fd ff54 	bl	8003eec <HAL_RCC_GetPCLK2Freq>
 8006044:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8006048:	e003      	b.n	8006052 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800604a:	f7fd ff3b 	bl	8003ec4 <HAL_RCC_GetPCLK1Freq>
 800604e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006052:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006056:	69db      	ldr	r3, [r3, #28]
 8006058:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800605c:	f040 810c 	bne.w	8006278 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006060:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006064:	2200      	movs	r2, #0
 8006066:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800606a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800606e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8006072:	4622      	mov	r2, r4
 8006074:	462b      	mov	r3, r5
 8006076:	1891      	adds	r1, r2, r2
 8006078:	65b9      	str	r1, [r7, #88]	; 0x58
 800607a:	415b      	adcs	r3, r3
 800607c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800607e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8006082:	4621      	mov	r1, r4
 8006084:	eb12 0801 	adds.w	r8, r2, r1
 8006088:	4629      	mov	r1, r5
 800608a:	eb43 0901 	adc.w	r9, r3, r1
 800608e:	f04f 0200 	mov.w	r2, #0
 8006092:	f04f 0300 	mov.w	r3, #0
 8006096:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800609a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800609e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80060a2:	4690      	mov	r8, r2
 80060a4:	4699      	mov	r9, r3
 80060a6:	4623      	mov	r3, r4
 80060a8:	eb18 0303 	adds.w	r3, r8, r3
 80060ac:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80060b0:	462b      	mov	r3, r5
 80060b2:	eb49 0303 	adc.w	r3, r9, r3
 80060b6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80060ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80060be:	685b      	ldr	r3, [r3, #4]
 80060c0:	2200      	movs	r2, #0
 80060c2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80060c6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80060ca:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80060ce:	460b      	mov	r3, r1
 80060d0:	18db      	adds	r3, r3, r3
 80060d2:	653b      	str	r3, [r7, #80]	; 0x50
 80060d4:	4613      	mov	r3, r2
 80060d6:	eb42 0303 	adc.w	r3, r2, r3
 80060da:	657b      	str	r3, [r7, #84]	; 0x54
 80060dc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80060e0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80060e4:	f7fa fce4 	bl	8000ab0 <__aeabi_uldivmod>
 80060e8:	4602      	mov	r2, r0
 80060ea:	460b      	mov	r3, r1
 80060ec:	4b61      	ldr	r3, [pc, #388]	; (8006274 <UART_SetConfig+0x2d4>)
 80060ee:	fba3 2302 	umull	r2, r3, r3, r2
 80060f2:	095b      	lsrs	r3, r3, #5
 80060f4:	011c      	lsls	r4, r3, #4
 80060f6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80060fa:	2200      	movs	r2, #0
 80060fc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006100:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8006104:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8006108:	4642      	mov	r2, r8
 800610a:	464b      	mov	r3, r9
 800610c:	1891      	adds	r1, r2, r2
 800610e:	64b9      	str	r1, [r7, #72]	; 0x48
 8006110:	415b      	adcs	r3, r3
 8006112:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006114:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006118:	4641      	mov	r1, r8
 800611a:	eb12 0a01 	adds.w	sl, r2, r1
 800611e:	4649      	mov	r1, r9
 8006120:	eb43 0b01 	adc.w	fp, r3, r1
 8006124:	f04f 0200 	mov.w	r2, #0
 8006128:	f04f 0300 	mov.w	r3, #0
 800612c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006130:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006134:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006138:	4692      	mov	sl, r2
 800613a:	469b      	mov	fp, r3
 800613c:	4643      	mov	r3, r8
 800613e:	eb1a 0303 	adds.w	r3, sl, r3
 8006142:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006146:	464b      	mov	r3, r9
 8006148:	eb4b 0303 	adc.w	r3, fp, r3
 800614c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006150:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006154:	685b      	ldr	r3, [r3, #4]
 8006156:	2200      	movs	r2, #0
 8006158:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800615c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8006160:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8006164:	460b      	mov	r3, r1
 8006166:	18db      	adds	r3, r3, r3
 8006168:	643b      	str	r3, [r7, #64]	; 0x40
 800616a:	4613      	mov	r3, r2
 800616c:	eb42 0303 	adc.w	r3, r2, r3
 8006170:	647b      	str	r3, [r7, #68]	; 0x44
 8006172:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006176:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800617a:	f7fa fc99 	bl	8000ab0 <__aeabi_uldivmod>
 800617e:	4602      	mov	r2, r0
 8006180:	460b      	mov	r3, r1
 8006182:	4611      	mov	r1, r2
 8006184:	4b3b      	ldr	r3, [pc, #236]	; (8006274 <UART_SetConfig+0x2d4>)
 8006186:	fba3 2301 	umull	r2, r3, r3, r1
 800618a:	095b      	lsrs	r3, r3, #5
 800618c:	2264      	movs	r2, #100	; 0x64
 800618e:	fb02 f303 	mul.w	r3, r2, r3
 8006192:	1acb      	subs	r3, r1, r3
 8006194:	00db      	lsls	r3, r3, #3
 8006196:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800619a:	4b36      	ldr	r3, [pc, #216]	; (8006274 <UART_SetConfig+0x2d4>)
 800619c:	fba3 2302 	umull	r2, r3, r3, r2
 80061a0:	095b      	lsrs	r3, r3, #5
 80061a2:	005b      	lsls	r3, r3, #1
 80061a4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80061a8:	441c      	add	r4, r3
 80061aa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80061ae:	2200      	movs	r2, #0
 80061b0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80061b4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80061b8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80061bc:	4642      	mov	r2, r8
 80061be:	464b      	mov	r3, r9
 80061c0:	1891      	adds	r1, r2, r2
 80061c2:	63b9      	str	r1, [r7, #56]	; 0x38
 80061c4:	415b      	adcs	r3, r3
 80061c6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80061c8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80061cc:	4641      	mov	r1, r8
 80061ce:	1851      	adds	r1, r2, r1
 80061d0:	6339      	str	r1, [r7, #48]	; 0x30
 80061d2:	4649      	mov	r1, r9
 80061d4:	414b      	adcs	r3, r1
 80061d6:	637b      	str	r3, [r7, #52]	; 0x34
 80061d8:	f04f 0200 	mov.w	r2, #0
 80061dc:	f04f 0300 	mov.w	r3, #0
 80061e0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80061e4:	4659      	mov	r1, fp
 80061e6:	00cb      	lsls	r3, r1, #3
 80061e8:	4651      	mov	r1, sl
 80061ea:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80061ee:	4651      	mov	r1, sl
 80061f0:	00ca      	lsls	r2, r1, #3
 80061f2:	4610      	mov	r0, r2
 80061f4:	4619      	mov	r1, r3
 80061f6:	4603      	mov	r3, r0
 80061f8:	4642      	mov	r2, r8
 80061fa:	189b      	adds	r3, r3, r2
 80061fc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006200:	464b      	mov	r3, r9
 8006202:	460a      	mov	r2, r1
 8006204:	eb42 0303 	adc.w	r3, r2, r3
 8006208:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800620c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006210:	685b      	ldr	r3, [r3, #4]
 8006212:	2200      	movs	r2, #0
 8006214:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006218:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800621c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006220:	460b      	mov	r3, r1
 8006222:	18db      	adds	r3, r3, r3
 8006224:	62bb      	str	r3, [r7, #40]	; 0x28
 8006226:	4613      	mov	r3, r2
 8006228:	eb42 0303 	adc.w	r3, r2, r3
 800622c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800622e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006232:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8006236:	f7fa fc3b 	bl	8000ab0 <__aeabi_uldivmod>
 800623a:	4602      	mov	r2, r0
 800623c:	460b      	mov	r3, r1
 800623e:	4b0d      	ldr	r3, [pc, #52]	; (8006274 <UART_SetConfig+0x2d4>)
 8006240:	fba3 1302 	umull	r1, r3, r3, r2
 8006244:	095b      	lsrs	r3, r3, #5
 8006246:	2164      	movs	r1, #100	; 0x64
 8006248:	fb01 f303 	mul.w	r3, r1, r3
 800624c:	1ad3      	subs	r3, r2, r3
 800624e:	00db      	lsls	r3, r3, #3
 8006250:	3332      	adds	r3, #50	; 0x32
 8006252:	4a08      	ldr	r2, [pc, #32]	; (8006274 <UART_SetConfig+0x2d4>)
 8006254:	fba2 2303 	umull	r2, r3, r2, r3
 8006258:	095b      	lsrs	r3, r3, #5
 800625a:	f003 0207 	and.w	r2, r3, #7
 800625e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	4422      	add	r2, r4
 8006266:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006268:	e106      	b.n	8006478 <UART_SetConfig+0x4d8>
 800626a:	bf00      	nop
 800626c:	40011000 	.word	0x40011000
 8006270:	40011400 	.word	0x40011400
 8006274:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006278:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800627c:	2200      	movs	r2, #0
 800627e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006282:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8006286:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800628a:	4642      	mov	r2, r8
 800628c:	464b      	mov	r3, r9
 800628e:	1891      	adds	r1, r2, r2
 8006290:	6239      	str	r1, [r7, #32]
 8006292:	415b      	adcs	r3, r3
 8006294:	627b      	str	r3, [r7, #36]	; 0x24
 8006296:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800629a:	4641      	mov	r1, r8
 800629c:	1854      	adds	r4, r2, r1
 800629e:	4649      	mov	r1, r9
 80062a0:	eb43 0501 	adc.w	r5, r3, r1
 80062a4:	f04f 0200 	mov.w	r2, #0
 80062a8:	f04f 0300 	mov.w	r3, #0
 80062ac:	00eb      	lsls	r3, r5, #3
 80062ae:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80062b2:	00e2      	lsls	r2, r4, #3
 80062b4:	4614      	mov	r4, r2
 80062b6:	461d      	mov	r5, r3
 80062b8:	4643      	mov	r3, r8
 80062ba:	18e3      	adds	r3, r4, r3
 80062bc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80062c0:	464b      	mov	r3, r9
 80062c2:	eb45 0303 	adc.w	r3, r5, r3
 80062c6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80062ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80062ce:	685b      	ldr	r3, [r3, #4]
 80062d0:	2200      	movs	r2, #0
 80062d2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80062d6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80062da:	f04f 0200 	mov.w	r2, #0
 80062de:	f04f 0300 	mov.w	r3, #0
 80062e2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80062e6:	4629      	mov	r1, r5
 80062e8:	008b      	lsls	r3, r1, #2
 80062ea:	4621      	mov	r1, r4
 80062ec:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80062f0:	4621      	mov	r1, r4
 80062f2:	008a      	lsls	r2, r1, #2
 80062f4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80062f8:	f7fa fbda 	bl	8000ab0 <__aeabi_uldivmod>
 80062fc:	4602      	mov	r2, r0
 80062fe:	460b      	mov	r3, r1
 8006300:	4b60      	ldr	r3, [pc, #384]	; (8006484 <UART_SetConfig+0x4e4>)
 8006302:	fba3 2302 	umull	r2, r3, r3, r2
 8006306:	095b      	lsrs	r3, r3, #5
 8006308:	011c      	lsls	r4, r3, #4
 800630a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800630e:	2200      	movs	r2, #0
 8006310:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006314:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006318:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800631c:	4642      	mov	r2, r8
 800631e:	464b      	mov	r3, r9
 8006320:	1891      	adds	r1, r2, r2
 8006322:	61b9      	str	r1, [r7, #24]
 8006324:	415b      	adcs	r3, r3
 8006326:	61fb      	str	r3, [r7, #28]
 8006328:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800632c:	4641      	mov	r1, r8
 800632e:	1851      	adds	r1, r2, r1
 8006330:	6139      	str	r1, [r7, #16]
 8006332:	4649      	mov	r1, r9
 8006334:	414b      	adcs	r3, r1
 8006336:	617b      	str	r3, [r7, #20]
 8006338:	f04f 0200 	mov.w	r2, #0
 800633c:	f04f 0300 	mov.w	r3, #0
 8006340:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006344:	4659      	mov	r1, fp
 8006346:	00cb      	lsls	r3, r1, #3
 8006348:	4651      	mov	r1, sl
 800634a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800634e:	4651      	mov	r1, sl
 8006350:	00ca      	lsls	r2, r1, #3
 8006352:	4610      	mov	r0, r2
 8006354:	4619      	mov	r1, r3
 8006356:	4603      	mov	r3, r0
 8006358:	4642      	mov	r2, r8
 800635a:	189b      	adds	r3, r3, r2
 800635c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006360:	464b      	mov	r3, r9
 8006362:	460a      	mov	r2, r1
 8006364:	eb42 0303 	adc.w	r3, r2, r3
 8006368:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800636c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006370:	685b      	ldr	r3, [r3, #4]
 8006372:	2200      	movs	r2, #0
 8006374:	67bb      	str	r3, [r7, #120]	; 0x78
 8006376:	67fa      	str	r2, [r7, #124]	; 0x7c
 8006378:	f04f 0200 	mov.w	r2, #0
 800637c:	f04f 0300 	mov.w	r3, #0
 8006380:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8006384:	4649      	mov	r1, r9
 8006386:	008b      	lsls	r3, r1, #2
 8006388:	4641      	mov	r1, r8
 800638a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800638e:	4641      	mov	r1, r8
 8006390:	008a      	lsls	r2, r1, #2
 8006392:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8006396:	f7fa fb8b 	bl	8000ab0 <__aeabi_uldivmod>
 800639a:	4602      	mov	r2, r0
 800639c:	460b      	mov	r3, r1
 800639e:	4611      	mov	r1, r2
 80063a0:	4b38      	ldr	r3, [pc, #224]	; (8006484 <UART_SetConfig+0x4e4>)
 80063a2:	fba3 2301 	umull	r2, r3, r3, r1
 80063a6:	095b      	lsrs	r3, r3, #5
 80063a8:	2264      	movs	r2, #100	; 0x64
 80063aa:	fb02 f303 	mul.w	r3, r2, r3
 80063ae:	1acb      	subs	r3, r1, r3
 80063b0:	011b      	lsls	r3, r3, #4
 80063b2:	3332      	adds	r3, #50	; 0x32
 80063b4:	4a33      	ldr	r2, [pc, #204]	; (8006484 <UART_SetConfig+0x4e4>)
 80063b6:	fba2 2303 	umull	r2, r3, r2, r3
 80063ba:	095b      	lsrs	r3, r3, #5
 80063bc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80063c0:	441c      	add	r4, r3
 80063c2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80063c6:	2200      	movs	r2, #0
 80063c8:	673b      	str	r3, [r7, #112]	; 0x70
 80063ca:	677a      	str	r2, [r7, #116]	; 0x74
 80063cc:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80063d0:	4642      	mov	r2, r8
 80063d2:	464b      	mov	r3, r9
 80063d4:	1891      	adds	r1, r2, r2
 80063d6:	60b9      	str	r1, [r7, #8]
 80063d8:	415b      	adcs	r3, r3
 80063da:	60fb      	str	r3, [r7, #12]
 80063dc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80063e0:	4641      	mov	r1, r8
 80063e2:	1851      	adds	r1, r2, r1
 80063e4:	6039      	str	r1, [r7, #0]
 80063e6:	4649      	mov	r1, r9
 80063e8:	414b      	adcs	r3, r1
 80063ea:	607b      	str	r3, [r7, #4]
 80063ec:	f04f 0200 	mov.w	r2, #0
 80063f0:	f04f 0300 	mov.w	r3, #0
 80063f4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80063f8:	4659      	mov	r1, fp
 80063fa:	00cb      	lsls	r3, r1, #3
 80063fc:	4651      	mov	r1, sl
 80063fe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006402:	4651      	mov	r1, sl
 8006404:	00ca      	lsls	r2, r1, #3
 8006406:	4610      	mov	r0, r2
 8006408:	4619      	mov	r1, r3
 800640a:	4603      	mov	r3, r0
 800640c:	4642      	mov	r2, r8
 800640e:	189b      	adds	r3, r3, r2
 8006410:	66bb      	str	r3, [r7, #104]	; 0x68
 8006412:	464b      	mov	r3, r9
 8006414:	460a      	mov	r2, r1
 8006416:	eb42 0303 	adc.w	r3, r2, r3
 800641a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800641c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006420:	685b      	ldr	r3, [r3, #4]
 8006422:	2200      	movs	r2, #0
 8006424:	663b      	str	r3, [r7, #96]	; 0x60
 8006426:	667a      	str	r2, [r7, #100]	; 0x64
 8006428:	f04f 0200 	mov.w	r2, #0
 800642c:	f04f 0300 	mov.w	r3, #0
 8006430:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8006434:	4649      	mov	r1, r9
 8006436:	008b      	lsls	r3, r1, #2
 8006438:	4641      	mov	r1, r8
 800643a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800643e:	4641      	mov	r1, r8
 8006440:	008a      	lsls	r2, r1, #2
 8006442:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8006446:	f7fa fb33 	bl	8000ab0 <__aeabi_uldivmod>
 800644a:	4602      	mov	r2, r0
 800644c:	460b      	mov	r3, r1
 800644e:	4b0d      	ldr	r3, [pc, #52]	; (8006484 <UART_SetConfig+0x4e4>)
 8006450:	fba3 1302 	umull	r1, r3, r3, r2
 8006454:	095b      	lsrs	r3, r3, #5
 8006456:	2164      	movs	r1, #100	; 0x64
 8006458:	fb01 f303 	mul.w	r3, r1, r3
 800645c:	1ad3      	subs	r3, r2, r3
 800645e:	011b      	lsls	r3, r3, #4
 8006460:	3332      	adds	r3, #50	; 0x32
 8006462:	4a08      	ldr	r2, [pc, #32]	; (8006484 <UART_SetConfig+0x4e4>)
 8006464:	fba2 2303 	umull	r2, r3, r2, r3
 8006468:	095b      	lsrs	r3, r3, #5
 800646a:	f003 020f 	and.w	r2, r3, #15
 800646e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	4422      	add	r2, r4
 8006476:	609a      	str	r2, [r3, #8]
}
 8006478:	bf00      	nop
 800647a:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800647e:	46bd      	mov	sp, r7
 8006480:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006484:	51eb851f 	.word	0x51eb851f

08006488 <Kalman_getAngle>:
#define RAD_TO_DEG 57.295779513082320876798154814105
uint32_t timer;



double Kalman_getAngle(Kalman_t *Kalman, double newAngle, double newRate, double dt){
 8006488:	b5b0      	push	{r4, r5, r7, lr}
 800648a:	b096      	sub	sp, #88	; 0x58
 800648c:	af00      	add	r7, sp, #0
 800648e:	61f8      	str	r0, [r7, #28]
 8006490:	ed87 0b04 	vstr	d0, [r7, #16]
 8006494:	ed87 1b02 	vstr	d1, [r7, #8]
 8006498:	ed87 2b00 	vstr	d2, [r7]
    double rate = newRate - Kalman->bias;
 800649c:	69fb      	ldr	r3, [r7, #28]
 800649e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80064a2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80064a6:	f7f9 fe9b 	bl	80001e0 <__aeabi_dsub>
 80064aa:	4602      	mov	r2, r0
 80064ac:	460b      	mov	r3, r1
 80064ae:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
    Kalman->angle += dt * rate;
 80064b2:	69fb      	ldr	r3, [r7, #28]
 80064b4:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 80064b8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80064bc:	e9d7 0100 	ldrd	r0, r1, [r7]
 80064c0:	f7fa f846 	bl	8000550 <__aeabi_dmul>
 80064c4:	4602      	mov	r2, r0
 80064c6:	460b      	mov	r3, r1
 80064c8:	4620      	mov	r0, r4
 80064ca:	4629      	mov	r1, r5
 80064cc:	f7f9 fe8a 	bl	80001e4 <__adddf3>
 80064d0:	4602      	mov	r2, r0
 80064d2:	460b      	mov	r3, r1
 80064d4:	69f9      	ldr	r1, [r7, #28]
 80064d6:	e9c1 2306 	strd	r2, r3, [r1, #24]

    Kalman->P[0][0] += dt * (dt * Kalman->P[1][1] - Kalman->P[0][1] - Kalman->P[1][0] + Kalman->Q_angle);
 80064da:	69fb      	ldr	r3, [r7, #28]
 80064dc:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 80064e0:	69fb      	ldr	r3, [r7, #28]
 80064e2:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 80064e6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80064ea:	f7fa f831 	bl	8000550 <__aeabi_dmul>
 80064ee:	4602      	mov	r2, r0
 80064f0:	460b      	mov	r3, r1
 80064f2:	4610      	mov	r0, r2
 80064f4:	4619      	mov	r1, r3
 80064f6:	69fb      	ldr	r3, [r7, #28]
 80064f8:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 80064fc:	f7f9 fe70 	bl	80001e0 <__aeabi_dsub>
 8006500:	4602      	mov	r2, r0
 8006502:	460b      	mov	r3, r1
 8006504:	4610      	mov	r0, r2
 8006506:	4619      	mov	r1, r3
 8006508:	69fb      	ldr	r3, [r7, #28]
 800650a:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800650e:	f7f9 fe67 	bl	80001e0 <__aeabi_dsub>
 8006512:	4602      	mov	r2, r0
 8006514:	460b      	mov	r3, r1
 8006516:	4610      	mov	r0, r2
 8006518:	4619      	mov	r1, r3
 800651a:	69fb      	ldr	r3, [r7, #28]
 800651c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006520:	f7f9 fe60 	bl	80001e4 <__adddf3>
 8006524:	4602      	mov	r2, r0
 8006526:	460b      	mov	r3, r1
 8006528:	4610      	mov	r0, r2
 800652a:	4619      	mov	r1, r3
 800652c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006530:	f7fa f80e 	bl	8000550 <__aeabi_dmul>
 8006534:	4602      	mov	r2, r0
 8006536:	460b      	mov	r3, r1
 8006538:	4620      	mov	r0, r4
 800653a:	4629      	mov	r1, r5
 800653c:	f7f9 fe52 	bl	80001e4 <__adddf3>
 8006540:	4602      	mov	r2, r0
 8006542:	460b      	mov	r3, r1
 8006544:	69f9      	ldr	r1, [r7, #28]
 8006546:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    Kalman->P[0][1] -= dt * Kalman->P[1][1];
 800654a:	69fb      	ldr	r3, [r7, #28]
 800654c:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	; 0x30
 8006550:	69fb      	ldr	r3, [r7, #28]
 8006552:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8006556:	e9d7 2300 	ldrd	r2, r3, [r7]
 800655a:	f7f9 fff9 	bl	8000550 <__aeabi_dmul>
 800655e:	4602      	mov	r2, r0
 8006560:	460b      	mov	r3, r1
 8006562:	4620      	mov	r0, r4
 8006564:	4629      	mov	r1, r5
 8006566:	f7f9 fe3b 	bl	80001e0 <__aeabi_dsub>
 800656a:	4602      	mov	r2, r0
 800656c:	460b      	mov	r3, r1
 800656e:	69f9      	ldr	r1, [r7, #28]
 8006570:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    Kalman->P[1][0] -= dt * Kalman->P[1][1];
 8006574:	69fb      	ldr	r3, [r7, #28]
 8006576:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	; 0x38
 800657a:	69fb      	ldr	r3, [r7, #28]
 800657c:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8006580:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006584:	f7f9 ffe4 	bl	8000550 <__aeabi_dmul>
 8006588:	4602      	mov	r2, r0
 800658a:	460b      	mov	r3, r1
 800658c:	4620      	mov	r0, r4
 800658e:	4629      	mov	r1, r5
 8006590:	f7f9 fe26 	bl	80001e0 <__aeabi_dsub>
 8006594:	4602      	mov	r2, r0
 8006596:	460b      	mov	r3, r1
 8006598:	69f9      	ldr	r1, [r7, #28]
 800659a:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
    Kalman->P[1][1] += Kalman->Q_bias * dt;
 800659e:	69fb      	ldr	r3, [r7, #28]
 80065a0:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	; 0x40
 80065a4:	69fb      	ldr	r3, [r7, #28]
 80065a6:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80065aa:	e9d7 2300 	ldrd	r2, r3, [r7]
 80065ae:	f7f9 ffcf 	bl	8000550 <__aeabi_dmul>
 80065b2:	4602      	mov	r2, r0
 80065b4:	460b      	mov	r3, r1
 80065b6:	4620      	mov	r0, r4
 80065b8:	4629      	mov	r1, r5
 80065ba:	f7f9 fe13 	bl	80001e4 <__adddf3>
 80065be:	4602      	mov	r2, r0
 80065c0:	460b      	mov	r3, r1
 80065c2:	69f9      	ldr	r1, [r7, #28]
 80065c4:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40

    double S = Kalman->P[0][0] + Kalman->R_measure;
 80065c8:	69fb      	ldr	r3, [r7, #28]
 80065ca:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 80065ce:	69fb      	ldr	r3, [r7, #28]
 80065d0:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80065d4:	f7f9 fe06 	bl	80001e4 <__adddf3>
 80065d8:	4602      	mov	r2, r0
 80065da:	460b      	mov	r3, r1
 80065dc:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
    double K[2];
    K[0] = Kalman->P[0][0] / S;
 80065e0:	69fb      	ldr	r3, [r7, #28]
 80065e2:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 80065e6:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80065ea:	f7fa f8db 	bl	80007a4 <__aeabi_ddiv>
 80065ee:	4602      	mov	r2, r0
 80065f0:	460b      	mov	r3, r1
 80065f2:	e9c7 2308 	strd	r2, r3, [r7, #32]
    K[1] = Kalman->P[1][0] / S;
 80065f6:	69fb      	ldr	r3, [r7, #28]
 80065f8:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 80065fc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006600:	f7fa f8d0 	bl	80007a4 <__aeabi_ddiv>
 8006604:	4602      	mov	r2, r0
 8006606:	460b      	mov	r3, r1
 8006608:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28

    double y = newAngle - Kalman->angle;
 800660c:	69fb      	ldr	r3, [r7, #28]
 800660e:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8006612:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8006616:	f7f9 fde3 	bl	80001e0 <__aeabi_dsub>
 800661a:	4602      	mov	r2, r0
 800661c:	460b      	mov	r3, r1
 800661e:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    Kalman->angle += K[0] * y;
 8006622:	69fb      	ldr	r3, [r7, #28]
 8006624:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8006628:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800662c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006630:	f7f9 ff8e 	bl	8000550 <__aeabi_dmul>
 8006634:	4602      	mov	r2, r0
 8006636:	460b      	mov	r3, r1
 8006638:	4620      	mov	r0, r4
 800663a:	4629      	mov	r1, r5
 800663c:	f7f9 fdd2 	bl	80001e4 <__adddf3>
 8006640:	4602      	mov	r2, r0
 8006642:	460b      	mov	r3, r1
 8006644:	69f9      	ldr	r1, [r7, #28]
 8006646:	e9c1 2306 	strd	r2, r3, [r1, #24]
    Kalman->bias += K[1] * y;
 800664a:	69fb      	ldr	r3, [r7, #28]
 800664c:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 8006650:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8006654:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006658:	f7f9 ff7a 	bl	8000550 <__aeabi_dmul>
 800665c:	4602      	mov	r2, r0
 800665e:	460b      	mov	r3, r1
 8006660:	4620      	mov	r0, r4
 8006662:	4629      	mov	r1, r5
 8006664:	f7f9 fdbe 	bl	80001e4 <__adddf3>
 8006668:	4602      	mov	r2, r0
 800666a:	460b      	mov	r3, r1
 800666c:	69f9      	ldr	r1, [r7, #28]
 800666e:	e9c1 2308 	strd	r2, r3, [r1, #32]

    double P00_temp = Kalman->P[0][0];
 8006672:	69fb      	ldr	r3, [r7, #28]
 8006674:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8006678:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    double P01_temp = Kalman->P[0][1];
 800667c:	69fb      	ldr	r3, [r7, #28]
 800667e:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8006682:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30

    Kalman->P[0][0] -= K[0] * P00_temp;
 8006686:	69fb      	ldr	r3, [r7, #28]
 8006688:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 800668c:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8006690:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006694:	f7f9 ff5c 	bl	8000550 <__aeabi_dmul>
 8006698:	4602      	mov	r2, r0
 800669a:	460b      	mov	r3, r1
 800669c:	4620      	mov	r0, r4
 800669e:	4629      	mov	r1, r5
 80066a0:	f7f9 fd9e 	bl	80001e0 <__aeabi_dsub>
 80066a4:	4602      	mov	r2, r0
 80066a6:	460b      	mov	r3, r1
 80066a8:	69f9      	ldr	r1, [r7, #28]
 80066aa:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    Kalman->P[0][1] -= K[0] * P01_temp;
 80066ae:	69fb      	ldr	r3, [r7, #28]
 80066b0:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	; 0x30
 80066b4:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80066b8:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80066bc:	f7f9 ff48 	bl	8000550 <__aeabi_dmul>
 80066c0:	4602      	mov	r2, r0
 80066c2:	460b      	mov	r3, r1
 80066c4:	4620      	mov	r0, r4
 80066c6:	4629      	mov	r1, r5
 80066c8:	f7f9 fd8a 	bl	80001e0 <__aeabi_dsub>
 80066cc:	4602      	mov	r2, r0
 80066ce:	460b      	mov	r3, r1
 80066d0:	69f9      	ldr	r1, [r7, #28]
 80066d2:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    Kalman->P[1][0] -= K[1] * P00_temp;
 80066d6:	69fb      	ldr	r3, [r7, #28]
 80066d8:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	; 0x38
 80066dc:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80066e0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80066e4:	f7f9 ff34 	bl	8000550 <__aeabi_dmul>
 80066e8:	4602      	mov	r2, r0
 80066ea:	460b      	mov	r3, r1
 80066ec:	4620      	mov	r0, r4
 80066ee:	4629      	mov	r1, r5
 80066f0:	f7f9 fd76 	bl	80001e0 <__aeabi_dsub>
 80066f4:	4602      	mov	r2, r0
 80066f6:	460b      	mov	r3, r1
 80066f8:	69f9      	ldr	r1, [r7, #28]
 80066fa:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
    Kalman->P[1][1] -= K[1] * P01_temp;
 80066fe:	69fb      	ldr	r3, [r7, #28]
 8006700:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	; 0x40
 8006704:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8006708:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800670c:	f7f9 ff20 	bl	8000550 <__aeabi_dmul>
 8006710:	4602      	mov	r2, r0
 8006712:	460b      	mov	r3, r1
 8006714:	4620      	mov	r0, r4
 8006716:	4629      	mov	r1, r5
 8006718:	f7f9 fd62 	bl	80001e0 <__aeabi_dsub>
 800671c:	4602      	mov	r2, r0
 800671e:	460b      	mov	r3, r1
 8006720:	69f9      	ldr	r1, [r7, #28]
 8006722:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40

    return Kalman->angle;
 8006726:	69fb      	ldr	r3, [r7, #28]
 8006728:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 800672c:	ec43 2b17 	vmov	d7, r2, r3
};
 8006730:	eeb0 0a47 	vmov.f32	s0, s14
 8006734:	eef0 0a67 	vmov.f32	s1, s15
 8006738:	3758      	adds	r7, #88	; 0x58
 800673a:	46bd      	mov	sp, r7
 800673c:	bdb0      	pop	{r4, r5, r7, pc}
	...

08006740 <KalmanSolve>:

void KalmanSolve(MPU6050_t *DataStruct, Kalman_t *KalmanX, Kalman_t *KalmanY){
 8006740:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006744:	b08c      	sub	sp, #48	; 0x30
 8006746:	af00      	add	r7, sp, #0
 8006748:	60f8      	str	r0, [r7, #12]
 800674a:	60b9      	str	r1, [r7, #8]
 800674c:	607a      	str	r2, [r7, #4]
	double dt = (double) (HAL_GetTick() - timer) / 1000;
 800674e:	f7fb f8db 	bl	8001908 <HAL_GetTick>
 8006752:	4602      	mov	r2, r0
 8006754:	4b82      	ldr	r3, [pc, #520]	; (8006960 <KalmanSolve+0x220>)
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	1ad3      	subs	r3, r2, r3
 800675a:	4618      	mov	r0, r3
 800675c:	f7f9 fe7e 	bl	800045c <__aeabi_ui2d>
 8006760:	f04f 0200 	mov.w	r2, #0
 8006764:	4b7f      	ldr	r3, [pc, #508]	; (8006964 <KalmanSolve+0x224>)
 8006766:	f7fa f81d 	bl	80007a4 <__aeabi_ddiv>
 800676a:	4602      	mov	r2, r0
 800676c:	460b      	mov	r3, r1
 800676e:	e9c7 2308 	strd	r2, r3, [r7, #32]
    timer = HAL_GetTick();
 8006772:	f7fb f8c9 	bl	8001908 <HAL_GetTick>
 8006776:	4603      	mov	r3, r0
 8006778:	4a79      	ldr	r2, [pc, #484]	; (8006960 <KalmanSolve+0x220>)
 800677a:	6013      	str	r3, [r2, #0]
    double roll;
    double roll_sqrt = sqrt(
            DataStruct->Accel_X_RAW * DataStruct->Accel_X_RAW + DataStruct->Accel_Z_RAW * DataStruct->Accel_Z_RAW);
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006782:	461a      	mov	r2, r3
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	f9b3 3000 	ldrsh.w	r3, [r3]
 800678a:	fb03 f202 	mul.w	r2, r3, r2
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8006794:	4619      	mov	r1, r3
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800679c:	fb01 f303 	mul.w	r3, r1, r3
 80067a0:	4413      	add	r3, r2
    double roll_sqrt = sqrt(
 80067a2:	4618      	mov	r0, r3
 80067a4:	f7f9 fe6a 	bl	800047c <__aeabi_i2d>
 80067a8:	4602      	mov	r2, r0
 80067aa:	460b      	mov	r3, r1
 80067ac:	ec43 2b10 	vmov	d0, r2, r3
 80067b0:	f000 fb68 	bl	8006e84 <sqrt>
 80067b4:	ed87 0b06 	vstr	d0, [r7, #24]
    if (roll_sqrt != 0.0) {
 80067b8:	f04f 0200 	mov.w	r2, #0
 80067bc:	f04f 0300 	mov.w	r3, #0
 80067c0:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80067c4:	f7fa f92c 	bl	8000a20 <__aeabi_dcmpeq>
 80067c8:	4603      	mov	r3, r0
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d11f      	bne.n	800680e <KalmanSolve+0xce>
        roll = atan(DataStruct->Accel_Y_RAW / roll_sqrt) * RAD_TO_DEG;
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80067d4:	4618      	mov	r0, r3
 80067d6:	f7f9 fe51 	bl	800047c <__aeabi_i2d>
 80067da:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80067de:	f7f9 ffe1 	bl	80007a4 <__aeabi_ddiv>
 80067e2:	4602      	mov	r2, r0
 80067e4:	460b      	mov	r3, r1
 80067e6:	ec43 2b17 	vmov	d7, r2, r3
 80067ea:	eeb0 0a47 	vmov.f32	s0, s14
 80067ee:	eef0 0a67 	vmov.f32	s1, s15
 80067f2:	f000 fb75 	bl	8006ee0 <atan>
 80067f6:	ec51 0b10 	vmov	r0, r1, d0
 80067fa:	a357      	add	r3, pc, #348	; (adr r3, 8006958 <KalmanSolve+0x218>)
 80067fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006800:	f7f9 fea6 	bl	8000550 <__aeabi_dmul>
 8006804:	4602      	mov	r2, r0
 8006806:	460b      	mov	r3, r1
 8006808:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 800680c:	e005      	b.n	800681a <KalmanSolve+0xda>
    } else {
        roll = 0.0;
 800680e:	f04f 0200 	mov.w	r2, #0
 8006812:	f04f 0300 	mov.w	r3, #0
 8006816:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    }
    double pitch = atan2(-DataStruct->Accel_X_RAW, DataStruct->Accel_Z_RAW) * RAD_TO_DEG;
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006820:	425b      	negs	r3, r3
 8006822:	4618      	mov	r0, r3
 8006824:	f7f9 fe2a 	bl	800047c <__aeabi_i2d>
 8006828:	4682      	mov	sl, r0
 800682a:	468b      	mov	fp, r1
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8006832:	4618      	mov	r0, r3
 8006834:	f7f9 fe22 	bl	800047c <__aeabi_i2d>
 8006838:	4602      	mov	r2, r0
 800683a:	460b      	mov	r3, r1
 800683c:	ec43 2b11 	vmov	d1, r2, r3
 8006840:	ec4b ab10 	vmov	d0, sl, fp
 8006844:	f000 fb1c 	bl	8006e80 <atan2>
 8006848:	ec51 0b10 	vmov	r0, r1, d0
 800684c:	a342      	add	r3, pc, #264	; (adr r3, 8006958 <KalmanSolve+0x218>)
 800684e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006852:	f7f9 fe7d 	bl	8000550 <__aeabi_dmul>
 8006856:	4602      	mov	r2, r0
 8006858:	460b      	mov	r3, r1
 800685a:	e9c7 2304 	strd	r2, r3, [r7, #16]
    if ((pitch < -90 && DataStruct->KalmanAngleY > 90) || (pitch > 90 && DataStruct->KalmanAngleY < -90)) {
 800685e:	f04f 0200 	mov.w	r2, #0
 8006862:	4b41      	ldr	r3, [pc, #260]	; (8006968 <KalmanSolve+0x228>)
 8006864:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8006868:	f7fa f8e4 	bl	8000a34 <__aeabi_dcmplt>
 800686c:	4603      	mov	r3, r0
 800686e:	2b00      	cmp	r3, #0
 8006870:	d00a      	beq.n	8006888 <KalmanSolve+0x148>
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8006878:	f04f 0200 	mov.w	r2, #0
 800687c:	4b3b      	ldr	r3, [pc, #236]	; (800696c <KalmanSolve+0x22c>)
 800687e:	f7fa f8f7 	bl	8000a70 <__aeabi_dcmpgt>
 8006882:	4603      	mov	r3, r0
 8006884:	2b00      	cmp	r3, #0
 8006886:	d114      	bne.n	80068b2 <KalmanSolve+0x172>
 8006888:	f04f 0200 	mov.w	r2, #0
 800688c:	4b37      	ldr	r3, [pc, #220]	; (800696c <KalmanSolve+0x22c>)
 800688e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8006892:	f7fa f8ed 	bl	8000a70 <__aeabi_dcmpgt>
 8006896:	4603      	mov	r3, r0
 8006898:	2b00      	cmp	r3, #0
 800689a:	d015      	beq.n	80068c8 <KalmanSolve+0x188>
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 80068a2:	f04f 0200 	mov.w	r2, #0
 80068a6:	4b30      	ldr	r3, [pc, #192]	; (8006968 <KalmanSolve+0x228>)
 80068a8:	f7fa f8c4 	bl	8000a34 <__aeabi_dcmplt>
 80068ac:	4603      	mov	r3, r0
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d00a      	beq.n	80068c8 <KalmanSolve+0x188>
        KalmanY->angle = pitch;
 80068b2:	6879      	ldr	r1, [r7, #4]
 80068b4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80068b8:	e9c1 2306 	strd	r2, r3, [r1, #24]
        DataStruct->KalmanAngleY = pitch;
 80068bc:	68f9      	ldr	r1, [r7, #12]
 80068be:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80068c2:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
 80068c6:	e014      	b.n	80068f2 <KalmanSolve+0x1b2>
    } else {
        DataStruct->KalmanAngleY = Kalman_getAngle(KalmanY, pitch, DataStruct->Gy, dt);
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	ed93 7b0c 	vldr	d7, [r3, #48]	; 0x30
 80068ce:	ed97 2b08 	vldr	d2, [r7, #32]
 80068d2:	eeb0 1a47 	vmov.f32	s2, s14
 80068d6:	eef0 1a67 	vmov.f32	s3, s15
 80068da:	ed97 0b04 	vldr	d0, [r7, #16]
 80068de:	6878      	ldr	r0, [r7, #4]
 80068e0:	f7ff fdd2 	bl	8006488 <Kalman_getAngle>
 80068e4:	eeb0 7a40 	vmov.f32	s14, s0
 80068e8:	eef0 7a60 	vmov.f32	s15, s1
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	ed83 7b14 	vstr	d7, [r3, #80]	; 0x50
    }
    if (fabs(DataStruct->KalmanAngleY) > 90)
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 80068f8:	4690      	mov	r8, r2
 80068fa:	f023 4900 	bic.w	r9, r3, #2147483648	; 0x80000000
 80068fe:	f04f 0200 	mov.w	r2, #0
 8006902:	4b1a      	ldr	r3, [pc, #104]	; (800696c <KalmanSolve+0x22c>)
 8006904:	4640      	mov	r0, r8
 8006906:	4649      	mov	r1, r9
 8006908:	f7fa f8b2 	bl	8000a70 <__aeabi_dcmpgt>
 800690c:	4603      	mov	r3, r0
 800690e:	2b00      	cmp	r3, #0
 8006910:	d008      	beq.n	8006924 <KalmanSolve+0x1e4>
        DataStruct->Gx = -DataStruct->Gx;
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8006918:	4614      	mov	r4, r2
 800691a:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	e9c3 450a 	strd	r4, r5, [r3, #40]	; 0x28
    DataStruct->KalmanAngleX = Kalman_getAngle(KalmanX, roll, DataStruct->Gy, dt);
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	ed93 7b0c 	vldr	d7, [r3, #48]	; 0x30
 800692a:	ed97 2b08 	vldr	d2, [r7, #32]
 800692e:	eeb0 1a47 	vmov.f32	s2, s14
 8006932:	eef0 1a67 	vmov.f32	s3, s15
 8006936:	ed97 0b0a 	vldr	d0, [r7, #40]	; 0x28
 800693a:	68b8      	ldr	r0, [r7, #8]
 800693c:	f7ff fda4 	bl	8006488 <Kalman_getAngle>
 8006940:	eeb0 7a40 	vmov.f32	s14, s0
 8006944:	eef0 7a60 	vmov.f32	s15, s1
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	ed83 7b12 	vstr	d7, [r3, #72]	; 0x48

}
 800694e:	bf00      	nop
 8006950:	3730      	adds	r7, #48	; 0x30
 8006952:	46bd      	mov	sp, r7
 8006954:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006958:	1a63c1f8 	.word	0x1a63c1f8
 800695c:	404ca5dc 	.word	0x404ca5dc
 8006960:	20000420 	.word	0x20000420
 8006964:	408f4000 	.word	0x408f4000
 8006968:	c0568000 	.word	0xc0568000
 800696c:	40568000 	.word	0x40568000

08006970 <ibus_init>:
static uint8_t fail_safe_flag = 0;


/* Main Functions */
void ibus_init()
{
 8006970:	b580      	push	{r7, lr}
 8006972:	af00      	add	r7, sp, #0
	HAL_UART_Receive_DMA(IBUS_UART, uart_rx_buffer, 32);
 8006974:	2220      	movs	r2, #32
 8006976:	4903      	ldr	r1, [pc, #12]	; (8006984 <ibus_init+0x14>)
 8006978:	4803      	ldr	r0, [pc, #12]	; (8006988 <ibus_init+0x18>)
 800697a:	f7fe fc63 	bl	8005244 <HAL_UART_Receive_DMA>
}
 800697e:	bf00      	nop
 8006980:	bd80      	pop	{r7, pc}
 8006982:	bf00      	nop
 8006984:	20000424 	.word	0x20000424
 8006988:	20000274 	.word	0x20000274

0800698c <ibus_read>:

bool ibus_read(uint16_t* ibus_data)
{
 800698c:	b580      	push	{r7, lr}
 800698e:	b082      	sub	sp, #8
 8006990:	af00      	add	r7, sp, #0
 8006992:	6078      	str	r0, [r7, #4]
	if(!ibus_is_valid())
 8006994:	f000 f81e 	bl	80069d4 <ibus_is_valid>
 8006998:	4603      	mov	r3, r0
 800699a:	f083 0301 	eor.w	r3, r3, #1
 800699e:	b2db      	uxtb	r3, r3
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d001      	beq.n	80069a8 <ibus_read+0x1c>
		return false;
 80069a4:	2300      	movs	r3, #0
 80069a6:	e011      	b.n	80069cc <ibus_read+0x40>

	if(!ibus_checksum())
 80069a8:	f000 f82c 	bl	8006a04 <ibus_checksum>
 80069ac:	4603      	mov	r3, r0
 80069ae:	f083 0301 	eor.w	r3, r3, #1
 80069b2:	b2db      	uxtb	r3, r3
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d001      	beq.n	80069bc <ibus_read+0x30>
		return false;
 80069b8:	2300      	movs	r3, #0
 80069ba:	e007      	b.n	80069cc <ibus_read+0x40>

	ibus_update(ibus_data);
 80069bc:	6878      	ldr	r0, [r7, #4]
 80069be:	f000 f851 	bl	8006a64 <ibus_update>
	ibus_soft_failsafe(ibus_data, 10);
 80069c2:	210a      	movs	r1, #10
 80069c4:	6878      	ldr	r0, [r7, #4]
 80069c6:	f000 f87b 	bl	8006ac0 <ibus_soft_failsafe>
	return true;
 80069ca:	2301      	movs	r3, #1
}
 80069cc:	4618      	mov	r0, r3
 80069ce:	3708      	adds	r7, #8
 80069d0:	46bd      	mov	sp, r7
 80069d2:	bd80      	pop	{r7, pc}

080069d4 <ibus_is_valid>:


/* Sub Functions */
bool ibus_is_valid()
{
 80069d4:	b480      	push	{r7}
 80069d6:	af00      	add	r7, sp, #0
	// is it ibus?
	return (uart_rx_buffer[0] == IBUS_LENGTH && uart_rx_buffer[1] == IBUS_COMMAND40);
 80069d8:	4b09      	ldr	r3, [pc, #36]	; (8006a00 <ibus_is_valid+0x2c>)
 80069da:	781b      	ldrb	r3, [r3, #0]
 80069dc:	2b20      	cmp	r3, #32
 80069de:	d105      	bne.n	80069ec <ibus_is_valid+0x18>
 80069e0:	4b07      	ldr	r3, [pc, #28]	; (8006a00 <ibus_is_valid+0x2c>)
 80069e2:	785b      	ldrb	r3, [r3, #1]
 80069e4:	2b40      	cmp	r3, #64	; 0x40
 80069e6:	d101      	bne.n	80069ec <ibus_is_valid+0x18>
 80069e8:	2301      	movs	r3, #1
 80069ea:	e000      	b.n	80069ee <ibus_is_valid+0x1a>
 80069ec:	2300      	movs	r3, #0
 80069ee:	f003 0301 	and.w	r3, r3, #1
 80069f2:	b2db      	uxtb	r3, r3
}
 80069f4:	4618      	mov	r0, r3
 80069f6:	46bd      	mov	sp, r7
 80069f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069fc:	4770      	bx	lr
 80069fe:	bf00      	nop
 8006a00:	20000424 	.word	0x20000424

08006a04 <ibus_checksum>:

bool ibus_checksum()
{
 8006a04:	b480      	push	{r7}
 8006a06:	b085      	sub	sp, #20
 8006a08:	af00      	add	r7, sp, #0
 	uint16_t checksum_cal = 0xffff;
 8006a0a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006a0e:	81fb      	strh	r3, [r7, #14]
	uint16_t checksum_ibus;

	for(int i = 0; i < 30; i++)
 8006a10:	2300      	movs	r3, #0
 8006a12:	60bb      	str	r3, [r7, #8]
 8006a14:	e00a      	b.n	8006a2c <ibus_checksum+0x28>
	{
		checksum_cal -= uart_rx_buffer[i];
 8006a16:	4a12      	ldr	r2, [pc, #72]	; (8006a60 <ibus_checksum+0x5c>)
 8006a18:	68bb      	ldr	r3, [r7, #8]
 8006a1a:	4413      	add	r3, r2
 8006a1c:	781b      	ldrb	r3, [r3, #0]
 8006a1e:	b29b      	uxth	r3, r3
 8006a20:	89fa      	ldrh	r2, [r7, #14]
 8006a22:	1ad3      	subs	r3, r2, r3
 8006a24:	81fb      	strh	r3, [r7, #14]
	for(int i = 0; i < 30; i++)
 8006a26:	68bb      	ldr	r3, [r7, #8]
 8006a28:	3301      	adds	r3, #1
 8006a2a:	60bb      	str	r3, [r7, #8]
 8006a2c:	68bb      	ldr	r3, [r7, #8]
 8006a2e:	2b1d      	cmp	r3, #29
 8006a30:	ddf1      	ble.n	8006a16 <ibus_checksum+0x12>
	}

	checksum_ibus = uart_rx_buffer[31] << 8 | uart_rx_buffer[30]; // checksum value from ibus
 8006a32:	4b0b      	ldr	r3, [pc, #44]	; (8006a60 <ibus_checksum+0x5c>)
 8006a34:	7fdb      	ldrb	r3, [r3, #31]
 8006a36:	021b      	lsls	r3, r3, #8
 8006a38:	b21a      	sxth	r2, r3
 8006a3a:	4b09      	ldr	r3, [pc, #36]	; (8006a60 <ibus_checksum+0x5c>)
 8006a3c:	7f9b      	ldrb	r3, [r3, #30]
 8006a3e:	b21b      	sxth	r3, r3
 8006a40:	4313      	orrs	r3, r2
 8006a42:	b21b      	sxth	r3, r3
 8006a44:	80fb      	strh	r3, [r7, #6]
	return (checksum_ibus == checksum_cal);
 8006a46:	88fa      	ldrh	r2, [r7, #6]
 8006a48:	89fb      	ldrh	r3, [r7, #14]
 8006a4a:	429a      	cmp	r2, r3
 8006a4c:	bf0c      	ite	eq
 8006a4e:	2301      	moveq	r3, #1
 8006a50:	2300      	movne	r3, #0
 8006a52:	b2db      	uxtb	r3, r3
}
 8006a54:	4618      	mov	r0, r3
 8006a56:	3714      	adds	r7, #20
 8006a58:	46bd      	mov	sp, r7
 8006a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a5e:	4770      	bx	lr
 8006a60:	20000424 	.word	0x20000424

08006a64 <ibus_update>:

void ibus_update(uint16_t* ibus_data)
{
 8006a64:	b580      	push	{r7, lr}
 8006a66:	b084      	sub	sp, #16
 8006a68:	af00      	add	r7, sp, #0
 8006a6a:	6078      	str	r0, [r7, #4]
	for(int ch_index = 0, bf_index = 2; ch_index < IBUS_USER_CHANNELS; ch_index++, bf_index += 2)
 8006a6c:	2300      	movs	r3, #0
 8006a6e:	60fb      	str	r3, [r7, #12]
 8006a70:	2302      	movs	r3, #2
 8006a72:	60bb      	str	r3, [r7, #8]
 8006a74:	e018      	b.n	8006aa8 <ibus_update+0x44>
	{
		ibus_data[ch_index] = uart_rx_buffer[bf_index + 1] << 8 | uart_rx_buffer[bf_index];
 8006a76:	68bb      	ldr	r3, [r7, #8]
 8006a78:	3301      	adds	r3, #1
 8006a7a:	4a10      	ldr	r2, [pc, #64]	; (8006abc <ibus_update+0x58>)
 8006a7c:	5cd3      	ldrb	r3, [r2, r3]
 8006a7e:	021b      	lsls	r3, r3, #8
 8006a80:	b21a      	sxth	r2, r3
 8006a82:	490e      	ldr	r1, [pc, #56]	; (8006abc <ibus_update+0x58>)
 8006a84:	68bb      	ldr	r3, [r7, #8]
 8006a86:	440b      	add	r3, r1
 8006a88:	781b      	ldrb	r3, [r3, #0]
 8006a8a:	b21b      	sxth	r3, r3
 8006a8c:	4313      	orrs	r3, r2
 8006a8e:	b219      	sxth	r1, r3
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	005b      	lsls	r3, r3, #1
 8006a94:	687a      	ldr	r2, [r7, #4]
 8006a96:	4413      	add	r3, r2
 8006a98:	b28a      	uxth	r2, r1
 8006a9a:	801a      	strh	r2, [r3, #0]
	for(int ch_index = 0, bf_index = 2; ch_index < IBUS_USER_CHANNELS; ch_index++, bf_index += 2)
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	3301      	adds	r3, #1
 8006aa0:	60fb      	str	r3, [r7, #12]
 8006aa2:	68bb      	ldr	r3, [r7, #8]
 8006aa4:	3302      	adds	r3, #2
 8006aa6:	60bb      	str	r3, [r7, #8]
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	2b05      	cmp	r3, #5
 8006aac:	dde3      	ble.n	8006a76 <ibus_update+0x12>
	}
	HAL_Delay(100);
 8006aae:	2064      	movs	r0, #100	; 0x64
 8006ab0:	f7fa ff36 	bl	8001920 <HAL_Delay>
}
 8006ab4:	bf00      	nop
 8006ab6:	3710      	adds	r7, #16
 8006ab8:	46bd      	mov	sp, r7
 8006aba:	bd80      	pop	{r7, pc}
 8006abc:	20000424 	.word	0x20000424

08006ac0 <ibus_soft_failsafe>:

/**
 * @note FS-A8S don't have fail safe feature, So make software fail-safe.
 */
void ibus_soft_failsafe(uint16_t* ibus_data, uint8_t fail_safe_max)
{
 8006ac0:	b480      	push	{r7}
 8006ac2:	b085      	sub	sp, #20
 8006ac4:	af00      	add	r7, sp, #0
 8006ac6:	6078      	str	r0, [r7, #4]
 8006ac8:	460b      	mov	r3, r1
 8006aca:	70fb      	strb	r3, [r7, #3]
	fail_safe_flag++;
 8006acc:	4b18      	ldr	r3, [pc, #96]	; (8006b30 <ibus_soft_failsafe+0x70>)
 8006ace:	781b      	ldrb	r3, [r3, #0]
 8006ad0:	3301      	adds	r3, #1
 8006ad2:	b2da      	uxtb	r2, r3
 8006ad4:	4b16      	ldr	r3, [pc, #88]	; (8006b30 <ibus_soft_failsafe+0x70>)
 8006ad6:	701a      	strb	r2, [r3, #0]

	if(fail_safe_max > fail_safe_flag)
 8006ad8:	4b15      	ldr	r3, [pc, #84]	; (8006b30 <ibus_soft_failsafe+0x70>)
 8006ada:	781b      	ldrb	r3, [r3, #0]
 8006adc:	78fa      	ldrb	r2, [r7, #3]
 8006ade:	429a      	cmp	r2, r3
 8006ae0:	d820      	bhi.n	8006b24 <ibus_soft_failsafe+0x64>
		return;

	// Clear ibus data
	for(int i = 0; i < IBUS_USER_CHANNELS; i++)
 8006ae2:	2300      	movs	r3, #0
 8006ae4:	60fb      	str	r3, [r7, #12]
 8006ae6:	e008      	b.n	8006afa <ibus_soft_failsafe+0x3a>
		ibus_data[i] = 0;
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	005b      	lsls	r3, r3, #1
 8006aec:	687a      	ldr	r2, [r7, #4]
 8006aee:	4413      	add	r3, r2
 8006af0:	2200      	movs	r2, #0
 8006af2:	801a      	strh	r2, [r3, #0]
	for(int i = 0; i < IBUS_USER_CHANNELS; i++)
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	3301      	adds	r3, #1
 8006af8:	60fb      	str	r3, [r7, #12]
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	2b05      	cmp	r3, #5
 8006afe:	ddf3      	ble.n	8006ae8 <ibus_soft_failsafe+0x28>

	// Clear ibus buffer
	for(int j = 0; j < IBUS_LENGTH; j++)
 8006b00:	2300      	movs	r3, #0
 8006b02:	60bb      	str	r3, [r7, #8]
 8006b04:	e007      	b.n	8006b16 <ibus_soft_failsafe+0x56>
		uart_rx_buffer[j] = 0;
 8006b06:	4a0b      	ldr	r2, [pc, #44]	; (8006b34 <ibus_soft_failsafe+0x74>)
 8006b08:	68bb      	ldr	r3, [r7, #8]
 8006b0a:	4413      	add	r3, r2
 8006b0c:	2200      	movs	r2, #0
 8006b0e:	701a      	strb	r2, [r3, #0]
	for(int j = 0; j < IBUS_LENGTH; j++)
 8006b10:	68bb      	ldr	r3, [r7, #8]
 8006b12:	3301      	adds	r3, #1
 8006b14:	60bb      	str	r3, [r7, #8]
 8006b16:	68bb      	ldr	r3, [r7, #8]
 8006b18:	2b1f      	cmp	r3, #31
 8006b1a:	ddf4      	ble.n	8006b06 <ibus_soft_failsafe+0x46>

	fail_safe_flag = 0;
 8006b1c:	4b04      	ldr	r3, [pc, #16]	; (8006b30 <ibus_soft_failsafe+0x70>)
 8006b1e:	2200      	movs	r2, #0
 8006b20:	701a      	strb	r2, [r3, #0]
	return;
 8006b22:	e000      	b.n	8006b26 <ibus_soft_failsafe+0x66>
		return;
 8006b24:	bf00      	nop
}
 8006b26:	3714      	adds	r7, #20
 8006b28:	46bd      	mov	sp, r7
 8006b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b2e:	4770      	bx	lr
 8006b30:	20000444 	.word	0x20000444
 8006b34:	20000424 	.word	0x20000424

08006b38 <ibus_reset_failsafe>:

/**
 * @note This function is located in HAL_UART_RxCpltCallback.
 */
void ibus_reset_failsafe()
{
 8006b38:	b480      	push	{r7}
 8006b3a:	af00      	add	r7, sp, #0
		fail_safe_flag = 0; // flag reset
 8006b3c:	4b03      	ldr	r3, [pc, #12]	; (8006b4c <ibus_reset_failsafe+0x14>)
 8006b3e:	2200      	movs	r2, #0
 8006b40:	701a      	strb	r2, [r3, #0]
}
 8006b42:	bf00      	nop
 8006b44:	46bd      	mov	sp, r7
 8006b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b4a:	4770      	bx	lr
 8006b4c:	20000444 	.word	0x20000444

08006b50 <adxl_write>:
#include "imu_adxl345.h"
uint8_t data[6];
uint16_t x,y,z;
float xg,yg,zg;
                                                          //write fonksiyonu modülün uyanması içindir. Her modülün uyanması için gönderilmesi gerekilen adress ve value değeri farklıdır. Buna dokümasyondan ulaşılır
void adxl_write(uint8_t adress, uint8_t value){ 
 8006b50:	b580      	push	{r7, lr}
 8006b52:	b084      	sub	sp, #16
 8006b54:	af00      	add	r7, sp, #0
 8006b56:	4603      	mov	r3, r0
 8006b58:	460a      	mov	r2, r1
 8006b5a:	71fb      	strb	r3, [r7, #7]
 8006b5c:	4613      	mov	r3, r2
 8006b5e:	71bb      	strb	r3, [r7, #6]
	uint8_t data[2];
	data[0]=adress|0x40; // adress verisini ayarlıyoruz
 8006b60:	79fb      	ldrb	r3, [r7, #7]
 8006b62:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006b66:	b2db      	uxtb	r3, r3
 8006b68:	733b      	strb	r3, [r7, #12]
	data[1]=value;       // value değerini ayarlıyoruz
 8006b6a:	79bb      	ldrb	r3, [r7, #6]
 8006b6c:	737b      	strb	r3, [r7, #13]
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET); //CS pinine LOW vererek o modülle iletişime geçeceğimizi belirtiriz.
 8006b6e:	2200      	movs	r2, #0
 8006b70:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006b74:	4809      	ldr	r0, [pc, #36]	; (8006b9c <adxl_write+0x4c>)
 8006b76:	f7fb fd8f 	bl	8002698 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, data, 2, 100);                //Veri aktarılır ve modül uyanır.
 8006b7a:	f107 010c 	add.w	r1, r7, #12
 8006b7e:	2364      	movs	r3, #100	; 0x64
 8006b80:	2202      	movs	r2, #2
 8006b82:	4807      	ldr	r0, [pc, #28]	; (8006ba0 <adxl_write+0x50>)
 8006b84:	f7fd fa6a 	bl	800405c <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET);   //CS pinine HIGH vererek ilteşimi bitiririz
 8006b88:	2201      	movs	r2, #1
 8006b8a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006b8e:	4803      	ldr	r0, [pc, #12]	; (8006b9c <adxl_write+0x4c>)
 8006b90:	f7fb fd82 	bl	8002698 <HAL_GPIO_WritePin>
}
 8006b94:	bf00      	nop
 8006b96:	3710      	adds	r7, #16
 8006b98:	46bd      	mov	sp, r7
 8006b9a:	bd80      	pop	{r7, pc}
 8006b9c:	40020400 	.word	0x40020400
 8006ba0:	200001d4 	.word	0x200001d4

08006ba4 <adxl_init>:
	HAL_SPI_Transmit(&hspi2, &adress, 1, 100);    //Modüle Adress verisini göndeririz
	HAL_SPI_Receive(&hspi2, data, 6, 100);      //daha önce belirlediğimiz 8 bitlik data değişkenine bunları yazıyoruz...
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET);    //CS pinine HIGH vererek ilteşimi bitiririz
}
void adxl_init(void)    //init her modülün kendi özellik ve dökümantasyonuna göre yapılmalıdır. Burada ADXL345 için hazırlanmış versiyon gözükmektedir
{
 8006ba4:	b580      	push	{r7, lr}
 8006ba6:	af00      	add	r7, sp, #0
	adxl_write(0x31, 0x01);
 8006ba8:	2101      	movs	r1, #1
 8006baa:	2031      	movs	r0, #49	; 0x31
 8006bac:	f7ff ffd0 	bl	8006b50 <adxl_write>
	adxl_write(0x2d, 0x00);
 8006bb0:	2100      	movs	r1, #0
 8006bb2:	202d      	movs	r0, #45	; 0x2d
 8006bb4:	f7ff ffcc 	bl	8006b50 <adxl_write>
	adxl_write(0x2d, 0x08);
 8006bb8:	2108      	movs	r1, #8
 8006bba:	202d      	movs	r0, #45	; 0x2d
 8006bbc:	f7ff ffc8 	bl	8006b50 <adxl_write>
}
 8006bc0:	bf00      	nop
 8006bc2:	bd80      	pop	{r7, pc}

08006bc4 <MPU6050_Init>:
const uint16_t i2c_timeout = 100;
const double Accel_Z_corrector = 14418.0;



uint8_t MPU6050_Init(I2C_HandleTypeDef *I2Cx) {
 8006bc4:	b580      	push	{r7, lr}
 8006bc6:	b088      	sub	sp, #32
 8006bc8:	af04      	add	r7, sp, #16
 8006bca:	6078      	str	r0, [r7, #4]
    uint8_t check;
    uint8_t Data;

    // check device ID WHO_AM_I

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, WHO_AM_I_REG, 1, &check, 1, i2c_timeout);
 8006bcc:	2364      	movs	r3, #100	; 0x64
 8006bce:	9302      	str	r3, [sp, #8]
 8006bd0:	2301      	movs	r3, #1
 8006bd2:	9301      	str	r3, [sp, #4]
 8006bd4:	f107 030f 	add.w	r3, r7, #15
 8006bd8:	9300      	str	r3, [sp, #0]
 8006bda:	2301      	movs	r3, #1
 8006bdc:	2275      	movs	r2, #117	; 0x75
 8006bde:	21d0      	movs	r1, #208	; 0xd0
 8006be0:	6878      	ldr	r0, [r7, #4]
 8006be2:	f7fb ffb1 	bl	8002b48 <HAL_I2C_Mem_Read>

    if (check == 104)  // 0x68 will be returned by the sensor if everything goes well
 8006be6:	7bfb      	ldrb	r3, [r7, #15]
 8006be8:	2b68      	cmp	r3, #104	; 0x68
 8006bea:	d13d      	bne.n	8006c68 <MPU6050_Init+0xa4>
    {
        // power management register 0X6B we should write all 0's to wake the sensor up
        Data = 0;
 8006bec:	2300      	movs	r3, #0
 8006bee:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, PWR_MGMT_1_REG, 1, &Data, 1, i2c_timeout);
 8006bf0:	2364      	movs	r3, #100	; 0x64
 8006bf2:	9302      	str	r3, [sp, #8]
 8006bf4:	2301      	movs	r3, #1
 8006bf6:	9301      	str	r3, [sp, #4]
 8006bf8:	f107 030e 	add.w	r3, r7, #14
 8006bfc:	9300      	str	r3, [sp, #0]
 8006bfe:	2301      	movs	r3, #1
 8006c00:	226b      	movs	r2, #107	; 0x6b
 8006c02:	21d0      	movs	r1, #208	; 0xd0
 8006c04:	6878      	ldr	r0, [r7, #4]
 8006c06:	f7fb fea5 	bl	8002954 <HAL_I2C_Mem_Write>

        // Set DATA RATE of 1KHz by writing SMPLRT_DIV register
        Data = 0x07;
 8006c0a:	2307      	movs	r3, #7
 8006c0c:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &Data, 1, i2c_timeout);
 8006c0e:	2364      	movs	r3, #100	; 0x64
 8006c10:	9302      	str	r3, [sp, #8]
 8006c12:	2301      	movs	r3, #1
 8006c14:	9301      	str	r3, [sp, #4]
 8006c16:	f107 030e 	add.w	r3, r7, #14
 8006c1a:	9300      	str	r3, [sp, #0]
 8006c1c:	2301      	movs	r3, #1
 8006c1e:	2219      	movs	r2, #25
 8006c20:	21d0      	movs	r1, #208	; 0xd0
 8006c22:	6878      	ldr	r0, [r7, #4]
 8006c24:	f7fb fe96 	bl	8002954 <HAL_I2C_Mem_Write>

        // Set accelerometer configuration in ACCEL_CONFIG Register
        // XA_ST=0,YA_ST=0,ZA_ST=0, FS_SEL=0 -> � 2g
        Data = 0x00;
 8006c28:	2300      	movs	r3, #0
 8006c2a:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 8006c2c:	2364      	movs	r3, #100	; 0x64
 8006c2e:	9302      	str	r3, [sp, #8]
 8006c30:	2301      	movs	r3, #1
 8006c32:	9301      	str	r3, [sp, #4]
 8006c34:	f107 030e 	add.w	r3, r7, #14
 8006c38:	9300      	str	r3, [sp, #0]
 8006c3a:	2301      	movs	r3, #1
 8006c3c:	221c      	movs	r2, #28
 8006c3e:	21d0      	movs	r1, #208	; 0xd0
 8006c40:	6878      	ldr	r0, [r7, #4]
 8006c42:	f7fb fe87 	bl	8002954 <HAL_I2C_Mem_Write>

        // Set Gyroscopic configuration in GYRO_CONFIG Register
        // XG_ST=0,YG_ST=0,ZG_ST=0, FS_SEL=0 -> � 250 �/s
        Data = 0x00;
 8006c46:	2300      	movs	r3, #0
 8006c48:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 8006c4a:	2364      	movs	r3, #100	; 0x64
 8006c4c:	9302      	str	r3, [sp, #8]
 8006c4e:	2301      	movs	r3, #1
 8006c50:	9301      	str	r3, [sp, #4]
 8006c52:	f107 030e 	add.w	r3, r7, #14
 8006c56:	9300      	str	r3, [sp, #0]
 8006c58:	2301      	movs	r3, #1
 8006c5a:	221b      	movs	r2, #27
 8006c5c:	21d0      	movs	r1, #208	; 0xd0
 8006c5e:	6878      	ldr	r0, [r7, #4]
 8006c60:	f7fb fe78 	bl	8002954 <HAL_I2C_Mem_Write>
        return 0;
 8006c64:	2300      	movs	r3, #0
 8006c66:	e000      	b.n	8006c6a <MPU6050_Init+0xa6>
    }
    return 1;
 8006c68:	2301      	movs	r3, #1
}
 8006c6a:	4618      	mov	r0, r3
 8006c6c:	3710      	adds	r7, #16
 8006c6e:	46bd      	mov	sp, r7
 8006c70:	bd80      	pop	{r7, pc}
 8006c72:	0000      	movs	r0, r0
 8006c74:	0000      	movs	r0, r0
	...

08006c78 <MPU6050_Read_All>:

    temp = (int16_t) (Rec_Data[0] << 8 | Rec_Data[1]);
    DataStruct->Temperature = (float) ((int16_t) temp / (float) 340.0 + (float) 36.53);
}

void MPU6050_Read_All(I2C_HandleTypeDef *I2Cx, MPU6050_t *DataStruct) {
 8006c78:	b580      	push	{r7, lr}
 8006c7a:	b08a      	sub	sp, #40	; 0x28
 8006c7c:	af04      	add	r7, sp, #16
 8006c7e:	6078      	str	r0, [r7, #4]
 8006c80:	6039      	str	r1, [r7, #0]
    uint8_t Rec_Data[14];
    int16_t temp;

    // Read 14 BYTES of data starting from ACCEL_XOUT_H register

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, Rec_Data, 14, i2c_timeout);
 8006c82:	2364      	movs	r3, #100	; 0x64
 8006c84:	9302      	str	r3, [sp, #8]
 8006c86:	230e      	movs	r3, #14
 8006c88:	9301      	str	r3, [sp, #4]
 8006c8a:	f107 0308 	add.w	r3, r7, #8
 8006c8e:	9300      	str	r3, [sp, #0]
 8006c90:	2301      	movs	r3, #1
 8006c92:	223b      	movs	r2, #59	; 0x3b
 8006c94:	21d0      	movs	r1, #208	; 0xd0
 8006c96:	6878      	ldr	r0, [r7, #4]
 8006c98:	f7fb ff56 	bl	8002b48 <HAL_I2C_Mem_Read>

    DataStruct->Accel_X_RAW = (int16_t) (Rec_Data[0] << 8 | Rec_Data[1]);
 8006c9c:	7a3b      	ldrb	r3, [r7, #8]
 8006c9e:	021b      	lsls	r3, r3, #8
 8006ca0:	b21a      	sxth	r2, r3
 8006ca2:	7a7b      	ldrb	r3, [r7, #9]
 8006ca4:	b21b      	sxth	r3, r3
 8006ca6:	4313      	orrs	r3, r2
 8006ca8:	b21a      	sxth	r2, r3
 8006caa:	683b      	ldr	r3, [r7, #0]
 8006cac:	801a      	strh	r2, [r3, #0]
    DataStruct->Accel_Y_RAW = (int16_t) (Rec_Data[2] << 8 | Rec_Data[3]);
 8006cae:	7abb      	ldrb	r3, [r7, #10]
 8006cb0:	021b      	lsls	r3, r3, #8
 8006cb2:	b21a      	sxth	r2, r3
 8006cb4:	7afb      	ldrb	r3, [r7, #11]
 8006cb6:	b21b      	sxth	r3, r3
 8006cb8:	4313      	orrs	r3, r2
 8006cba:	b21a      	sxth	r2, r3
 8006cbc:	683b      	ldr	r3, [r7, #0]
 8006cbe:	805a      	strh	r2, [r3, #2]
    DataStruct->Accel_Z_RAW = (int16_t) (Rec_Data[4] << 8 | Rec_Data[5]);
 8006cc0:	7b3b      	ldrb	r3, [r7, #12]
 8006cc2:	021b      	lsls	r3, r3, #8
 8006cc4:	b21a      	sxth	r2, r3
 8006cc6:	7b7b      	ldrb	r3, [r7, #13]
 8006cc8:	b21b      	sxth	r3, r3
 8006cca:	4313      	orrs	r3, r2
 8006ccc:	b21a      	sxth	r2, r3
 8006cce:	683b      	ldr	r3, [r7, #0]
 8006cd0:	809a      	strh	r2, [r3, #4]
    temp = (int16_t) (Rec_Data[6] << 8 | Rec_Data[7]);
 8006cd2:	7bbb      	ldrb	r3, [r7, #14]
 8006cd4:	021b      	lsls	r3, r3, #8
 8006cd6:	b21a      	sxth	r2, r3
 8006cd8:	7bfb      	ldrb	r3, [r7, #15]
 8006cda:	b21b      	sxth	r3, r3
 8006cdc:	4313      	orrs	r3, r2
 8006cde:	82fb      	strh	r3, [r7, #22]
    DataStruct->Gyro_X_RAW = (int16_t) (Rec_Data[8] << 8 | Rec_Data[9]);
 8006ce0:	7c3b      	ldrb	r3, [r7, #16]
 8006ce2:	021b      	lsls	r3, r3, #8
 8006ce4:	b21a      	sxth	r2, r3
 8006ce6:	7c7b      	ldrb	r3, [r7, #17]
 8006ce8:	b21b      	sxth	r3, r3
 8006cea:	4313      	orrs	r3, r2
 8006cec:	b21a      	sxth	r2, r3
 8006cee:	683b      	ldr	r3, [r7, #0]
 8006cf0:	841a      	strh	r2, [r3, #32]
    DataStruct->Gyro_Y_RAW = (int16_t) (Rec_Data[10] << 8 | Rec_Data[11]);
 8006cf2:	7cbb      	ldrb	r3, [r7, #18]
 8006cf4:	021b      	lsls	r3, r3, #8
 8006cf6:	b21a      	sxth	r2, r3
 8006cf8:	7cfb      	ldrb	r3, [r7, #19]
 8006cfa:	b21b      	sxth	r3, r3
 8006cfc:	4313      	orrs	r3, r2
 8006cfe:	b21a      	sxth	r2, r3
 8006d00:	683b      	ldr	r3, [r7, #0]
 8006d02:	845a      	strh	r2, [r3, #34]	; 0x22
    DataStruct->Gyro_Z_RAW = (int16_t) (Rec_Data[12] << 8 | Rec_Data[13]);
 8006d04:	7d3b      	ldrb	r3, [r7, #20]
 8006d06:	021b      	lsls	r3, r3, #8
 8006d08:	b21a      	sxth	r2, r3
 8006d0a:	7d7b      	ldrb	r3, [r7, #21]
 8006d0c:	b21b      	sxth	r3, r3
 8006d0e:	4313      	orrs	r3, r2
 8006d10:	b21a      	sxth	r2, r3
 8006d12:	683b      	ldr	r3, [r7, #0]
 8006d14:	849a      	strh	r2, [r3, #36]	; 0x24



    //asıl verilerimiz
    DataStruct->Ax = DataStruct->Accel_X_RAW / 16384.0;
 8006d16:	683b      	ldr	r3, [r7, #0]
 8006d18:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006d1c:	4618      	mov	r0, r3
 8006d1e:	f7f9 fbad 	bl	800047c <__aeabi_i2d>
 8006d22:	f04f 0200 	mov.w	r2, #0
 8006d26:	4b3a      	ldr	r3, [pc, #232]	; (8006e10 <MPU6050_Read_All+0x198>)
 8006d28:	f7f9 fd3c 	bl	80007a4 <__aeabi_ddiv>
 8006d2c:	4602      	mov	r2, r0
 8006d2e:	460b      	mov	r3, r1
 8006d30:	6839      	ldr	r1, [r7, #0]
 8006d32:	e9c1 2302 	strd	r2, r3, [r1, #8]
    DataStruct->Ay = DataStruct->Accel_Y_RAW / 16384.0;
 8006d36:	683b      	ldr	r3, [r7, #0]
 8006d38:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8006d3c:	4618      	mov	r0, r3
 8006d3e:	f7f9 fb9d 	bl	800047c <__aeabi_i2d>
 8006d42:	f04f 0200 	mov.w	r2, #0
 8006d46:	4b32      	ldr	r3, [pc, #200]	; (8006e10 <MPU6050_Read_All+0x198>)
 8006d48:	f7f9 fd2c 	bl	80007a4 <__aeabi_ddiv>
 8006d4c:	4602      	mov	r2, r0
 8006d4e:	460b      	mov	r3, r1
 8006d50:	6839      	ldr	r1, [r7, #0]
 8006d52:	e9c1 2304 	strd	r2, r3, [r1, #16]
    DataStruct->Az = DataStruct->Accel_Z_RAW / Accel_Z_corrector;
 8006d56:	683b      	ldr	r3, [r7, #0]
 8006d58:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8006d5c:	4618      	mov	r0, r3
 8006d5e:	f7f9 fb8d 	bl	800047c <__aeabi_i2d>
 8006d62:	a327      	add	r3, pc, #156	; (adr r3, 8006e00 <MPU6050_Read_All+0x188>)
 8006d64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d68:	f7f9 fd1c 	bl	80007a4 <__aeabi_ddiv>
 8006d6c:	4602      	mov	r2, r0
 8006d6e:	460b      	mov	r3, r1
 8006d70:	6839      	ldr	r1, [r7, #0]
 8006d72:	e9c1 2306 	strd	r2, r3, [r1, #24]
    DataStruct->Temperature = (float) ((int16_t) temp / (float) 340.0 + (float) 36.53);
 8006d76:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8006d7a:	ee07 3a90 	vmov	s15, r3
 8006d7e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006d82:	eddf 6a24 	vldr	s13, [pc, #144]	; 8006e14 <MPU6050_Read_All+0x19c>
 8006d86:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006d8a:	ed9f 7a23 	vldr	s14, [pc, #140]	; 8006e18 <MPU6050_Read_All+0x1a0>
 8006d8e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006d92:	683b      	ldr	r3, [r7, #0]
 8006d94:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
    DataStruct->Gx = DataStruct->Gyro_X_RAW / 131.0;
 8006d98:	683b      	ldr	r3, [r7, #0]
 8006d9a:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8006d9e:	4618      	mov	r0, r3
 8006da0:	f7f9 fb6c 	bl	800047c <__aeabi_i2d>
 8006da4:	a318      	add	r3, pc, #96	; (adr r3, 8006e08 <MPU6050_Read_All+0x190>)
 8006da6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006daa:	f7f9 fcfb 	bl	80007a4 <__aeabi_ddiv>
 8006dae:	4602      	mov	r2, r0
 8006db0:	460b      	mov	r3, r1
 8006db2:	6839      	ldr	r1, [r7, #0]
 8006db4:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    DataStruct->Gy = DataStruct->Gyro_Y_RAW / 131.0;
 8006db8:	683b      	ldr	r3, [r7, #0]
 8006dba:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 8006dbe:	4618      	mov	r0, r3
 8006dc0:	f7f9 fb5c 	bl	800047c <__aeabi_i2d>
 8006dc4:	a310      	add	r3, pc, #64	; (adr r3, 8006e08 <MPU6050_Read_All+0x190>)
 8006dc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dca:	f7f9 fceb 	bl	80007a4 <__aeabi_ddiv>
 8006dce:	4602      	mov	r2, r0
 8006dd0:	460b      	mov	r3, r1
 8006dd2:	6839      	ldr	r1, [r7, #0]
 8006dd4:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    DataStruct->Gz = DataStruct->Gyro_Z_RAW / 131.0;
 8006dd8:	683b      	ldr	r3, [r7, #0]
 8006dda:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 8006dde:	4618      	mov	r0, r3
 8006de0:	f7f9 fb4c 	bl	800047c <__aeabi_i2d>
 8006de4:	a308      	add	r3, pc, #32	; (adr r3, 8006e08 <MPU6050_Read_All+0x190>)
 8006de6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dea:	f7f9 fcdb 	bl	80007a4 <__aeabi_ddiv>
 8006dee:	4602      	mov	r2, r0
 8006df0:	460b      	mov	r3, r1
 8006df2:	6839      	ldr	r1, [r7, #0]
 8006df4:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
}
 8006df8:	bf00      	nop
 8006dfa:	3718      	adds	r7, #24
 8006dfc:	46bd      	mov	sp, r7
 8006dfe:	bd80      	pop	{r7, pc}
 8006e00:	00000000 	.word	0x00000000
 8006e04:	40cc2900 	.word	0x40cc2900
 8006e08:	00000000 	.word	0x00000000
 8006e0c:	40606000 	.word	0x40606000
 8006e10:	40d00000 	.word	0x40d00000
 8006e14:	43aa0000 	.word	0x43aa0000
 8006e18:	42121eb8 	.word	0x42121eb8

08006e1c <memset>:
 8006e1c:	4402      	add	r2, r0
 8006e1e:	4603      	mov	r3, r0
 8006e20:	4293      	cmp	r3, r2
 8006e22:	d100      	bne.n	8006e26 <memset+0xa>
 8006e24:	4770      	bx	lr
 8006e26:	f803 1b01 	strb.w	r1, [r3], #1
 8006e2a:	e7f9      	b.n	8006e20 <memset+0x4>

08006e2c <__errno>:
 8006e2c:	4b01      	ldr	r3, [pc, #4]	; (8006e34 <__errno+0x8>)
 8006e2e:	6818      	ldr	r0, [r3, #0]
 8006e30:	4770      	bx	lr
 8006e32:	bf00      	nop
 8006e34:	200000e8 	.word	0x200000e8

08006e38 <__libc_init_array>:
 8006e38:	b570      	push	{r4, r5, r6, lr}
 8006e3a:	4d0d      	ldr	r5, [pc, #52]	; (8006e70 <__libc_init_array+0x38>)
 8006e3c:	4c0d      	ldr	r4, [pc, #52]	; (8006e74 <__libc_init_array+0x3c>)
 8006e3e:	1b64      	subs	r4, r4, r5
 8006e40:	10a4      	asrs	r4, r4, #2
 8006e42:	2600      	movs	r6, #0
 8006e44:	42a6      	cmp	r6, r4
 8006e46:	d109      	bne.n	8006e5c <__libc_init_array+0x24>
 8006e48:	4d0b      	ldr	r5, [pc, #44]	; (8006e78 <__libc_init_array+0x40>)
 8006e4a:	4c0c      	ldr	r4, [pc, #48]	; (8006e7c <__libc_init_array+0x44>)
 8006e4c:	f000 fb92 	bl	8007574 <_init>
 8006e50:	1b64      	subs	r4, r4, r5
 8006e52:	10a4      	asrs	r4, r4, #2
 8006e54:	2600      	movs	r6, #0
 8006e56:	42a6      	cmp	r6, r4
 8006e58:	d105      	bne.n	8006e66 <__libc_init_array+0x2e>
 8006e5a:	bd70      	pop	{r4, r5, r6, pc}
 8006e5c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006e60:	4798      	blx	r3
 8006e62:	3601      	adds	r6, #1
 8006e64:	e7ee      	b.n	8006e44 <__libc_init_array+0xc>
 8006e66:	f855 3b04 	ldr.w	r3, [r5], #4
 8006e6a:	4798      	blx	r3
 8006e6c:	3601      	adds	r6, #1
 8006e6e:	e7f2      	b.n	8006e56 <__libc_init_array+0x1e>
 8006e70:	08007628 	.word	0x08007628
 8006e74:	08007628 	.word	0x08007628
 8006e78:	08007628 	.word	0x08007628
 8006e7c:	0800762c 	.word	0x0800762c

08006e80 <atan2>:
 8006e80:	f000 bab2 	b.w	80073e8 <__ieee754_atan2>

08006e84 <sqrt>:
 8006e84:	b538      	push	{r3, r4, r5, lr}
 8006e86:	ed2d 8b02 	vpush	{d8}
 8006e8a:	ec55 4b10 	vmov	r4, r5, d0
 8006e8e:	f000 f9d1 	bl	8007234 <__ieee754_sqrt>
 8006e92:	4622      	mov	r2, r4
 8006e94:	462b      	mov	r3, r5
 8006e96:	4620      	mov	r0, r4
 8006e98:	4629      	mov	r1, r5
 8006e9a:	eeb0 8a40 	vmov.f32	s16, s0
 8006e9e:	eef0 8a60 	vmov.f32	s17, s1
 8006ea2:	f7f9 fdef 	bl	8000a84 <__aeabi_dcmpun>
 8006ea6:	b990      	cbnz	r0, 8006ece <sqrt+0x4a>
 8006ea8:	2200      	movs	r2, #0
 8006eaa:	2300      	movs	r3, #0
 8006eac:	4620      	mov	r0, r4
 8006eae:	4629      	mov	r1, r5
 8006eb0:	f7f9 fdc0 	bl	8000a34 <__aeabi_dcmplt>
 8006eb4:	b158      	cbz	r0, 8006ece <sqrt+0x4a>
 8006eb6:	f7ff ffb9 	bl	8006e2c <__errno>
 8006eba:	2321      	movs	r3, #33	; 0x21
 8006ebc:	6003      	str	r3, [r0, #0]
 8006ebe:	2200      	movs	r2, #0
 8006ec0:	2300      	movs	r3, #0
 8006ec2:	4610      	mov	r0, r2
 8006ec4:	4619      	mov	r1, r3
 8006ec6:	f7f9 fc6d 	bl	80007a4 <__aeabi_ddiv>
 8006eca:	ec41 0b18 	vmov	d8, r0, r1
 8006ece:	eeb0 0a48 	vmov.f32	s0, s16
 8006ed2:	eef0 0a68 	vmov.f32	s1, s17
 8006ed6:	ecbd 8b02 	vpop	{d8}
 8006eda:	bd38      	pop	{r3, r4, r5, pc}
 8006edc:	0000      	movs	r0, r0
	...

08006ee0 <atan>:
 8006ee0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ee4:	ec55 4b10 	vmov	r4, r5, d0
 8006ee8:	4bc3      	ldr	r3, [pc, #780]	; (80071f8 <atan+0x318>)
 8006eea:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8006eee:	429e      	cmp	r6, r3
 8006ef0:	46ab      	mov	fp, r5
 8006ef2:	dd18      	ble.n	8006f26 <atan+0x46>
 8006ef4:	4bc1      	ldr	r3, [pc, #772]	; (80071fc <atan+0x31c>)
 8006ef6:	429e      	cmp	r6, r3
 8006ef8:	dc01      	bgt.n	8006efe <atan+0x1e>
 8006efa:	d109      	bne.n	8006f10 <atan+0x30>
 8006efc:	b144      	cbz	r4, 8006f10 <atan+0x30>
 8006efe:	4622      	mov	r2, r4
 8006f00:	462b      	mov	r3, r5
 8006f02:	4620      	mov	r0, r4
 8006f04:	4629      	mov	r1, r5
 8006f06:	f7f9 f96d 	bl	80001e4 <__adddf3>
 8006f0a:	4604      	mov	r4, r0
 8006f0c:	460d      	mov	r5, r1
 8006f0e:	e006      	b.n	8006f1e <atan+0x3e>
 8006f10:	f1bb 0f00 	cmp.w	fp, #0
 8006f14:	f300 8131 	bgt.w	800717a <atan+0x29a>
 8006f18:	a59b      	add	r5, pc, #620	; (adr r5, 8007188 <atan+0x2a8>)
 8006f1a:	e9d5 4500 	ldrd	r4, r5, [r5]
 8006f1e:	ec45 4b10 	vmov	d0, r4, r5
 8006f22:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f26:	4bb6      	ldr	r3, [pc, #728]	; (8007200 <atan+0x320>)
 8006f28:	429e      	cmp	r6, r3
 8006f2a:	dc14      	bgt.n	8006f56 <atan+0x76>
 8006f2c:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8006f30:	429e      	cmp	r6, r3
 8006f32:	dc0d      	bgt.n	8006f50 <atan+0x70>
 8006f34:	a396      	add	r3, pc, #600	; (adr r3, 8007190 <atan+0x2b0>)
 8006f36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f3a:	ee10 0a10 	vmov	r0, s0
 8006f3e:	4629      	mov	r1, r5
 8006f40:	f7f9 f950 	bl	80001e4 <__adddf3>
 8006f44:	4baf      	ldr	r3, [pc, #700]	; (8007204 <atan+0x324>)
 8006f46:	2200      	movs	r2, #0
 8006f48:	f7f9 fd92 	bl	8000a70 <__aeabi_dcmpgt>
 8006f4c:	2800      	cmp	r0, #0
 8006f4e:	d1e6      	bne.n	8006f1e <atan+0x3e>
 8006f50:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8006f54:	e02b      	b.n	8006fae <atan+0xce>
 8006f56:	f000 f963 	bl	8007220 <fabs>
 8006f5a:	4bab      	ldr	r3, [pc, #684]	; (8007208 <atan+0x328>)
 8006f5c:	429e      	cmp	r6, r3
 8006f5e:	ec55 4b10 	vmov	r4, r5, d0
 8006f62:	f300 80bf 	bgt.w	80070e4 <atan+0x204>
 8006f66:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 8006f6a:	429e      	cmp	r6, r3
 8006f6c:	f300 80a0 	bgt.w	80070b0 <atan+0x1d0>
 8006f70:	ee10 2a10 	vmov	r2, s0
 8006f74:	ee10 0a10 	vmov	r0, s0
 8006f78:	462b      	mov	r3, r5
 8006f7a:	4629      	mov	r1, r5
 8006f7c:	f7f9 f932 	bl	80001e4 <__adddf3>
 8006f80:	4ba0      	ldr	r3, [pc, #640]	; (8007204 <atan+0x324>)
 8006f82:	2200      	movs	r2, #0
 8006f84:	f7f9 f92c 	bl	80001e0 <__aeabi_dsub>
 8006f88:	2200      	movs	r2, #0
 8006f8a:	4606      	mov	r6, r0
 8006f8c:	460f      	mov	r7, r1
 8006f8e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006f92:	4620      	mov	r0, r4
 8006f94:	4629      	mov	r1, r5
 8006f96:	f7f9 f925 	bl	80001e4 <__adddf3>
 8006f9a:	4602      	mov	r2, r0
 8006f9c:	460b      	mov	r3, r1
 8006f9e:	4630      	mov	r0, r6
 8006fa0:	4639      	mov	r1, r7
 8006fa2:	f7f9 fbff 	bl	80007a4 <__aeabi_ddiv>
 8006fa6:	f04f 0a00 	mov.w	sl, #0
 8006faa:	4604      	mov	r4, r0
 8006fac:	460d      	mov	r5, r1
 8006fae:	4622      	mov	r2, r4
 8006fb0:	462b      	mov	r3, r5
 8006fb2:	4620      	mov	r0, r4
 8006fb4:	4629      	mov	r1, r5
 8006fb6:	f7f9 facb 	bl	8000550 <__aeabi_dmul>
 8006fba:	4602      	mov	r2, r0
 8006fbc:	460b      	mov	r3, r1
 8006fbe:	4680      	mov	r8, r0
 8006fc0:	4689      	mov	r9, r1
 8006fc2:	f7f9 fac5 	bl	8000550 <__aeabi_dmul>
 8006fc6:	a374      	add	r3, pc, #464	; (adr r3, 8007198 <atan+0x2b8>)
 8006fc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fcc:	4606      	mov	r6, r0
 8006fce:	460f      	mov	r7, r1
 8006fd0:	f7f9 fabe 	bl	8000550 <__aeabi_dmul>
 8006fd4:	a372      	add	r3, pc, #456	; (adr r3, 80071a0 <atan+0x2c0>)
 8006fd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fda:	f7f9 f903 	bl	80001e4 <__adddf3>
 8006fde:	4632      	mov	r2, r6
 8006fe0:	463b      	mov	r3, r7
 8006fe2:	f7f9 fab5 	bl	8000550 <__aeabi_dmul>
 8006fe6:	a370      	add	r3, pc, #448	; (adr r3, 80071a8 <atan+0x2c8>)
 8006fe8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fec:	f7f9 f8fa 	bl	80001e4 <__adddf3>
 8006ff0:	4632      	mov	r2, r6
 8006ff2:	463b      	mov	r3, r7
 8006ff4:	f7f9 faac 	bl	8000550 <__aeabi_dmul>
 8006ff8:	a36d      	add	r3, pc, #436	; (adr r3, 80071b0 <atan+0x2d0>)
 8006ffa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ffe:	f7f9 f8f1 	bl	80001e4 <__adddf3>
 8007002:	4632      	mov	r2, r6
 8007004:	463b      	mov	r3, r7
 8007006:	f7f9 faa3 	bl	8000550 <__aeabi_dmul>
 800700a:	a36b      	add	r3, pc, #428	; (adr r3, 80071b8 <atan+0x2d8>)
 800700c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007010:	f7f9 f8e8 	bl	80001e4 <__adddf3>
 8007014:	4632      	mov	r2, r6
 8007016:	463b      	mov	r3, r7
 8007018:	f7f9 fa9a 	bl	8000550 <__aeabi_dmul>
 800701c:	a368      	add	r3, pc, #416	; (adr r3, 80071c0 <atan+0x2e0>)
 800701e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007022:	f7f9 f8df 	bl	80001e4 <__adddf3>
 8007026:	4642      	mov	r2, r8
 8007028:	464b      	mov	r3, r9
 800702a:	f7f9 fa91 	bl	8000550 <__aeabi_dmul>
 800702e:	a366      	add	r3, pc, #408	; (adr r3, 80071c8 <atan+0x2e8>)
 8007030:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007034:	4680      	mov	r8, r0
 8007036:	4689      	mov	r9, r1
 8007038:	4630      	mov	r0, r6
 800703a:	4639      	mov	r1, r7
 800703c:	f7f9 fa88 	bl	8000550 <__aeabi_dmul>
 8007040:	a363      	add	r3, pc, #396	; (adr r3, 80071d0 <atan+0x2f0>)
 8007042:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007046:	f7f9 f8cb 	bl	80001e0 <__aeabi_dsub>
 800704a:	4632      	mov	r2, r6
 800704c:	463b      	mov	r3, r7
 800704e:	f7f9 fa7f 	bl	8000550 <__aeabi_dmul>
 8007052:	a361      	add	r3, pc, #388	; (adr r3, 80071d8 <atan+0x2f8>)
 8007054:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007058:	f7f9 f8c2 	bl	80001e0 <__aeabi_dsub>
 800705c:	4632      	mov	r2, r6
 800705e:	463b      	mov	r3, r7
 8007060:	f7f9 fa76 	bl	8000550 <__aeabi_dmul>
 8007064:	a35e      	add	r3, pc, #376	; (adr r3, 80071e0 <atan+0x300>)
 8007066:	e9d3 2300 	ldrd	r2, r3, [r3]
 800706a:	f7f9 f8b9 	bl	80001e0 <__aeabi_dsub>
 800706e:	4632      	mov	r2, r6
 8007070:	463b      	mov	r3, r7
 8007072:	f7f9 fa6d 	bl	8000550 <__aeabi_dmul>
 8007076:	a35c      	add	r3, pc, #368	; (adr r3, 80071e8 <atan+0x308>)
 8007078:	e9d3 2300 	ldrd	r2, r3, [r3]
 800707c:	f7f9 f8b0 	bl	80001e0 <__aeabi_dsub>
 8007080:	4632      	mov	r2, r6
 8007082:	463b      	mov	r3, r7
 8007084:	f7f9 fa64 	bl	8000550 <__aeabi_dmul>
 8007088:	4602      	mov	r2, r0
 800708a:	460b      	mov	r3, r1
 800708c:	4640      	mov	r0, r8
 800708e:	4649      	mov	r1, r9
 8007090:	f7f9 f8a8 	bl	80001e4 <__adddf3>
 8007094:	4622      	mov	r2, r4
 8007096:	462b      	mov	r3, r5
 8007098:	f7f9 fa5a 	bl	8000550 <__aeabi_dmul>
 800709c:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
 80070a0:	4602      	mov	r2, r0
 80070a2:	460b      	mov	r3, r1
 80070a4:	d14b      	bne.n	800713e <atan+0x25e>
 80070a6:	4620      	mov	r0, r4
 80070a8:	4629      	mov	r1, r5
 80070aa:	f7f9 f899 	bl	80001e0 <__aeabi_dsub>
 80070ae:	e72c      	b.n	8006f0a <atan+0x2a>
 80070b0:	ee10 0a10 	vmov	r0, s0
 80070b4:	4b53      	ldr	r3, [pc, #332]	; (8007204 <atan+0x324>)
 80070b6:	2200      	movs	r2, #0
 80070b8:	4629      	mov	r1, r5
 80070ba:	f7f9 f891 	bl	80001e0 <__aeabi_dsub>
 80070be:	4b51      	ldr	r3, [pc, #324]	; (8007204 <atan+0x324>)
 80070c0:	4606      	mov	r6, r0
 80070c2:	460f      	mov	r7, r1
 80070c4:	2200      	movs	r2, #0
 80070c6:	4620      	mov	r0, r4
 80070c8:	4629      	mov	r1, r5
 80070ca:	f7f9 f88b 	bl	80001e4 <__adddf3>
 80070ce:	4602      	mov	r2, r0
 80070d0:	460b      	mov	r3, r1
 80070d2:	4630      	mov	r0, r6
 80070d4:	4639      	mov	r1, r7
 80070d6:	f7f9 fb65 	bl	80007a4 <__aeabi_ddiv>
 80070da:	f04f 0a01 	mov.w	sl, #1
 80070de:	4604      	mov	r4, r0
 80070e0:	460d      	mov	r5, r1
 80070e2:	e764      	b.n	8006fae <atan+0xce>
 80070e4:	4b49      	ldr	r3, [pc, #292]	; (800720c <atan+0x32c>)
 80070e6:	429e      	cmp	r6, r3
 80070e8:	da1d      	bge.n	8007126 <atan+0x246>
 80070ea:	ee10 0a10 	vmov	r0, s0
 80070ee:	4b48      	ldr	r3, [pc, #288]	; (8007210 <atan+0x330>)
 80070f0:	2200      	movs	r2, #0
 80070f2:	4629      	mov	r1, r5
 80070f4:	f7f9 f874 	bl	80001e0 <__aeabi_dsub>
 80070f8:	4b45      	ldr	r3, [pc, #276]	; (8007210 <atan+0x330>)
 80070fa:	4606      	mov	r6, r0
 80070fc:	460f      	mov	r7, r1
 80070fe:	2200      	movs	r2, #0
 8007100:	4620      	mov	r0, r4
 8007102:	4629      	mov	r1, r5
 8007104:	f7f9 fa24 	bl	8000550 <__aeabi_dmul>
 8007108:	4b3e      	ldr	r3, [pc, #248]	; (8007204 <atan+0x324>)
 800710a:	2200      	movs	r2, #0
 800710c:	f7f9 f86a 	bl	80001e4 <__adddf3>
 8007110:	4602      	mov	r2, r0
 8007112:	460b      	mov	r3, r1
 8007114:	4630      	mov	r0, r6
 8007116:	4639      	mov	r1, r7
 8007118:	f7f9 fb44 	bl	80007a4 <__aeabi_ddiv>
 800711c:	f04f 0a02 	mov.w	sl, #2
 8007120:	4604      	mov	r4, r0
 8007122:	460d      	mov	r5, r1
 8007124:	e743      	b.n	8006fae <atan+0xce>
 8007126:	462b      	mov	r3, r5
 8007128:	ee10 2a10 	vmov	r2, s0
 800712c:	4939      	ldr	r1, [pc, #228]	; (8007214 <atan+0x334>)
 800712e:	2000      	movs	r0, #0
 8007130:	f7f9 fb38 	bl	80007a4 <__aeabi_ddiv>
 8007134:	f04f 0a03 	mov.w	sl, #3
 8007138:	4604      	mov	r4, r0
 800713a:	460d      	mov	r5, r1
 800713c:	e737      	b.n	8006fae <atan+0xce>
 800713e:	4b36      	ldr	r3, [pc, #216]	; (8007218 <atan+0x338>)
 8007140:	4e36      	ldr	r6, [pc, #216]	; (800721c <atan+0x33c>)
 8007142:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8007146:	e9d3 2300 	ldrd	r2, r3, [r3]
 800714a:	f7f9 f849 	bl	80001e0 <__aeabi_dsub>
 800714e:	4622      	mov	r2, r4
 8007150:	462b      	mov	r3, r5
 8007152:	f7f9 f845 	bl	80001e0 <__aeabi_dsub>
 8007156:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800715a:	4602      	mov	r2, r0
 800715c:	460b      	mov	r3, r1
 800715e:	e9d6 0100 	ldrd	r0, r1, [r6]
 8007162:	f7f9 f83d 	bl	80001e0 <__aeabi_dsub>
 8007166:	f1bb 0f00 	cmp.w	fp, #0
 800716a:	4604      	mov	r4, r0
 800716c:	460d      	mov	r5, r1
 800716e:	f6bf aed6 	bge.w	8006f1e <atan+0x3e>
 8007172:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007176:	461d      	mov	r5, r3
 8007178:	e6d1      	b.n	8006f1e <atan+0x3e>
 800717a:	a51d      	add	r5, pc, #116	; (adr r5, 80071f0 <atan+0x310>)
 800717c:	e9d5 4500 	ldrd	r4, r5, [r5]
 8007180:	e6cd      	b.n	8006f1e <atan+0x3e>
 8007182:	bf00      	nop
 8007184:	f3af 8000 	nop.w
 8007188:	54442d18 	.word	0x54442d18
 800718c:	bff921fb 	.word	0xbff921fb
 8007190:	8800759c 	.word	0x8800759c
 8007194:	7e37e43c 	.word	0x7e37e43c
 8007198:	e322da11 	.word	0xe322da11
 800719c:	3f90ad3a 	.word	0x3f90ad3a
 80071a0:	24760deb 	.word	0x24760deb
 80071a4:	3fa97b4b 	.word	0x3fa97b4b
 80071a8:	a0d03d51 	.word	0xa0d03d51
 80071ac:	3fb10d66 	.word	0x3fb10d66
 80071b0:	c54c206e 	.word	0xc54c206e
 80071b4:	3fb745cd 	.word	0x3fb745cd
 80071b8:	920083ff 	.word	0x920083ff
 80071bc:	3fc24924 	.word	0x3fc24924
 80071c0:	5555550d 	.word	0x5555550d
 80071c4:	3fd55555 	.word	0x3fd55555
 80071c8:	2c6a6c2f 	.word	0x2c6a6c2f
 80071cc:	bfa2b444 	.word	0xbfa2b444
 80071d0:	52defd9a 	.word	0x52defd9a
 80071d4:	3fadde2d 	.word	0x3fadde2d
 80071d8:	af749a6d 	.word	0xaf749a6d
 80071dc:	3fb3b0f2 	.word	0x3fb3b0f2
 80071e0:	fe231671 	.word	0xfe231671
 80071e4:	3fbc71c6 	.word	0x3fbc71c6
 80071e8:	9998ebc4 	.word	0x9998ebc4
 80071ec:	3fc99999 	.word	0x3fc99999
 80071f0:	54442d18 	.word	0x54442d18
 80071f4:	3ff921fb 	.word	0x3ff921fb
 80071f8:	440fffff 	.word	0x440fffff
 80071fc:	7ff00000 	.word	0x7ff00000
 8007200:	3fdbffff 	.word	0x3fdbffff
 8007204:	3ff00000 	.word	0x3ff00000
 8007208:	3ff2ffff 	.word	0x3ff2ffff
 800720c:	40038000 	.word	0x40038000
 8007210:	3ff80000 	.word	0x3ff80000
 8007214:	bff00000 	.word	0xbff00000
 8007218:	080075d0 	.word	0x080075d0
 800721c:	080075b0 	.word	0x080075b0

08007220 <fabs>:
 8007220:	ec51 0b10 	vmov	r0, r1, d0
 8007224:	ee10 2a10 	vmov	r2, s0
 8007228:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800722c:	ec43 2b10 	vmov	d0, r2, r3
 8007230:	4770      	bx	lr
	...

08007234 <__ieee754_sqrt>:
 8007234:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007238:	ec55 4b10 	vmov	r4, r5, d0
 800723c:	4e67      	ldr	r6, [pc, #412]	; (80073dc <__ieee754_sqrt+0x1a8>)
 800723e:	43ae      	bics	r6, r5
 8007240:	ee10 0a10 	vmov	r0, s0
 8007244:	ee10 2a10 	vmov	r2, s0
 8007248:	4629      	mov	r1, r5
 800724a:	462b      	mov	r3, r5
 800724c:	d10d      	bne.n	800726a <__ieee754_sqrt+0x36>
 800724e:	f7f9 f97f 	bl	8000550 <__aeabi_dmul>
 8007252:	4602      	mov	r2, r0
 8007254:	460b      	mov	r3, r1
 8007256:	4620      	mov	r0, r4
 8007258:	4629      	mov	r1, r5
 800725a:	f7f8 ffc3 	bl	80001e4 <__adddf3>
 800725e:	4604      	mov	r4, r0
 8007260:	460d      	mov	r5, r1
 8007262:	ec45 4b10 	vmov	d0, r4, r5
 8007266:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800726a:	2d00      	cmp	r5, #0
 800726c:	dc0b      	bgt.n	8007286 <__ieee754_sqrt+0x52>
 800726e:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8007272:	4326      	orrs	r6, r4
 8007274:	d0f5      	beq.n	8007262 <__ieee754_sqrt+0x2e>
 8007276:	b135      	cbz	r5, 8007286 <__ieee754_sqrt+0x52>
 8007278:	f7f8 ffb2 	bl	80001e0 <__aeabi_dsub>
 800727c:	4602      	mov	r2, r0
 800727e:	460b      	mov	r3, r1
 8007280:	f7f9 fa90 	bl	80007a4 <__aeabi_ddiv>
 8007284:	e7eb      	b.n	800725e <__ieee754_sqrt+0x2a>
 8007286:	1509      	asrs	r1, r1, #20
 8007288:	f000 808d 	beq.w	80073a6 <__ieee754_sqrt+0x172>
 800728c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007290:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 8007294:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007298:	07c9      	lsls	r1, r1, #31
 800729a:	bf5c      	itt	pl
 800729c:	005b      	lslpl	r3, r3, #1
 800729e:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 80072a2:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80072a6:	bf58      	it	pl
 80072a8:	0052      	lslpl	r2, r2, #1
 80072aa:	2500      	movs	r5, #0
 80072ac:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 80072b0:	1076      	asrs	r6, r6, #1
 80072b2:	0052      	lsls	r2, r2, #1
 80072b4:	f04f 0e16 	mov.w	lr, #22
 80072b8:	46ac      	mov	ip, r5
 80072ba:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80072be:	eb0c 0001 	add.w	r0, ip, r1
 80072c2:	4298      	cmp	r0, r3
 80072c4:	bfde      	ittt	le
 80072c6:	1a1b      	suble	r3, r3, r0
 80072c8:	eb00 0c01 	addle.w	ip, r0, r1
 80072cc:	186d      	addle	r5, r5, r1
 80072ce:	005b      	lsls	r3, r3, #1
 80072d0:	f1be 0e01 	subs.w	lr, lr, #1
 80072d4:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 80072d8:	ea4f 0151 	mov.w	r1, r1, lsr #1
 80072dc:	ea4f 0242 	mov.w	r2, r2, lsl #1
 80072e0:	d1ed      	bne.n	80072be <__ieee754_sqrt+0x8a>
 80072e2:	4674      	mov	r4, lr
 80072e4:	2720      	movs	r7, #32
 80072e6:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 80072ea:	4563      	cmp	r3, ip
 80072ec:	eb01 000e 	add.w	r0, r1, lr
 80072f0:	dc02      	bgt.n	80072f8 <__ieee754_sqrt+0xc4>
 80072f2:	d113      	bne.n	800731c <__ieee754_sqrt+0xe8>
 80072f4:	4290      	cmp	r0, r2
 80072f6:	d811      	bhi.n	800731c <__ieee754_sqrt+0xe8>
 80072f8:	2800      	cmp	r0, #0
 80072fa:	eb00 0e01 	add.w	lr, r0, r1
 80072fe:	da57      	bge.n	80073b0 <__ieee754_sqrt+0x17c>
 8007300:	f1be 0f00 	cmp.w	lr, #0
 8007304:	db54      	blt.n	80073b0 <__ieee754_sqrt+0x17c>
 8007306:	f10c 0801 	add.w	r8, ip, #1
 800730a:	eba3 030c 	sub.w	r3, r3, ip
 800730e:	4290      	cmp	r0, r2
 8007310:	bf88      	it	hi
 8007312:	f103 33ff 	addhi.w	r3, r3, #4294967295	; 0xffffffff
 8007316:	1a12      	subs	r2, r2, r0
 8007318:	440c      	add	r4, r1
 800731a:	46c4      	mov	ip, r8
 800731c:	005b      	lsls	r3, r3, #1
 800731e:	3f01      	subs	r7, #1
 8007320:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8007324:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8007328:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800732c:	d1dd      	bne.n	80072ea <__ieee754_sqrt+0xb6>
 800732e:	4313      	orrs	r3, r2
 8007330:	d01b      	beq.n	800736a <__ieee754_sqrt+0x136>
 8007332:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 80073e0 <__ieee754_sqrt+0x1ac>
 8007336:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 80073e4 <__ieee754_sqrt+0x1b0>
 800733a:	e9da 0100 	ldrd	r0, r1, [sl]
 800733e:	e9db 2300 	ldrd	r2, r3, [fp]
 8007342:	f7f8 ff4d 	bl	80001e0 <__aeabi_dsub>
 8007346:	e9da 8900 	ldrd	r8, r9, [sl]
 800734a:	4602      	mov	r2, r0
 800734c:	460b      	mov	r3, r1
 800734e:	4640      	mov	r0, r8
 8007350:	4649      	mov	r1, r9
 8007352:	f7f9 fb79 	bl	8000a48 <__aeabi_dcmple>
 8007356:	b140      	cbz	r0, 800736a <__ieee754_sqrt+0x136>
 8007358:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 800735c:	e9da 0100 	ldrd	r0, r1, [sl]
 8007360:	e9db 2300 	ldrd	r2, r3, [fp]
 8007364:	d126      	bne.n	80073b4 <__ieee754_sqrt+0x180>
 8007366:	3501      	adds	r5, #1
 8007368:	463c      	mov	r4, r7
 800736a:	106a      	asrs	r2, r5, #1
 800736c:	0863      	lsrs	r3, r4, #1
 800736e:	07e9      	lsls	r1, r5, #31
 8007370:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8007374:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8007378:	bf48      	it	mi
 800737a:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 800737e:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 8007382:	461c      	mov	r4, r3
 8007384:	e76d      	b.n	8007262 <__ieee754_sqrt+0x2e>
 8007386:	0ad3      	lsrs	r3, r2, #11
 8007388:	3815      	subs	r0, #21
 800738a:	0552      	lsls	r2, r2, #21
 800738c:	2b00      	cmp	r3, #0
 800738e:	d0fa      	beq.n	8007386 <__ieee754_sqrt+0x152>
 8007390:	02dc      	lsls	r4, r3, #11
 8007392:	d50a      	bpl.n	80073aa <__ieee754_sqrt+0x176>
 8007394:	f1c1 0420 	rsb	r4, r1, #32
 8007398:	fa22 f404 	lsr.w	r4, r2, r4
 800739c:	1e4d      	subs	r5, r1, #1
 800739e:	408a      	lsls	r2, r1
 80073a0:	4323      	orrs	r3, r4
 80073a2:	1b41      	subs	r1, r0, r5
 80073a4:	e772      	b.n	800728c <__ieee754_sqrt+0x58>
 80073a6:	4608      	mov	r0, r1
 80073a8:	e7f0      	b.n	800738c <__ieee754_sqrt+0x158>
 80073aa:	005b      	lsls	r3, r3, #1
 80073ac:	3101      	adds	r1, #1
 80073ae:	e7ef      	b.n	8007390 <__ieee754_sqrt+0x15c>
 80073b0:	46e0      	mov	r8, ip
 80073b2:	e7aa      	b.n	800730a <__ieee754_sqrt+0xd6>
 80073b4:	f7f8 ff16 	bl	80001e4 <__adddf3>
 80073b8:	e9da 8900 	ldrd	r8, r9, [sl]
 80073bc:	4602      	mov	r2, r0
 80073be:	460b      	mov	r3, r1
 80073c0:	4640      	mov	r0, r8
 80073c2:	4649      	mov	r1, r9
 80073c4:	f7f9 fb36 	bl	8000a34 <__aeabi_dcmplt>
 80073c8:	b120      	cbz	r0, 80073d4 <__ieee754_sqrt+0x1a0>
 80073ca:	1ca0      	adds	r0, r4, #2
 80073cc:	bf08      	it	eq
 80073ce:	3501      	addeq	r5, #1
 80073d0:	3402      	adds	r4, #2
 80073d2:	e7ca      	b.n	800736a <__ieee754_sqrt+0x136>
 80073d4:	3401      	adds	r4, #1
 80073d6:	f024 0401 	bic.w	r4, r4, #1
 80073da:	e7c6      	b.n	800736a <__ieee754_sqrt+0x136>
 80073dc:	7ff00000 	.word	0x7ff00000
 80073e0:	200000f0 	.word	0x200000f0
 80073e4:	200000f8 	.word	0x200000f8

080073e8 <__ieee754_atan2>:
 80073e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80073ec:	ec57 6b11 	vmov	r6, r7, d1
 80073f0:	4273      	negs	r3, r6
 80073f2:	f8df 817c 	ldr.w	r8, [pc, #380]	; 8007570 <__ieee754_atan2+0x188>
 80073f6:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 80073fa:	4333      	orrs	r3, r6
 80073fc:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8007400:	4543      	cmp	r3, r8
 8007402:	ec51 0b10 	vmov	r0, r1, d0
 8007406:	ee11 5a10 	vmov	r5, s2
 800740a:	d80a      	bhi.n	8007422 <__ieee754_atan2+0x3a>
 800740c:	4244      	negs	r4, r0
 800740e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8007412:	4304      	orrs	r4, r0
 8007414:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 8007418:	4544      	cmp	r4, r8
 800741a:	ee10 9a10 	vmov	r9, s0
 800741e:	468e      	mov	lr, r1
 8007420:	d907      	bls.n	8007432 <__ieee754_atan2+0x4a>
 8007422:	4632      	mov	r2, r6
 8007424:	463b      	mov	r3, r7
 8007426:	f7f8 fedd 	bl	80001e4 <__adddf3>
 800742a:	ec41 0b10 	vmov	d0, r0, r1
 800742e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007432:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 8007436:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800743a:	4334      	orrs	r4, r6
 800743c:	d103      	bne.n	8007446 <__ieee754_atan2+0x5e>
 800743e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007442:	f7ff bd4d 	b.w	8006ee0 <atan>
 8007446:	17bc      	asrs	r4, r7, #30
 8007448:	f004 0402 	and.w	r4, r4, #2
 800744c:	ea53 0909 	orrs.w	r9, r3, r9
 8007450:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 8007454:	d107      	bne.n	8007466 <__ieee754_atan2+0x7e>
 8007456:	2c02      	cmp	r4, #2
 8007458:	d05f      	beq.n	800751a <__ieee754_atan2+0x132>
 800745a:	2c03      	cmp	r4, #3
 800745c:	d1e5      	bne.n	800742a <__ieee754_atan2+0x42>
 800745e:	a140      	add	r1, pc, #256	; (adr r1, 8007560 <__ieee754_atan2+0x178>)
 8007460:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007464:	e7e1      	b.n	800742a <__ieee754_atan2+0x42>
 8007466:	4315      	orrs	r5, r2
 8007468:	d106      	bne.n	8007478 <__ieee754_atan2+0x90>
 800746a:	f1be 0f00 	cmp.w	lr, #0
 800746e:	da5f      	bge.n	8007530 <__ieee754_atan2+0x148>
 8007470:	a13d      	add	r1, pc, #244	; (adr r1, 8007568 <__ieee754_atan2+0x180>)
 8007472:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007476:	e7d8      	b.n	800742a <__ieee754_atan2+0x42>
 8007478:	4542      	cmp	r2, r8
 800747a:	d10f      	bne.n	800749c <__ieee754_atan2+0xb4>
 800747c:	4293      	cmp	r3, r2
 800747e:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8007482:	d107      	bne.n	8007494 <__ieee754_atan2+0xac>
 8007484:	2c02      	cmp	r4, #2
 8007486:	d84c      	bhi.n	8007522 <__ieee754_atan2+0x13a>
 8007488:	4b33      	ldr	r3, [pc, #204]	; (8007558 <__ieee754_atan2+0x170>)
 800748a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800748e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007492:	e7ca      	b.n	800742a <__ieee754_atan2+0x42>
 8007494:	2c02      	cmp	r4, #2
 8007496:	d848      	bhi.n	800752a <__ieee754_atan2+0x142>
 8007498:	4b30      	ldr	r3, [pc, #192]	; (800755c <__ieee754_atan2+0x174>)
 800749a:	e7f6      	b.n	800748a <__ieee754_atan2+0xa2>
 800749c:	4543      	cmp	r3, r8
 800749e:	d0e4      	beq.n	800746a <__ieee754_atan2+0x82>
 80074a0:	1a9b      	subs	r3, r3, r2
 80074a2:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 80074a6:	ea4f 5223 	mov.w	r2, r3, asr #20
 80074aa:	da1e      	bge.n	80074ea <__ieee754_atan2+0x102>
 80074ac:	2f00      	cmp	r7, #0
 80074ae:	da01      	bge.n	80074b4 <__ieee754_atan2+0xcc>
 80074b0:	323c      	adds	r2, #60	; 0x3c
 80074b2:	db1e      	blt.n	80074f2 <__ieee754_atan2+0x10a>
 80074b4:	4632      	mov	r2, r6
 80074b6:	463b      	mov	r3, r7
 80074b8:	f7f9 f974 	bl	80007a4 <__aeabi_ddiv>
 80074bc:	ec41 0b10 	vmov	d0, r0, r1
 80074c0:	f7ff feae 	bl	8007220 <fabs>
 80074c4:	f7ff fd0c 	bl	8006ee0 <atan>
 80074c8:	ec51 0b10 	vmov	r0, r1, d0
 80074cc:	2c01      	cmp	r4, #1
 80074ce:	d013      	beq.n	80074f8 <__ieee754_atan2+0x110>
 80074d0:	2c02      	cmp	r4, #2
 80074d2:	d015      	beq.n	8007500 <__ieee754_atan2+0x118>
 80074d4:	2c00      	cmp	r4, #0
 80074d6:	d0a8      	beq.n	800742a <__ieee754_atan2+0x42>
 80074d8:	a317      	add	r3, pc, #92	; (adr r3, 8007538 <__ieee754_atan2+0x150>)
 80074da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074de:	f7f8 fe7f 	bl	80001e0 <__aeabi_dsub>
 80074e2:	a317      	add	r3, pc, #92	; (adr r3, 8007540 <__ieee754_atan2+0x158>)
 80074e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074e8:	e014      	b.n	8007514 <__ieee754_atan2+0x12c>
 80074ea:	a117      	add	r1, pc, #92	; (adr r1, 8007548 <__ieee754_atan2+0x160>)
 80074ec:	e9d1 0100 	ldrd	r0, r1, [r1]
 80074f0:	e7ec      	b.n	80074cc <__ieee754_atan2+0xe4>
 80074f2:	2000      	movs	r0, #0
 80074f4:	2100      	movs	r1, #0
 80074f6:	e7e9      	b.n	80074cc <__ieee754_atan2+0xe4>
 80074f8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80074fc:	4619      	mov	r1, r3
 80074fe:	e794      	b.n	800742a <__ieee754_atan2+0x42>
 8007500:	a30d      	add	r3, pc, #52	; (adr r3, 8007538 <__ieee754_atan2+0x150>)
 8007502:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007506:	f7f8 fe6b 	bl	80001e0 <__aeabi_dsub>
 800750a:	4602      	mov	r2, r0
 800750c:	460b      	mov	r3, r1
 800750e:	a10c      	add	r1, pc, #48	; (adr r1, 8007540 <__ieee754_atan2+0x158>)
 8007510:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007514:	f7f8 fe64 	bl	80001e0 <__aeabi_dsub>
 8007518:	e787      	b.n	800742a <__ieee754_atan2+0x42>
 800751a:	a109      	add	r1, pc, #36	; (adr r1, 8007540 <__ieee754_atan2+0x158>)
 800751c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007520:	e783      	b.n	800742a <__ieee754_atan2+0x42>
 8007522:	a10b      	add	r1, pc, #44	; (adr r1, 8007550 <__ieee754_atan2+0x168>)
 8007524:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007528:	e77f      	b.n	800742a <__ieee754_atan2+0x42>
 800752a:	2000      	movs	r0, #0
 800752c:	2100      	movs	r1, #0
 800752e:	e77c      	b.n	800742a <__ieee754_atan2+0x42>
 8007530:	a105      	add	r1, pc, #20	; (adr r1, 8007548 <__ieee754_atan2+0x160>)
 8007532:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007536:	e778      	b.n	800742a <__ieee754_atan2+0x42>
 8007538:	33145c07 	.word	0x33145c07
 800753c:	3ca1a626 	.word	0x3ca1a626
 8007540:	54442d18 	.word	0x54442d18
 8007544:	400921fb 	.word	0x400921fb
 8007548:	54442d18 	.word	0x54442d18
 800754c:	3ff921fb 	.word	0x3ff921fb
 8007550:	54442d18 	.word	0x54442d18
 8007554:	3fe921fb 	.word	0x3fe921fb
 8007558:	080075f0 	.word	0x080075f0
 800755c:	08007608 	.word	0x08007608
 8007560:	54442d18 	.word	0x54442d18
 8007564:	c00921fb 	.word	0xc00921fb
 8007568:	54442d18 	.word	0x54442d18
 800756c:	bff921fb 	.word	0xbff921fb
 8007570:	7ff00000 	.word	0x7ff00000

08007574 <_init>:
 8007574:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007576:	bf00      	nop
 8007578:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800757a:	bc08      	pop	{r3}
 800757c:	469e      	mov	lr, r3
 800757e:	4770      	bx	lr

08007580 <_fini>:
 8007580:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007582:	bf00      	nop
 8007584:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007586:	bc08      	pop	{r3}
 8007588:	469e      	mov	lr, r3
 800758a:	4770      	bx	lr
